{
  "address": "0xBa08917fC27CD008eB244D8EAf2c66030eA596a2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "CollateralDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateralOut",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensIn",
          "type": "uint256"
        }
      ],
      "name": "LoanLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalOwed",
          "type": "uint256"
        }
      ],
      "name": "LoanRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "escrow",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountBorrowed",
          "type": "uint256"
        }
      ],
      "name": "LoanTakenOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "LoanTermsSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LOAN_DATA_LOGIC_NAME",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOAN_TERMS_CONSENSUS_LOGIC_NAME",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_updateImplementationStored",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "addSigners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetSettings",
      "outputs": [
        {
          "internalType": "contract AssetSettingsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "borrowedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cToken",
      "outputs": [
        {
          "internalType": "contract CErc20Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "canGoToEOA",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "consensusAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "requestNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "requestTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct TellerCommon.LoanRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "consensusAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "responseTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxLoanAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct TellerCommon.Signature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct TellerCommon.LoanResponse[]",
          "name": "responses",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "createLoanWithTerms",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "imp",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "sigWithData",
          "type": "bytes"
        }
      ],
      "name": "delegateTo",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositCollateral",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "escrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "getBorrowerLoans",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "getCollateralInLendingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "getCollateralNeededInTokens",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "getCollateralNeededInfo",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBorrow",
          "type": "uint256"
        }
      ],
      "name": "getInterestOwedFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "getInterestRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "getLiquidationReward",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "getLoanAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "getTotalOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementationStored",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lendingPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "settingsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initDynamicProxyLogicAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "interestOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "isActiveOrSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "isLiquidable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "isLoanSecured",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "lastCollateralIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingPool",
      "outputs": [
        {
          "internalType": "contract LendingPoolInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "liquidateLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "liquidated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanIDCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "loanStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "loanTerms",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxLoanAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            }
          ],
          "internalType": "struct TellerCommon.LoanTerms",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxLoanAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            }
          ],
          "internalType": "struct TellerCommon.LoanTerms",
          "name": "loanTerms",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "termsExpiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastCollateralIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalOwed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestOwed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowedAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "escrow",
          "type": "address"
        },
        {
          "internalType": "enum TellerCommon.LoanStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "liquidated",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "logicName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "logicRegistry",
      "outputs": [
        {
          "internalType": "contract LogicVersionsRegistryInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "principalOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "consensusAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "requestNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "requestTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct TellerCommon.LoanRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "consensusAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "responseTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxLoanAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct TellerCommon.Signature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct TellerCommon.LoanResponse[]",
          "name": "responses",
          "type": "tuple[]"
        }
      ],
      "name": "processLoanTerms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settings",
      "outputs": [
        {
          "internalType": "contract SettingsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum TellerCommon.LoanStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strictDynamic",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBorrow",
          "type": "uint256"
        }
      ],
      "name": "takeOutLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "termsExpiry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateLoanDataLogic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateLoanTermsConsensusLogic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeProxyTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanID",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3f9dfa542c834a492e3df57b30d39c9b1f388ff81565ff8e35721e671f80211a",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0xBa08917fC27CD008eB244D8EAf2c66030eA596a2",
    "transactionIndex": 0,
    "gasUsed": "3983949",
    "logsBloom": "0x
    "blockHash": "0x5d758431ad386bef9f427aac24468094f98c3e6d8872a0cdbeb2efd6368bd94c",
    "transactionHash": "0x3f9dfa542c834a492e3df57b30d39c9b1f388ff81565ff8e35721e671f80211a",
    "logs": [],
    "blockNumber": 24117026,
    "cumulativeGasUsed": "3983949",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0c80e7fb8aff27a671cb2892ea4bafd6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"CollateralDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateralOut\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIn\",\"type\":\"uint256\"}],\"name\":\"LoanLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalOwed\",\"type\":\"uint256\"}],\"name\":\"LoanRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBorrowed\",\"type\":\"uint256\"}],\"name\":\"LoanTakenOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"LoanTermsSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOAN_DATA_LOGIC_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOAN_TERMS_CONSENSUS_LOGIC_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_updateImplementationStored\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetSettings\",\"outputs\":[{\"internalType\":\"contract AssetSettingsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"borrowedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cToken\",\"outputs\":[{\"internalType\":\"contract CErc20Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"canGoToEOA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consensusAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"}],\"internalType\":\"struct TellerCommon.LoanRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consensusAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"responseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct TellerCommon.Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct TellerCommon.LoanResponse[]\",\"name\":\"responses\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"createLoanWithTerms\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"imp\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sigWithData\",\"type\":\"bytes\"}],\"name\":\"delegateTo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"getBorrowerLoans\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"getCollateralInLendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"getCollateralNeededInTokens\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"getCollateralNeededInfo\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBorrow\",\"type\":\"uint256\"}],\"name\":\"getInterestOwedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"getInterestRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"getLiquidationReward\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"getLoanAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"getTotalOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementationStored\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lendingPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settingsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initDynamicProxyLogicAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"interestOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"isActiveOrSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"isLiquidable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"isLoanSecured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"lastCollateralIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract LendingPoolInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"liquidateLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"liquidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanIDCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"loanStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"loanTerms\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct TellerCommon.LoanTerms\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct TellerCommon.LoanTerms\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"termsExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCollateralIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"},{\"internalType\":\"enum TellerCommon.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"liquidated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logicName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logicRegistry\",\"outputs\":[{\"internalType\":\"contract LogicVersionsRegistryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"principalOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consensusAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"}],\"internalType\":\"struct TellerCommon.LoanRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consensusAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"responseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct TellerCommon.Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct TellerCommon.LoanResponse[]\",\"name\":\"responses\",\"type\":\"tuple[]\"}],\"name\":\"processLoanTerms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"internalType\":\"contract SettingsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum TellerCommon.LoanStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strictDynamic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBorrow\",\"type\":\"uint256\"}],\"name\":\"takeOutLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"termsExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateLoanDataLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateLoanTermsConsensusLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeProxyTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"develop@teller.finance\",\"kind\":\"dev\",\"methods\":{\"_updateImplementationStored()\":{\"details\":\"It uses the LogicVersionsRegistry contract to get the logic address or the cached address if valid.It caches the current logic address for the proxy to reduce gas on subsequent calls within the same block.\"},\"addSigner(address)\":{\"details\":\"The sender must be the owner.It throws a require error if the sender is not the owner.\",\"params\":{\"account\":\"address to add.\"}},\"addSigners(address[])\":{\"details\":\"The sender must be the owner.It throws a require error if the sender is not the owner.\",\"params\":{\"accounts\":\"addresses to add.\"}},\"createLoanWithTerms((address,address,address,uint256,uint256,uint256,uint256),(address,address,uint256,uint256,uint256,uint256,(uint8,bytes32,bytes32))[],uint256)\":{\"params\":{\"collateralAmount\":\"Amount of collateral required for the loan\",\"request\":\"Struct of the protocol loan request\",\"responses\":\"List of structs of the protocol loan responses\"}},\"depositCollateral(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount to deposit as collateral.\",\"borrower\":\"The address of the loan borrower.\",\"loanID\":\"The ID of the loan the collateral is for\"}},\"initialize(address,address,address,address)\":{\"params\":{\"collateralTokenAddress\":\"Address of the collateral token for loans in this contract.\",\"initDynamicProxyLogicAddress\":\"Address of a deployed InitializeableDynamicProxy contract.\",\"lendingPoolAddress\":\"Address of the LendingPool.\",\"settingsAddress\":\"Address for the platform Settings contract.\"}},\"liquidateLoan(uint256)\":{\"params\":{\"loanID\":\"The ID of the loan to be liquidated\"}},\"processLoanTerms((address,address,address,uint256,uint256,uint256,uint256),(address,address,uint256,uint256,uint256,uint256,(uint8,bytes32,bytes32))[])\":{\"params\":{\"request\":\"Struct of the protocol loan request\",\"responses\":\"List of structs of the protocol loan responses\"},\"returns\":{\"_0\":\"uint256 Interest rate\",\"_1\":\"uint256 Collateral ratio\",\"_2\":\"uint256 Maximum loan amount\"}},\"repay(uint256,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to pay back to the loan\",\"loanID\":\"The ID of the loan the payment is for\"}},\"takeOutLoan(uint256,uint256)\":{\"details\":\"collateral ratio is a percentage of the loan amount that's required in collateralthe percentage will be *(10**2). I.e. collateralRatio of 5244 means 52.44% collateralis required in the loan. Interest rate is also a percentage with 2 decimal points.\"},\"withdrawCollateral(uint256,uint256)\":{\"params\":{\"amount\":\"The amount of collateral token or ether the caller is hoping to withdraw.\",\"loanID\":\"The ID of the loan the collateral is for\"}}},\"version\":1},\"userdoc\":{\"events\":{\"CollateralDeposited(uint256,address,uint256)\":{\"notice\":\"This event is emitted when collateral has been deposited for the loan\"},\"CollateralWithdrawn(uint256,address,address,uint256)\":{\"notice\":\"This event is emitted when collateral has been withdrawn\"},\"LoanLiquidated(uint256,address,address,int256,uint256)\":{\"notice\":\"This event is emitted when a loan has been successfully liquidated\"},\"LoanRepaid(uint256,address,uint256,address,uint256)\":{\"notice\":\"This event is emitted when a loan has been successfully repaid\"},\"LoanTakenOut(uint256,address,address,uint256)\":{\"notice\":\"This event is emitted when a loan has been successfully taken out\"},\"LoanTermsSet(uint256,address,address,uint256)\":{\"notice\":\"This event is emitted when loan terms have been successfully set\"}},\"kind\":\"user\",\"methods\":{\"LOAN_DATA_LOGIC_NAME()\":{\"notice\":\"Holds the logic name used for the LoanData contract.\"},\"LOAN_TERMS_CONSENSUS_LOGIC_NAME()\":{\"notice\":\"Holds the logic name used for the LoanTermsConsensus contract.\"},\"_updateImplementationStored()\":{\"notice\":\"Updates the current implementation logic address for the stored logic name.\"},\"addSigner(address)\":{\"notice\":\"It adds a new account as a signer.\"},\"addSigners(address[])\":{\"notice\":\"It adds a list of account as signers.\"},\"assetSettings()\":{\"notice\":\"It holds the platform AssetSettings instance.\"},\"cToken()\":{\"notice\":\"Holds the Compound cToken where the underlying token matches the lending token.\"},\"canGoToEOA(uint256)\":{\"notice\":\"See LoanData.canGoToEOA\"},\"collateralToken()\":{\"notice\":\"Holds the collateral token.\"},\"createLoanWithTerms((address,address,address,uint256,uint256,uint256,uint256),(address,address,uint256,uint256,uint256,uint256,(uint8,bytes32,bytes32))[],uint256)\":{\"notice\":\"Creates a loan with the loan request and terms\"},\"depositCollateral(address,uint256,uint256)\":{\"notice\":\"Deposit collateral tokens into a loan.\"},\"getBorrowerLoans(address)\":{\"notice\":\"See LoanData.getBorrowerLoans\"},\"getCollateralInLendingTokens(uint256)\":{\"notice\":\"See LoanData.getCollateralInLendingTokens\"},\"getCollateralNeededInTokens(uint256)\":{\"notice\":\"See LoanData.getCollateralNeededInTokens\"},\"getCollateralNeededInfo(uint256)\":{\"notice\":\"See LoanData.getCollateralNeededInfo\"},\"getInterestOwedFor(uint256,uint256)\":{\"notice\":\"See LoanData.getInterestOwedFor\"},\"getInterestRatio(uint256)\":{\"notice\":\"See LoanData.getInterestRatio\"},\"getLiquidationReward(uint256)\":{\"notice\":\"See LoanData.getLiquidationReward\"},\"getLoanAmount(uint256)\":{\"notice\":\"See LoanData.getLoanAmount\"},\"getTotalOwed(uint256)\":{\"notice\":\"See LoanData.getTotalOwed\"},\"implementationStored()\":{\"notice\":\"It stores the last known logic address locally to reduce gas costs.\"},\"initialize(address,address,address,address)\":{\"notice\":\"Initializes the current contract instance setting the required parameters.\"},\"isActiveOrSet(uint256)\":{\"notice\":\"See LoanData.isActiveOrSet\"},\"isLiquidable(uint256)\":{\"notice\":\"See LoanData.isLiquidable\"},\"isLoanSecured(uint256)\":{\"notice\":\"See LoanData.isLoanSecured\"},\"lendingPool()\":{\"notice\":\"Holds the instance of the LendingPool used by the LoanManager.\"},\"lendingToken()\":{\"notice\":\"Holds the lending token used for creating loans by the LoanManager and LendingPool.\"},\"liquidateLoan(uint256)\":{\"notice\":\"Liquidate a loan if it is expired or under collateralized\"},\"loanIDCounter()\":{\"notice\":\"Holds the ID of loans taken out\"},\"loans(uint256)\":{\"notice\":\"Holds the data of all loans for the lending token.\"},\"logicName()\":{\"notice\":\"It represent the logic name (key) used for this proxy.\"},\"logicRegistry()\":{\"notice\":\"It returns the logic registry that is used to determine the implementation logic for this proxy.\"},\"processLoanTerms((address,address,address,uint256,uint256,uint256,uint256),(address,address,uint256,uint256,uint256,uint256,(uint8,bytes32,bytes32))[])\":{\"notice\":\"Processes the loan request\"},\"repay(uint256,uint256)\":{\"notice\":\"Make a payment to a loan\"},\"settings()\":{\"notice\":\"It holds the platform Settings instance.\"},\"strictDynamic()\":{\"notice\":\"Boolean indicating if the proxy must check the registry for a new implementation.\"},\"takeOutLoan(uint256,uint256)\":{\"notice\":\"Take out a loan\"},\"totalCollateral()\":{\"notice\":\"Holds the total amount of collateral held by the contract.\"},\"updateLoanDataLogic()\":{\"notice\":\"It calls the LogicVersionRegistry to update the stored logic address for LoanData.\"},\"updateLoanTermsConsensusLogic()\":{\"notice\":\"It calls the LogicVersionRegistry to update the stored logic address for LoanTermsConsensus.\"},\"upgradeProxyTo(address)\":{\"notice\":\"It updates a proxy's cached implementation address.It must only be called by the LogicVersionsRegistry for non strict DynamicProxy\"},\"withdrawCollateral(uint256,uint256)\":{\"notice\":\"Withdraw collateral from a loan, unless this isn't allowed\"}},\"notice\":\"This contract is used as a basis for the creation of the different types of loans across the platformIt implements the Base contract from Teller and the ILoanManager\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/loans/LoanManager.sol\":\"LoanManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.5/interfaces/AggregatorInterface.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n  function latestTimestamp() external view returns (uint256);\\n  function latestRound() external view returns (uint256);\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0x64fa8b255860b1cf2661a2d87ca287c21479edf18673ca694a770b6498e2de39\"},\"@chainlink/contracts/src/v0.5/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title The V2 & V3 Aggregator Interface\\n * @notice Solidity V0.5 does not allow interfaces to inherit from other\\n * interfaces so this contract is a combination of v0.5 AggregatorInterface.sol\\n * and v0.5 AggregatorV3Interface.sol.\\n */\\ninterface AggregatorV2V3Interface {\\n  //\\n  // V2 Interface:\\n  //\\n  function latestAnswer() external view returns (int256);\\n  function latestTimestamp() external view returns (uint256);\\n  function latestRound() external view returns (uint256);\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n\\n  //\\n  // V3 Interface:\\n  //\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xacc87fdd0c5891084d0a2d801bb968d864f6bebacad14767a399b5b0ad3511f3\"},\"@chainlink/contracts/src/v0.5/interfaces/AggregatorV3Interface.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x636b9f52b4ef5795c35a189a94e95a8f909ed1f7ef799e0218b71d97b3a780a0\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\",\"keccak256\":\"0xc706395df88dc1d459f21e51c57ab8820af80d1e8c3c14933a651794d78a429f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x21d8a5dd396bee41e4a039d150af08b66b6d09eef416daf8e5edf13ef219084e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/base/Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// Commons\\n\\n// Interfaces\\nimport \\\"../interfaces/SettingsInterface.sol\\\";\\n\\n// Contracts\\nimport \\\"./upgradeable/DynamicUpgradeable.sol\\\";\\nimport \\\"./BaseStorage.sol\\\";\\n\\n/*****************************************************************************************************/\\n/**                                             WARNING                                             **/\\n/**                              THIS CONTRACT IS AN UPGRADEABLE FACET!                             **/\\n/**  ---------------------------------------------------------------------------------------------  **/\\n/**  Do NOT place ANY storage/state variables directly in this contract! If you wish to make        **/\\n/**  make changes to the state variables used by this contract, do so in its defined Storage        **/\\n/**  contract that this contract inherits from                                                      **/\\n/**                                                                                                 **/\\n/**  Visit https://docs.openzeppelin.com/upgrades/2.6/proxies#upgrading-via-the-proxy-pattern for   **/\\n/**  more information.                                                                              **/\\n/*****************************************************************************************************/\\n/**\\n    @notice This contract is used as a base contract for most most of the contracts in the platform.\\n    @notice It allows contracts to have access to the platform settings, and common modifiers.\\n\\n    @author develop@teller.finance.\\n */\\ncontract Base is DynamicUpgradeable, BaseStorage {\\n    using AddressLib for address;\\n    using Address for address;\\n\\n    /** Modifiers */\\n\\n    /**\\n          @notice Checks if sender has a pauser role\\n          @dev Throws an error if the sender has not a pauser role.\\n       */\\n    modifier onlyPauser() virtual {\\n        settings.requirePauserRole(msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        settings.requireAuthorization(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n    @notice Checks whether the platform is paused or not.\\n    @dev It throws a require error if platform is paused.\\n */\\n    modifier whenNotPaused() virtual {\\n        require(!_isPaused(), \\\"PLATFORM_IS_PAUSED\\\");\\n        _;\\n    }\\n\\n    /**\\n        @notice Checks whether a specific lending pool address is paused or not.\\n        @dev It throws a require error if the lending pool is paused.\\n        @param lendingPoolAddress lending pool address to check.\\n     */\\n    modifier whenLendingPoolNotPaused(address lendingPoolAddress) {\\n        require(!_isPoolPaused(lendingPoolAddress), \\\"LENDING_POOL_IS_PAUSED\\\");\\n        _;\\n    }\\n\\n    /* Constructor */\\n\\n    /** External Functions */\\n\\n    /** Internal functions */\\n\\n    /**\\n        @notice It initializes the current contract instance setting the required parameters.\\n        @param settingsAddress settings contract address.\\n     */\\n    function _initialize(address settingsAddress) internal {\\n        settingsAddress.requireNotEmpty(\\\"SETTINGS_MUST_BE_PROVIDED\\\");\\n\\n        settings = SettingsInterface(settingsAddress);\\n    }\\n\\n    /**\\n        @notice Checks if a specific lending pool address is paused or not.\\n        @param poolAddress lending pool address to check.\\n        @return true if the lending pool address is  paused. Otherwise it returns false.\\n     */\\n    function _isPoolPaused(address poolAddress) internal view returns (bool) {\\n        return settings.lendingPoolPaused(poolAddress);\\n    }\\n\\n    /**\\n        @notice Checks if the platform is paused or not.\\n        @return true if platform is paused. Otherwise it returns false.\\n     */\\n    function _isPaused() internal view returns (bool) {\\n        return settings.isPaused();\\n    }\\n\\n    /** Private functions */\\n}\\n\",\"keccak256\":\"0x257310f46943189a0f1a6c794195a5301a172141051ca6fee01c8f646ff25537\",\"license\":\"MIT\"},\"contracts/base/BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Interfaces\\nimport \\\"../interfaces/SettingsInterface.sol\\\";\\n\\n// Contracts\\nimport \\\"./upgradeable/DynamicUpgradeableStorage.sol\\\";\\n\\n/*****************************************************************************************************/\\n/**                                             WARNING                                             **/\\n/**                        THIS CONTRACT IS A NON UPGRADEABLE STORAGE CONTRACT!                     **/\\n/**  ---------------------------------------------------------------------------------------------  **/\\n/**  Do NOT change the order of, PREPEND, or APPEND any storage variables to this or new versions   **/\\n/**  of this contract as this will cause a ripple affect to the storage slots of all child          **/\\n/**  contracts that inherit from this contract to be overwritten on the deployed proxy contract!!   **/\\n/**                                                                                                 **/\\n/**  Visit https://docs.openzeppelin.com/upgrades/2.6/proxies#upgrading-via-the-proxy-pattern for   **/\\n/**  more information.                                                                              **/\\n/*****************************************************************************************************/\\n/**\\n * @notice This contract is used as the base storage contract for most of the contracts in the platform.\\n * @notice It allows contracts to have access to the platform settings instance.\\n *\\n * @author develop@teller.finance.\\n */\\nabstract contract BaseStorage {\\n    /**\\n     * @notice It holds the platform Settings instance.\\n     */\\n    SettingsInterface public settings;\\n\\n    /**\\n     * @dev This allocates additional storage slots in the event that additional state variables are added.\\n     */\\n    uint256[10] internal __gap;\\n}\\n\",\"keccak256\":\"0xdc080f1fee4a423b611d7da23495e03a9afb86b083350366bc4f6dbef8e155d0\",\"license\":\"MIT\"},\"contracts/base/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*****************************************************************************************************/\\n/**                                             WARNING                                             **/\\n/**                              THIS CONTRACT IS AN UPGRADEABLE FACET!                             **/\\n/**  ---------------------------------------------------------------------------------------------  **/\\n/**  Do NOT place ANY storage/state variables directly in this contract! If you wish to make        **/\\n/**  make changes to the state variables used by this contract, do so in its defined Storage        **/\\n/**  contract that this contract inherits from                                                      **/\\n/**                                                                                                 **/\\n/**  Visit https://docs.openzeppelin.com/upgrades/2.6/proxies#upgrading-via-the-proxy-pattern for   **/\\n/**  more information.                                                                              **/\\n/*****************************************************************************************************/\\n/**\\n    @notice This contract stores the logic to clone an already deployed contract with minimal amount of code.\\n    @notice By cloning a contract, we are able to create a new contract instance without having to spend all the deployment cost of the same code.\\n\\n    @author develop@teller.finance.\\n */\\ncontract Factory {\\n    function _clone(address target) internal returns (address result) {\\n        bytes20 targetBytes = bytes20(target);\\n\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(\\n                clone,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(\\n                add(clone, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n            result := create(0, clone, 0x37)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9f0a728b7a884ccb6894e93f68366fb030bdda1e752dc72c10c796f7c8786380\",\"license\":\"MIT\"},\"contracts/base/loans/LoanManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries and common\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../util/TellerCommon.sol\\\";\\nimport \\\"../../util/NumbersLib.sol\\\";\\n\\n// Contracts\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../Base.sol\\\";\\nimport \\\"./LoanStorage.sol\\\";\\nimport \\\"./../proxies/DynamicProxy.sol\\\";\\nimport \\\"../Factory.sol\\\";\\n\\n// Interfaces\\nimport \\\"../../interfaces/loans/ILoanManager.sol\\\";\\nimport \\\"../../interfaces/loans/ILoanStorage.sol\\\";\\nimport \\\"../../interfaces/loans/ILoanTermsConsensus.sol\\\";\\nimport \\\"../../interfaces/LendingPoolInterface.sol\\\";\\nimport \\\"../../interfaces/escrow/IEscrow.sol\\\";\\nimport \\\"../../interfaces/IInitializeableDynamicProxy.sol\\\";\\n\\n/*****************************************************************************************************/\\n/**                                             WARNING                                             **/\\n/**                              THIS CONTRACT IS AN UPGRADEABLE FACET!                             **/\\n/**  ---------------------------------------------------------------------------------------------  **/\\n/**  Do NOT place ANY storage/state variables directly in this contract! If you wish to make        **/\\n/**  make changes to the state variables used by this contract, do so in its defined Storage        **/\\n/**  contract that this contract inherits from                                                      **/\\n/**                                                                                                 **/\\n/**  Visit https://docs.openzeppelin.com/upgrades/2.6/proxies#upgrading-via-the-proxy-pattern for   **/\\n/**  more information.                                                                              **/\\n/*****************************************************************************************************/\\n/**\\n * @notice This contract is used as a basis for the creation of the different types of loans across the platform\\n * @notice It implements the Base contract from Teller and the ILoanManager\\n *\\n * @author develop@teller.finance\\n */\\ncontract LoanManager is\\n    ILoanManager,\\n    ILoanData,\\n    ILoanTermsConsensus,\\n    Factory,\\n    Base,\\n    LoanStorage\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n    using NumbersLib for uint256;\\n    using NumbersLib for int256;\\n    using AddressLib for address;\\n\\n    /* Modifiers */\\n\\n    /**\\n     * @notice Checks whether the loan is active or not\\n     * @dev Throws a require error if the loan is not active\\n     * @param loanID number of loan to check\\n     */\\n    modifier loanActive(uint256 loanID) {\\n        require(\\n            loans[loanID].status == TellerCommon.LoanStatus.Active,\\n            \\\"LOAN_NOT_ACTIVE\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks whether the loan is active and has been set or not\\n     * @dev Throws a require error if the loan is not active or has not been set\\n     * @param loanID number of loan to check\\n     */\\n    modifier loanActiveOrSet(uint256 loanID) {\\n        require(isActiveOrSet(loanID), \\\"LOAN_NOT_ACTIVE_OR_SET\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks the given loan request is valid.\\n     * @dev It throws an require error if the duration exceeds the maximum loan duration.\\n     * @dev It throws an require error if the loan amount exceeds the maximum loan amount for the given asset.\\n     * @param loanRequest to validate.\\n     */\\n    modifier withValidLoanRequest(TellerCommon.LoanRequest memory loanRequest) {\\n        uint256 maxLoanDuration = settings.getMaximumLoanDurationValue();\\n        require(\\n            maxLoanDuration >= loanRequest.duration,\\n            \\\"DURATION_EXCEEDS_MAX_DURATION\\\"\\n        );\\n\\n        bool exceedsMaxLoanAmount =\\n            assetSettings.exceedsMaxLoanAmount(\\n                lendingToken,\\n                loanRequest.amount\\n            );\\n        require(!exceedsMaxLoanAmount, \\\"AMOUNT_EXCEEDS_MAX_AMOUNT\\\");\\n\\n        require(\\n            _isDebtRatioValid(loanRequest.amount),\\n            \\\"SUPPLY_TO_DEBT_EXCEEDS_MAX\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n\\n    /* Public Functions */\\n\\n    /**\\n     * @notice See LoanData.getBorrowerLoans\\n     */\\n    function getBorrowerLoans(address borrower)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return borrowerLoans[borrower];\\n    }\\n\\n    /**\\n     * @notice See LoanData.isActiveOrSet\\n     */\\n    function isActiveOrSet(uint256 loanID) public view override returns (bool) {\\n        bytes memory data =\\n            _delegateView(\\n                loanData,\\n                abi.encodeWithSignature(\\\"isActiveOrSet(uint256)\\\", loanID)\\n            );\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /**\\n     * @notice See LoanData.getTotalOwed\\n     */\\n    function getTotalOwed(uint256 loanID)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        bytes memory data =\\n            _delegateView(\\n                loanData,\\n                abi.encodeWithSignature(\\\"getTotalOwed(uint256)\\\", loanID)\\n            );\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /**\\n     * @notice See LoanData.getLoanAmount\\n     */\\n    function getLoanAmount(uint256 loanID)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        bytes memory data =\\n            _delegateView(\\n                loanData,\\n                abi.encodeWithSignature(\\\"getLoanAmount(uint256)\\\", loanID)\\n            );\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /**\\n     * @notice See LoanData.isLoanSecured\\n     */\\n    function isLoanSecured(uint256 loanID) public view override returns (bool) {\\n        bytes memory data =\\n            _delegateView(\\n                loanData,\\n                abi.encodeWithSignature(\\\"isLoanSecured(uint256)\\\", loanID)\\n            );\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /**\\n     * @notice See LoanData.canGoToEOA\\n     */\\n    function canGoToEOA(uint256 loanID) public view override returns (bool) {\\n        bytes memory data =\\n            _delegateView(\\n                loanData,\\n                abi.encodeWithSignature(\\\"canGoToEOA(uint256)\\\", loanID)\\n            );\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /**\\n     * @notice See LoanData.getInterestOwedFor\\n     */\\n    function getInterestOwedFor(uint256 loanID, uint256 amountBorrow)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        bytes memory data =\\n            _delegateView(\\n                loanData,\\n                abi.encodeWithSignature(\\n                    \\\"getInterestOwedFor(uint256,uint256)\\\",\\n                    loanID,\\n                    amountBorrow\\n                )\\n            );\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /**\\n     * @notice See LoanData.getInterestRatio\\n     */\\n    function getInterestRatio(uint256 loanID)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        bytes memory data =\\n            _delegateView(\\n                loanData,\\n                abi.encodeWithSignature(\\\"getInterestRatio(uint256)\\\", loanID)\\n            );\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /**\\n     * @notice See LoanData.getCollateralInLendingTokens\\n     */\\n    function getCollateralInLendingTokens(uint256 loanID)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        bytes memory data =\\n            _delegateView(\\n                loanData,\\n                abi.encodeWithSignature(\\n                    \\\"getCollateralInLendingTokens(uint256)\\\",\\n                    loanID\\n                )\\n            );\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /**\\n     * @notice See LoanData.getCollateralNeededInfo\\n     */\\n    function getCollateralNeededInfo(uint256 loanID)\\n        public\\n        view\\n        override\\n        returns (\\n            int256,\\n            int256,\\n            uint256\\n        )\\n    {\\n        bytes memory data =\\n            _delegateView(\\n                loanData,\\n                abi.encodeWithSignature(\\n                    \\\"getCollateralNeededInfo(uint256)\\\",\\n                    loanID\\n                )\\n            );\\n        return abi.decode(data, (int256, int256, uint256));\\n    }\\n\\n    /**\\n     * @notice See LoanData.getCollateralNeededInTokens\\n     */\\n    function getCollateralNeededInTokens(uint256 loanID)\\n        public\\n        view\\n        override\\n        returns (int256, uint256)\\n    {\\n        bytes memory data =\\n            _delegateView(\\n                loanData,\\n                abi.encodeWithSignature(\\n                    \\\"getCollateralNeededInTokens(uint256)\\\",\\n                    loanID\\n                )\\n            );\\n        return abi.decode(data, (int256, uint256));\\n    }\\n\\n    /**\\n     * @notice See LoanData.isLiquidable\\n     */\\n    function isLiquidable(uint256 loanID) public view override returns (bool) {\\n        bytes memory data =\\n            _delegateView(\\n                loanData,\\n                abi.encodeWithSignature(\\\"isLiquidable(uint256)\\\", loanID)\\n            );\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /**\\n     * @notice See LoanData.getLiquidationReward\\n     */\\n    function getLiquidationReward(uint256 loanID)\\n        public\\n        view\\n        override\\n        returns (int256)\\n    {\\n        bytes memory data =\\n            _delegateView(\\n                loanData,\\n                abi.encodeWithSignature(\\\"getLiquidationReward(uint256)\\\", loanID)\\n            );\\n        return abi.decode(data, (int256));\\n    }\\n\\n    function processLoanTerms(\\n        TellerCommon.LoanRequest memory request,\\n        TellerCommon.LoanResponse[] memory responses\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        bytes memory data =\\n            _delegateView(\\n                loanTermsConsensus,\\n                abi.encodeWithSignature(\\n                    \\\"processLoanTerms((address,address,address,uint256,uint256,uint256,uint256),(address,address,uint256,uint256,uint256,uint256,(uint8,bytes32,bytes32))[])\\\",\\n                    request,\\n                    responses\\n                )\\n            );\\n        return abi.decode(data, (uint256, uint256, uint256));\\n    }\\n\\n    /* External Functions */\\n\\n    /**\\n     * @notice Creates a loan with the loan request and terms\\n     * @param request Struct of the protocol loan request\\n     * @param responses List of structs of the protocol loan responses\\n     * @param collateralAmount Amount of collateral required for the loan\\n     */\\n    function createLoanWithTerms(\\n        TellerCommon.LoanRequest calldata request,\\n        TellerCommon.LoanResponse[] calldata responses,\\n        uint256 collateralAmount\\n    )\\n        external\\n        payable\\n        override\\n        updateImpIfNeeded\\n        nonReentrant\\n        whenNotPaused\\n        withValidLoanRequest(request)\\n        onlyAuthorized\\n    {\\n        require(msg.sender == request.borrower, \\\"NOT_LOAN_REQUESTER\\\");\\n\\n        (uint256 interestRate, uint256 collateralRatio, uint256 maxLoanAmount) =\\n            processLoanTerms(request, responses);\\n\\n        uint256 loanID =\\n            _createNewLoan(\\n                request,\\n                interestRate,\\n                collateralRatio,\\n                maxLoanAmount\\n            );\\n\\n        if (collateralAmount > 0) {\\n            _payInCollateral(loanID, collateralAmount);\\n        }\\n\\n        if (request.recipient.isNotEmpty()) {\\n            require(canGoToEOA(loanID), \\\"UNDER_COLL_WITH_RECIPIENT\\\");\\n        }\\n\\n        borrowerLoans[request.borrower].push(loanID);\\n\\n        emit LoanTermsSet(\\n            loanID,\\n            msg.sender,\\n            loans[loanID].loanTerms.recipient,\\n            request.requestNonce\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral from a loan, unless this isn't allowed\\n     * @param amount The amount of collateral token or ether the caller is hoping to withdraw.\\n     * @param loanID The ID of the loan the collateral is for\\n     */\\n    function withdrawCollateral(uint256 amount, uint256 loanID)\\n        external\\n        override\\n        updateImpIfNeeded\\n        nonReentrant\\n        loanActiveOrSet(loanID)\\n        whenNotPaused\\n        whenLendingPoolNotPaused(address(lendingPool))\\n        onlyAuthorized\\n    {\\n        require(\\n            msg.sender == loans[loanID].loanTerms.borrower,\\n            \\\"CALLER_DOESNT_OWN_LOAN\\\"\\n        );\\n        require(amount > 0, \\\"CANNOT_WITHDRAW_ZERO\\\");\\n\\n        if (loans[loanID].status == TellerCommon.LoanStatus.Active) {\\n            (, int256 neededInCollateralTokens, ) =\\n                getCollateralNeededInfo(loanID);\\n            if (neededInCollateralTokens > 0) {\\n                // Withdrawal amount holds the amount of excess collateral in the loan\\n                uint256 withdrawalAmount =\\n                    loans[loanID].collateral.sub(\\n                        uint256(neededInCollateralTokens)\\n                    );\\n                require(\\n                    withdrawalAmount >= amount,\\n                    \\\"COLLATERAL_AMOUNT_TOO_HIGH\\\"\\n                );\\n            }\\n        } else {\\n            require(\\n                loans[loanID].collateral >= amount,\\n                \\\"COLLATERAL_AMOUNT_NOT_MATCH\\\"\\n            );\\n        }\\n\\n        _withdrawCollateral(loanID, amount, payable(msg.sender));\\n    }\\n\\n    /**\\n     * @notice Deposit collateral tokens into a loan.\\n     * @param borrower The address of the loan borrower.\\n     * @param loanID The ID of the loan the collateral is for\\n     * @param amount The amount to deposit as collateral.\\n     */\\n    function depositCollateral(\\n        address borrower,\\n        uint256 loanID,\\n        uint256 amount\\n    )\\n        external\\n        payable\\n        override\\n        updateImpIfNeeded\\n        loanActiveOrSet(loanID)\\n        whenNotPaused\\n        whenLendingPoolNotPaused(address(lendingPool))\\n        onlyAuthorized\\n    {\\n        borrower.requireEqualTo(\\n            loans[loanID].loanTerms.borrower,\\n            \\\"BORROWER_LOAN_ID_MISMATCH\\\"\\n        );\\n        require(amount > 0, \\\"CANNOT_DEPOSIT_ZERO\\\");\\n\\n        // Update the loan collateral and total. Transfer tokens to this contract.\\n        _payInCollateral(loanID, amount);\\n    }\\n\\n    /**\\n     * @notice Take out a loan\\n     *\\n     * @dev collateral ratio is a percentage of the loan amount that's required in collateral\\n     * @dev the percentage will be *(10**2). I.e. collateralRatio of 5244 means 52.44% collateral\\n     * @dev is required in the loan. Interest rate is also a percentage with 2 decimal points.\\n     */\\n    function takeOutLoan(uint256 loanID, uint256 amountBorrow)\\n        external\\n        override\\n        updateImpIfNeeded\\n        nonReentrant\\n        whenNotPaused\\n        whenLendingPoolNotPaused(address(lendingPool))\\n        onlyAuthorized\\n    {\\n        require(msg.sender == loans[loanID].loanTerms.borrower, \\\"NOT_BORROWER\\\");\\n        require(\\n            loans[loanID].status == TellerCommon.LoanStatus.TermsSet,\\n            \\\"LOAN_NOT_SET\\\"\\n        );\\n        require(\\n            loans[loanID].termsExpiry >= block.timestamp,\\n            \\\"LOAN_TERMS_EXPIRED\\\"\\n        );\\n        require(_isDebtRatioValid(amountBorrow), \\\"SUPPLY_TO_DEBT_EXCEEDS_MAX\\\");\\n        require(\\n            loans[loanID].loanTerms.maxLoanAmount >= amountBorrow,\\n            \\\"MAX_LOAN_EXCEEDED\\\"\\n        );\\n        // check that enough collateral has been provided for this loan\\n        (, int256 neededInCollateral, ) = getCollateralNeededInfo(loanID);\\n        require(\\n            neededInCollateral <= int256(loans[loanID].collateral),\\n            \\\"MORE_COLLATERAL_REQUIRED\\\"\\n        );\\n        require(\\n            loans[loanID].lastCollateralIn <=\\n                block.timestamp.sub(settings.getSafetyIntervalValue()),\\n            \\\"COLLATERAL_DEPOSITED_RECENTLY\\\"\\n        );\\n\\n        loans[loanID].borrowedAmount = amountBorrow;\\n        loans[loanID].principalOwed = amountBorrow;\\n        loans[loanID].interestOwed = getInterestOwedFor(loanID, amountBorrow);\\n        loans[loanID].status = TellerCommon.LoanStatus.Active;\\n        loans[loanID].loanStartTime = block.timestamp;\\n\\n        address loanRecipient;\\n        bool eoaAllowed = canGoToEOA(loanID);\\n        if (eoaAllowed) {\\n            loanRecipient = loans[loanID].loanTerms.recipient.isEmpty()\\n                ? loans[loanID].loanTerms.borrower\\n                : loans[loanID].loanTerms.recipient;\\n        } else {\\n            loans[loanID].escrow = _createEscrow(loanID);\\n            loanRecipient = loans[loanID].escrow;\\n        }\\n\\n        lendingPool.createLoan(amountBorrow, loanRecipient);\\n\\n        if (!eoaAllowed) {\\n            loans[loanID].escrow.requireNotEmpty(\\\"ESCROW_CONTRACT_NOT_DEFINED\\\");\\n            IEscrow(loans[loanID].escrow).initialize(\\n                address(settings),\\n                address(lendingPool),\\n                loanID,\\n                lendingToken,\\n                loans[loanID].loanTerms.borrower\\n            );\\n        }\\n\\n        emit LoanTakenOut(\\n            loanID,\\n            loans[loanID].loanTerms.borrower,\\n            loans[loanID].escrow,\\n            amountBorrow\\n        );\\n    }\\n\\n    /**\\n     * @notice Make a payment to a loan\\n     * @param amount The amount of tokens to pay back to the loan\\n     * @param loanID The ID of the loan the payment is for\\n     */\\n    function repay(uint256 amount, uint256 loanID)\\n        external\\n        override\\n        updateImpIfNeeded\\n        nonReentrant\\n        loanActive(loanID)\\n        whenNotPaused\\n        whenLendingPoolNotPaused(address(lendingPool))\\n        onlyAuthorized\\n    {\\n        require(amount > 0, \\\"AMOUNT_VALUE_REQUIRED\\\");\\n        // calculate the actual amount to repay\\n        uint256 totalOwed = getTotalOwed(loanID);\\n        if (totalOwed < amount) {\\n            amount = totalOwed;\\n        }\\n        // update the amount owed on the loan\\n        totalOwed = totalOwed.sub(amount);\\n\\n        // Deduct the interest and principal owed\\n        uint256 principalPaid;\\n        uint256 interestPaid;\\n        if (amount < loans[loanID].interestOwed) {\\n            interestPaid = amount;\\n            loans[loanID].interestOwed = loans[loanID].interestOwed.sub(amount);\\n        } else {\\n            if (loans[loanID].interestOwed > 0) {\\n                interestPaid = loans[loanID].interestOwed;\\n                amount = amount.sub(interestPaid);\\n                loans[loanID].interestOwed = 0;\\n            }\\n\\n            if (amount > 0) {\\n                principalPaid = amount;\\n                loans[loanID].principalOwed = loans[loanID].principalOwed.sub(\\n                    amount\\n                );\\n            }\\n        }\\n\\n        // collect the money from the payer\\n        lendingPool.repay(principalPaid, interestPaid, msg.sender);\\n\\n        // if the loan is now fully paid, close it and return collateral\\n        if (totalOwed == 0) {\\n            loans[loanID].status = TellerCommon.LoanStatus.Closed;\\n            _withdrawCollateral(\\n                loanID,\\n                loans[loanID].collateral,\\n                loans[loanID].loanTerms.borrower\\n            );\\n        }\\n\\n        emit LoanRepaid(\\n            loanID,\\n            loans[loanID].loanTerms.borrower,\\n            principalPaid.add(interestPaid),\\n            msg.sender,\\n            totalOwed\\n        );\\n    }\\n\\n    /**\\n     * @notice Liquidate a loan if it is expired or under collateralized\\n     * @param loanID The ID of the loan to be liquidated\\n     */\\n    function liquidateLoan(uint256 loanID)\\n        external\\n        override\\n        updateImpIfNeeded\\n        nonReentrant\\n        loanActive(loanID)\\n        whenNotPaused\\n        whenLendingPoolNotPaused(address(lendingPool))\\n    {\\n        require(isLiquidable(loanID), \\\"DOESNT_NEED_LIQUIDATION\\\");\\n\\n        int256 rewardInCollateral = getLiquidationReward(loanID);\\n\\n        // the liquidator pays the amount still owed on the loan\\n        uint256 amountToLiquidate =\\n            loans[loanID].principalOwed.add(loans[loanID].interestOwed);\\n        lendingPool.repay(\\n            loans[loanID].principalOwed,\\n            loans[loanID].interestOwed,\\n            msg.sender\\n        );\\n\\n        loans[loanID].status = TellerCommon.LoanStatus.Closed;\\n        loans[loanID].liquidated = true;\\n\\n        // the caller gets the collateral from the loan\\n        _payOutLiquidator(loanID, rewardInCollateral, payable(msg.sender));\\n\\n        emit LoanLiquidated(\\n            loanID,\\n            loans[loanID].loanTerms.borrower,\\n            msg.sender,\\n            rewardInCollateral,\\n            amountToLiquidate\\n        );\\n    }\\n\\n    /**\\n        @notice It adds a new account as a signer.\\n        @param account address to add.\\n        @dev The sender must be the owner.\\n        @dev It throws a require error if the sender is not the owner.\\n     */\\n    function addSigner(address account) external override updateImpIfNeeded onlyPauser {\\n        _delegateTo(\\n            loanTermsConsensus,\\n            abi.encodeWithSignature(\\\"addSigner(address)\\\", account)\\n        );\\n    }\\n\\n    /**\\n        @notice It adds a list of account as signers.\\n        @param accounts addresses to add.\\n        @dev The sender must be the owner.\\n        @dev It throws a require error if the sender is not the owner.\\n     */\\n    function addSigners(address[] calldata accounts)\\n        external\\n        override\\n        updateImpIfNeeded\\n        onlyPauser\\n    {\\n        _delegateTo(\\n            loanTermsConsensus,\\n            abi.encodeWithSignature(\\\"addSigners(address[])\\\", accounts)\\n        );\\n    }\\n\\n    /**\\n     *  @notice It calls the LogicVersionRegistry to update the stored logic address for LoanData.\\n     */\\n    function updateLoanDataLogic() public override {\\n        (, , loanData) = logicRegistry.getLogicVersion(LOAN_DATA_LOGIC_NAME);\\n    }\\n\\n    /**\\n     *  @notice It calls the LogicVersionRegistry to update the stored logic address for LoanTermsConsensus.\\n     */\\n    function updateLoanTermsConsensusLogic() public override {\\n        (, , loanTermsConsensus) = logicRegistry.getLogicVersion(\\n            LOAN_TERMS_CONSENSUS_LOGIC_NAME\\n        );\\n    }\\n\\n    /**\\n     * @notice Initializes the current contract instance setting the required parameters.\\n     * @param lendingPoolAddress Address of the LendingPool.\\n     * @param settingsAddress Address for the platform Settings contract.\\n     * @param collateralTokenAddress Address of the collateral token for loans in this contract.\\n     * @param initDynamicProxyLogicAddress Address of a deployed InitializeableDynamicProxy contract.\\n     */\\n    function initialize(\\n        address lendingPoolAddress,\\n        address settingsAddress,\\n        address collateralTokenAddress,\\n        address initDynamicProxyLogicAddress\\n    ) external override {\\n        lendingPoolAddress.requireNotEmpty(\\\"PROVIDE_LENDING_POOL_ADDRESS\\\");\\n\\n        _initialize(settingsAddress);\\n\\n        lendingPool = LendingPoolInterface(lendingPoolAddress);\\n        lendingToken = address(lendingPool.lendingToken());\\n        cToken = CErc20Interface(lendingPool.cToken());\\n        initDynamicProxyLogic = initDynamicProxyLogicAddress;\\n        assetSettings = settings.assetSettings();\\n\\n        collateralToken = collateralTokenAddress;\\n\\n        updateLoanDataLogic();\\n        updateLoanTermsConsensusLogic();\\n\\n        _notEntered = true;\\n    }\\n\\n    /** Internal Functions */\\n\\n    function _delegateTo(address imp, bytes memory sigWithData)\\n        internal\\n        returns (bytes memory returnData)\\n    {\\n        bool success;\\n        (success, returnData) = imp.delegatecall(sigWithData);\\n        assembly {\\n            if eq(success, 0) {\\n                revert(add(returnData, 0x20), returndatasize())\\n            }\\n        }\\n    }\\n\\n    function delegateTo(address imp, bytes memory sigWithData)\\n        public\\n        returns (bytes memory returnData)\\n    {\\n        require(msg.sender == address(this), \\\"INVALID_CALLER\\\");\\n        return _delegateTo(imp, sigWithData);\\n    }\\n\\n    function _delegateView(address target, bytes memory sigWithData)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory returnData) =\\n            address(this).staticcall(\\n                abi.encodeWithSignature(\\n                    \\\"delegateTo(address,bytes)\\\",\\n                    target,\\n                    sigWithData\\n                )\\n            );\\n        assembly {\\n            if eq(success, 0) {\\n                revert(add(returnData, 0x20), returndatasize())\\n            }\\n        }\\n        return abi.decode(returnData, (bytes));\\n    }\\n\\n    /**\\n     * @notice Checks if the loan has an Escrow and claims any tokens then pays out the loan collateral.\\n     * @dev See Escrow.claimTokens for more info.\\n     * @param loanID The ID of the loan which is being liquidated\\n     * @param rewardInCollateral The total amount of reward based in the collateral token to pay the liquidator\\n     * @param recipient The address of the liquidator where the liquidation reward will be sent to\\n     */\\n    function _payOutLiquidator(\\n        uint256 loanID,\\n        int256 rewardInCollateral,\\n        address payable recipient\\n    ) internal {\\n        if (rewardInCollateral <= 0) {\\n            return;\\n        }\\n        uint256 reward = uint256(rewardInCollateral);\\n        if (reward < loans[loanID].collateral) {\\n            _payOutCollateral(loanID, reward, recipient);\\n        } else if (reward >= loans[loanID].collateral) {\\n            uint256 remainingCollateralAmount =\\n                reward.sub(loans[loanID].collateral);\\n            _payOutCollateral(loanID, loans[loanID].collateral, recipient);\\n            if (\\n                remainingCollateralAmount > 0 &&\\n                loans[loanID].escrow != address(0x0)\\n            ) {\\n                IEscrow(loans[loanID].escrow).claimTokensByCollateralValue(\\n                    recipient,\\n                    remainingCollateralAmount\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws the collateral from a loan to an address.\\n     * @param loanID ID of loan from which collateral is to be paid out.\\n     * @param amount Amount of collateral paid out.\\n     * @param recipient Address of the recipient of the collateral.\\n     */\\n    function _withdrawCollateral(\\n        uint256 loanID,\\n        uint256 amount,\\n        address payable recipient\\n    ) internal {\\n        // Update the contract total and the loan collateral total\\n        _payOutCollateral(loanID, amount, recipient);\\n\\n        emit CollateralWithdrawn(\\n            loanID,\\n            loans[loanID].loanTerms.borrower,\\n            recipient,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Pays out an amount of collateral for a loan.\\n     * @param loanID ID of loan from which collateral is to be paid out.\\n     * @param amount Amount of collateral paid out.\\n     * @param recipient Address of the recipient of the collateral.\\n     */\\n    function _payOutCollateral(\\n        uint256 loanID,\\n        uint256 amount,\\n        address payable recipient\\n    ) internal {\\n        totalCollateral = totalCollateral.sub(amount);\\n        loans[loanID].collateral = loans[loanID].collateral.sub(amount);\\n        recipient.transfer(amount);\\n    }\\n\\n    /**\\n     * @notice Pays collateral in for the associated loan\\n     * @param loanID The ID of the loan the collateral is for\\n     * @param amount The amount of collateral to be paid\\n     */\\n    function _payInCollateral(uint256 loanID, uint256 amount) internal {\\n        require(msg.value == amount, \\\"INCORRECT_ETH_AMOUNT\\\");\\n\\n        totalCollateral = totalCollateral.add(amount);\\n        loans[loanID].collateral = loans[loanID].collateral.add(amount);\\n        loans[loanID].lastCollateralIn = block.timestamp;\\n        emit CollateralDeposited(loanID, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice It validates whether supply to debt (StD) ratio is valid including the loan amount.\\n     * @param newLoanAmount the new loan amount to consider o the StD ratio.\\n     * @return true if the ratio is valid. Otherwise it returns false.\\n     */\\n    function _isDebtRatioValid(uint256 newLoanAmount)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            lendingPool.getDebtRatioFor(newLoanAmount) <=\\n            assetSettings.getMaxDebtRatio(lendingToken);\\n    }\\n\\n    /**\\n     * @notice Creates a loan with the loan request.\\n     * @param request Loan request as per the struct of the Teller platform.\\n     * @param interestRate Interest rate set in the loan terms.\\n     * @param collateralRatio Collateral ratio set in the loan terms.\\n     * @param maxLoanAmount Maximum loan amount that can be taken out, set in the loan terms.\\n     */\\n    function _createNewLoan(\\n        TellerCommon.LoanRequest memory request,\\n        uint256 interestRate,\\n        uint256 collateralRatio,\\n        uint256 maxLoanAmount\\n    ) internal returns (uint256) {\\n        // Get and increment new loan ID\\n        uint256 loanID = loanIDCounter;\\n        loanIDCounter = loanIDCounter.add(1);\\n\\n        require(\\n            loans[loanID].status == TellerCommon.LoanStatus.NonExistent,\\n            \\\"LOAN_ALREADY_EXISTS\\\"\\n        );\\n        require(request.borrower != address(0), \\\"BORROWER_EMPTY\\\");\\n\\n        loans[loanID].id = loanID;\\n        loans[loanID].status = TellerCommon.LoanStatus.TermsSet;\\n        loans[loanID].loanTerms = TellerCommon.LoanTerms({\\n            borrower: request.borrower,\\n            recipient: request.recipient,\\n            interestRate: interestRate,\\n            collateralRatio: collateralRatio,\\n            maxLoanAmount: maxLoanAmount,\\n            duration: request.duration\\n        });\\n\\n        uint256 termsExpiryTime = settings.getTermsExpiryTimeValue();\\n        loans[loanID].termsExpiry = block.timestamp.add(termsExpiryTime);\\n\\n        return loanID;\\n    }\\n\\n    /**\\n     * @notice It creates an Escrow contract instance for a given loan id.\\n     * @param loanID loan id associated to the Escrow contract.\\n     * @return escrow the new Escrow contract address.\\n     */\\n    function _createEscrow(uint256 loanID) internal returns (address escrow) {\\n        require(\\n            loans[loanID].escrow == address(0x0),\\n            \\\"LOAN_ESCROW_ALREADY_EXISTS\\\"\\n        );\\n\\n        escrow = _clone(initDynamicProxyLogic);\\n        IInitializeableDynamicProxy(escrow).initialize(\\n            address(logicRegistry),\\n            keccak256(\\\"Escrow\\\"),\\n            true\\n        );\\n        // The escrow must be added as an authorized address since it will be interacting with the protocol\\n        // TODO: Remove after non-guarded launch\\n        settings.addEscrowAuthorized(escrow);\\n    }\\n}\\n\",\"keccak256\":\"0x9dfe6d0ebd6f0aa2643445654d2b3df898d241e359afe46d22759c25a9d2d505\",\"license\":\"MIT\"},\"contracts/base/loans/LoanStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport \\\"../../util/TellerCommon.sol\\\";\\nimport \\\"../../util/AddressArrayLib.sol\\\";\\n\\n// Interfaces\\nimport \\\"../../interfaces/loans/ILoanStorage.sol\\\";\\nimport \\\"../../interfaces/loans/ILoanTermsConsensus.sol\\\";\\nimport \\\"../../interfaces/LendingPoolInterface.sol\\\";\\nimport \\\"../../interfaces/AssetSettingsInterface.sol\\\";\\n\\n// Contracts\\n\\n/*****************************************************************************************************/\\n/**                                             WARNING                                             **/\\n/**                        THIS CONTRACT IS AN UPGRADEABLE STORAGE CONTRACT!                        **/\\n/**  ---------------------------------------------------------------------------------------------  **/\\n/**  Do NOT change the order of, PREPEND, or APPEND any storage variables to this or new versions   **/\\n/**  of this contract as this will cause a ripple affect to the storage slots of all child          **/\\n/**  contracts that inherit from this contract to be overwritten on the deployed proxy contract!!   **/\\n/**                                                                                                 **/\\n/**  Visit https://docs.openzeppelin.com/upgrades/2.6/proxies#upgrading-via-the-proxy-pattern for   **/\\n/**  more information.                                                                              **/\\n/*****************************************************************************************************/\\n/**\\n * @notice This contract is used to storage the state variables for all of the LoanManager and LoanData contracts.\\n *\\n * @author develop@teller.finance.\\n */\\nabstract contract LoanStorage is ILoanStorage, ALoanStorage {\\n    /* State Variables */\\n\\n    // Loan length will be inputted in seconds.\\n    uint256 internal constant SECONDS_PER_YEAR = 31536000;\\n\\n    /**\\n     * @notice Holds the total amount of collateral held by the contract.\\n     */\\n    uint256 public override totalCollateral;\\n\\n    /**\\n     * @notice Holds the instance of the LendingPool used by the LoanManager.\\n     */\\n    LendingPoolInterface public override lendingPool;\\n\\n    /**\\n     * @notice Holds the lending token used for creating loans by the LoanManager and LendingPool.\\n     */\\n    address public override lendingToken;\\n\\n    /**\\n     * @notice Holds the collateral token.\\n     */\\n    address public override collateralToken;\\n\\n    /**\\n     * @notice Holds the Compound cToken where the underlying token matches the lending token.\\n     */\\n    CErc20Interface public override cToken;\\n\\n    /**\\n     * @dev Holds a list of all loans for a borrower address.\\n     */\\n    mapping(address => uint256[]) internal borrowerLoans;\\n\\n    /**\\n     * @notice Holds the ID of loans taken out\\n     * @dev Also the next available loan ID\\n     */\\n    uint256 public override loanIDCounter;\\n\\n    /**\\n     * @dev Holds the list of authorizer signers for loans.\\n     */\\n    AddressArrayLib.AddressArray internal signers;\\n\\n    /**\\n     * @dev It holds the address of a deployed InitializeableDynamicProxy contract.\\n     * @dev It is used to deploy a new proxy contract with minimal gas cost using the logic in the Factory contract.\\n     */\\n    address internal initDynamicProxyLogic;\\n\\n    /**\\n     * @dev Holds the address of the LoanData implementation.\\n     */\\n    address internal loanData;\\n\\n    /**\\n     * @dev Holds the address of the LoanTermsConsensus implementation.\\n     */\\n    address internal loanTermsConsensus;\\n\\n    /**\\n     * @notice Holds the logic name used for the LoanData contract.\\n     * @dev Is used to check the LogicVersionsRegistry for a new LoanData implementation.\\n     */\\n    bytes32 public constant LOAN_DATA_LOGIC_NAME = keccak256(\\\"LoanData\\\");\\n\\n    /**\\n     * @notice Holds the logic name used for the LoanTermsConsensus contract.\\n     * @dev Is used to check the LogicVersionsRegistry for a new LoanTermsConsensus implementation.\\n     */\\n    bytes32 public constant LOAN_TERMS_CONSENSUS_LOGIC_NAME =\\n        keccak256(\\\"LoanTermsConsensus\\\");\\n\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice It holds the platform AssetSettings instance.\\n     */\\n    AssetSettingsInterface public assetSettings;\\n}\\n\",\"keccak256\":\"0x20c09db84d5760689d8aa849ed056e34c93f0680e15ba859976584c9f7553807\",\"license\":\"MIT\"},\"contracts/base/proxies/BaseDynamicProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"./BaseProxy.sol\\\";\\nimport \\\"../upgradeable/DynamicUpgradeable.sol\\\";\\n\\n/**\\n    @notice It is a dynamic proxy contract for any contract. It uses the logic versions registry to get a logic contract address.\\n    @notice It extends BaseUpgradeable to get access to the settings.\\n\\n    @author develop@teller.finance\\n */\\nabstract contract BaseDynamicProxy is BaseProxy, DynamicUpgradeable {\\n    function _implementation()\\n        internal\\n        view\\n        virtual\\n        override(DynamicUpgradeable, Proxy)\\n        returns (address)\\n    {\\n        return DynamicUpgradeable._implementation();\\n    }\\n\\n    /**\\n     * @notice It is called by the OZ proxy contract before calling the internal _implementation() function.\\n     */\\n    function _beforeFallback() internal override {\\n        if (strictDynamic && _implementationBlockUpdated + 50 <= block.number) {\\n            address(this).delegatecall(\\n                abi.encodeWithSignature(\\\"_updateImplementationStored()\\\")\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2df52440edf97dd9fb3e60220e6fa64446ba3b07cfa1b822bb5f42f69a538965\",\"license\":\"MIT\"},\"contracts/base/proxies/BaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Interfaces\\nimport \\\"../../interfaces/IBaseProxy.sol\\\";\\n\\n// Contracts\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n    @notice It is the base Proxy contract for all other Proxy contracts.\\n    @dev It makes the current logic implementation address publicly available.\\n\\n    @author develop@teller.finance\\n */\\nabstract contract BaseProxy is IBaseProxy, Proxy {\\n    /**\\n        @notice Returns the current implementation.\\n        @return Address of the current implementation\\n     */\\n    function implementation() external view override returns (address) {\\n        return _implementation();\\n    }\\n}\\n\",\"keccak256\":\"0xffd928e3bea6e29964581b553e5566049086e9faed792cc264197ca7644fac5c\",\"license\":\"MIT\"},\"contracts/base/proxies/DynamicProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"./BaseDynamicProxy.sol\\\";\\n\\n/**\\n    @notice It is a dynamic proxy contract for any contract. It uses the logic versions registry to get a logic contract address.\\n    @notice It extends BaseUpgradeable to get access to the settings.\\n\\n    @author develop@teller.finance\\n */\\ncontract DynamicProxy is BaseDynamicProxy {\\n    /**\\n        @notice It creates a new dynamic proxy given a logic registry contract and a logic name.\\n        @param logicRegistryAddress the settings contract address.\\n        @param aLogicName the settings contract address.\\n        @param isStrictDynamic Boolean indicating if the proxy must check the registry for a new implementation.\\n     */\\n    constructor(\\n        address logicRegistryAddress,\\n        bytes32 aLogicName,\\n        bool isStrictDynamic\\n    ) {\\n        logicRegistry = LogicVersionsRegistryInterface(logicRegistryAddress);\\n        logicName = aLogicName;\\n        strictDynamic = isStrictDynamic;\\n        _updateImplementationStored();\\n    }\\n}\\n\",\"keccak256\":\"0xb2f133f644ed91e9b8487381f941d4a92eb79de6971c651261f7956f723c7f1c\",\"license\":\"MIT\"},\"contracts/base/upgradeable/DynamicUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"./DynamicUpgradeableStorage.sol\\\";\\n\\n/*****************************************************************************************************/\\n/**                                             WARNING                                             **/\\n/**                              THIS CONTRACT IS AN UPGRADEABLE FACET!                             **/\\n/**  ---------------------------------------------------------------------------------------------  **/\\n/**  Do NOT place ANY storage/state variables directly in this contract! If you wish to make        **/\\n/**  make changes to the state variables used by this contract, do so in its defined Storage        **/\\n/**  contract that this contract inherits from                                                      **/\\n/**                                                                                                 **/\\n/**  Visit https://docs.openzeppelin.com/upgrades/2.6/proxies#upgrading-via-the-proxy-pattern for   **/\\n/**  more information.                                                                              **/\\n/*****************************************************************************************************/\\n/**\\n * @notice This contract is used define the DynamicUpgradeable contracts logic.\\n *\\n * @author develop@teller.finance\\n */\\ncontract DynamicUpgradeable is DynamicUpgradeableStorage {\\n    /* Modifiers */\\n\\n    /**\\n     * @notice It checks if the proxy's implementation cache is invalidated and should be updated.\\n     * @dev Any external, non-view function should use this modifier.\\n     * @dev This modifier should be the very FIRST modifier for functions.\\n     */\\n    modifier updateImpIfNeeded() {\\n        if (_cacheInvalidated()) {\\n            _updateImplementationStored();\\n        }\\n        _;\\n    }\\n\\n    /* External Functions */\\n\\n    /**\\n     * @notice It updates a proxy's cached implementation address.\\n     * @notice It must only be called by the LogicVersionsRegistry for non strict DynamicProxy\\n     */\\n    function upgradeProxyTo(address newImplementation) public {\\n        require(msg.sender == address(logicRegistry), \\\"MUST_BE_LOGIC_REGISTRY\\\");\\n        implementationStored = newImplementation;\\n        _implementationBlockUpdated = block.number;\\n    }\\n\\n    /* Internal Functions **/\\n\\n    /**\\n     * @notice Returns the current implementation used by the proxy to delegate a call to.\\n     * @return address of the current implementation\\n     */\\n    function _implementation() internal view virtual returns (address) {\\n        if (_cacheInvalidated()) {\\n            (, , address currentLogic) =\\n                logicRegistry.getLogicVersion(logicName);\\n            return currentLogic;\\n        }\\n        return implementationStored;\\n    }\\n\\n    /**\\n     * @notice Updates the current implementation logic address for the stored logic name.\\n     * @dev It uses the LogicVersionsRegistry contract to get the logic address or the cached address if valid.\\n     * @dev It caches the current logic address for the proxy to reduce gas on subsequent calls within the same block.\\n     */\\n    function _updateImplementationStored() public {\\n        (, , address currentLogic) = logicRegistry.getLogicVersion(logicName);\\n\\n        if (implementationStored != currentLogic) {\\n            implementationStored = currentLogic;\\n        }\\n        _implementationBlockUpdated = block.number;\\n    }\\n\\n    /**\\n     * @notice It checks if the current cached address implementation is marked as invalidated.\\n     * @notice It is marked invalidated if the proxy is strict dynamic and last update was >= 50 blocks ago.\\n     * @return bool True if the cached implementation address is invalid.\\n     */\\n    function _cacheInvalidated() internal view returns (bool) {\\n        return strictDynamic && _implementationBlockUpdated + 1 <= block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x1f81daf5440455fdbf9b4396f9bbf30107cd4aa20bdff11ac1d4ed9c01ff4dee\",\"license\":\"MIT\"},\"contracts/base/upgradeable/DynamicUpgradeableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Interfaces\\nimport \\\"../../interfaces/LogicVersionsRegistryInterface.sol\\\";\\n\\n/*****************************************************************************************************/\\n/**                                             WARNING                                             **/\\n/**                        THIS CONTRACT IS A NON UPGRADEABLE STORAGE CONTRACT!                     **/\\n/**  ---------------------------------------------------------------------------------------------  **/\\n/**  Do NOT change the order of, PREPEND, or APPEND any storage variables to this or new versions   **/\\n/**  of this contract as this will cause a ripple affect to the storage slots of all child          **/\\n/**  contracts that inherit from this contract to be overwritten on the deployed proxy contract!!   **/\\n/**                                                                                                 **/\\n/**  Visit https://docs.openzeppelin.com/upgrades/2.6/proxies#upgrading-via-the-proxy-pattern for   **/\\n/**  more information.                                                                              **/\\n/*****************************************************************************************************/\\n/**\\n    @notice This contract is used define the storage variables for all DynamicUpgradeable contracts.\\n\\n    @author develop@teller.finance\\n */\\nabstract contract DynamicUpgradeableStorage {\\n    /**\\n     * @notice It returns the logic registry that is used to determine the implementation logic for this proxy.\\n     * @dev See LogicVersionsRegistry contract.\\n     * @return LogicVersionsRegistryInterface\\n     */\\n    LogicVersionsRegistryInterface public logicRegistry;\\n\\n    /**\\n     * @notice It represent the logic name (key) used for this proxy.\\n     * @dev It is used by LogicVersionsRegistry to get the logic address for the given logic name.\\n     * @dev It must NOT change over time.\\n     * @return bytes32 the logic name.\\n     */\\n    bytes32 public logicName;\\n\\n    /**\\n     * @notice Boolean indicating if the proxy must check the registry for a new implementation.\\n     */\\n    bool public strictDynamic;\\n\\n    /**\\n     * @notice It stores the last known logic address locally to reduce gas costs.\\n     */\\n    address public implementationStored;\\n\\n    /**\\n     * @dev It is the block number which the last time the proxy implementation was checked.\\n     */\\n    uint256 internal _implementationBlockUpdated;\\n}\\n\",\"keccak256\":\"0x9ec01157f5e16d63bff28a18fb5da1d103c307320ac3057eea7a9e7b68e5318c\",\"license\":\"MIT\"},\"contracts/interfaces/AssetSettingsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../util/CacheLib.sol\\\";\\n\\n/**\\n    @notice This interface defines all function to manage the asset settings on the platform.\\n\\n    @author develop@teller.finance\\n */\\ninterface AssetSettingsInterface {\\n    /**\\n        @notice This event is emitted when a new asset settings is created.\\n        @param sender the transaction sender address.\\n        @param assetAddress the asset address used to create the settings.\\n        @param cTokenAddress cToken address to configure for the asset.\\n        @param maxLoanAmount max loan amount to configure for the asset.\\n     */\\n    event AssetSettingsCreated(\\n        address indexed sender,\\n        address indexed assetAddress,\\n        address cTokenAddress,\\n        uint256 maxLoanAmount\\n    );\\n\\n    /**\\n        @notice This event is emitted when an asset settings is removed.\\n        @param sender the transaction sender address.\\n        @param assetAddress the asset address used to remove the settings.\\n     */\\n    event AssetSettingsRemoved(\\n        address indexed sender,\\n        address indexed assetAddress\\n    );\\n\\n    /**\\n        @notice This event is emitted when an asset settings (address type) is updated.\\n        @param assetSettingName asset setting name updated.\\n        @param sender the transaction sender address.\\n        @param assetAddress the asset address used to update the asset settings.\\n        @param oldValue old value used for the asset setting.\\n        @param newValue the value updated.\\n     */\\n    event AssetSettingsAddressUpdated(\\n        bytes32 indexed assetSettingName,\\n        address indexed sender,\\n        address indexed assetAddress,\\n        address oldValue,\\n        address newValue\\n    );\\n\\n    /**\\n        @notice This event is emitted when an asset settings (uint256 type) is updated.\\n        @param assetSettingName asset setting name updated.\\n        @param sender the transaction sender address.\\n        @param assetAddress the asset address used to update the asset settings.\\n        @param oldValue old value used for the asset setting.\\n        @param newValue the value updated.\\n     */\\n    event AssetSettingsUintUpdated(\\n        bytes32 indexed assetSettingName,\\n        address indexed sender,\\n        address indexed assetAddress,\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    /**\\n        @notice It creates an asset with the given parameters.\\n        @param assetAddress asset address used to create the new setting.\\n        @param cTokenAddress cToken address used to configure the asset setting.\\n        @param maxLoanAmount the initial max loan amount.\\n        @param maxTVLAmount the initial max total value locked amount.\\n        @param maxDebtRatio the initial max debt ratio amount.\\n    */\\n    function createAssetSetting(\\n        address assetAddress,\\n        address cTokenAddress,\\n        uint256 maxLoanAmount,\\n        uint256 maxTVLAmount,\\n        uint256 maxDebtRatio\\n    ) external;\\n\\n    /**\\n     * @notice It checks if the settings have been initialized for an asset address.\\n     */\\n    function isInitialized(address assetAddress) external view returns (bool);\\n\\n    /**\\n        @notice It updates the cToken address associted with an asset.\\n        @param assetAddress asset address to configure.\\n        @param cTokenAddress the new cToken address to configure.\\n     */\\n    function updateCTokenAddress(address assetAddress, address cTokenAddress)\\n        external;\\n\\n    /**\\n        @notice It returns the cToken address associted with an asset.\\n        @param assetAddress asset address to get the associated cToken for.\\n        @return The associated cToken address\\n     */\\n    function getCTokenAddress(address assetAddress)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n        @notice It updates the yearn vault address associted with an asset.\\n        @param assetAddress asset address to configure.\\n        @param yVaultAddress the new yVault address to configure.\\n     */\\n    function updateYVaultAddressSetting(\\n        address assetAddress,\\n        address yVaultAddress\\n    ) external;\\n\\n    /**\\n        @notice It returns the yearn vault address associted with an asset.\\n        @param assetAddress asset address to get the associated yearn vault address for.\\n        @return The address of the yearn vault.\\n     */\\n    function getYVaultAddress(address assetAddress)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     @notice It updates the aToken address associated with an asset.\\n     @param assetAddress asset address to configure.\\n     @param aTokenAddress the new aToken address to configure.\\n     */\\n    function updateATokenAddress(address assetAddress, address aTokenAddress)\\n        external;\\n\\n    /**\\n      @notice It returns the aToken address associated with an asset.\\n      @param assetAddress asset address to get the associated aToken for.\\n      @return The associated aToken address\\n      */\\n    function getATokenAddress(address assetAddress)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n      @notice It updates the pool together prize pool address associated with an asset.\\n      @param assetAddress asset address to configure.\\n      @param prizePoolAddress the new aToken address to configure.\\n      */\\n    function updatePrizePoolAddress(\\n        address assetAddress,\\n        address prizePoolAddress\\n    ) external;\\n\\n    /**\\n      @notice It returns the pool together prize pool address associated with an asset.\\n      @param assetAddress asset address to get the associated aToken for.\\n      @return The associated prize pool address\\n      */\\n    function getPrizePoolAddress(address assetAddress)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n        @notice It updates the max loan amount for a given asset.\\n        @param assetAddress asset address used to update the max loan amount.\\n        @param newMaxLoanAmount the new max loan amount to set.\\n     */\\n    function updateMaxLoanAmount(address assetAddress, uint256 newMaxLoanAmount)\\n        external;\\n\\n    /**\\n        @notice Returns the max loan amount for a given asset.\\n        @param assetAddress asset address to retrieve the max loan amount.\\n     */\\n    function getMaxLoanAmount(address assetAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n        @notice Tests whether a given amount is greater than the current max loan amount.\\n        @param assetAddress asset address used to return the max loan amount setting.\\n        @param amount the loan amount to check.\\n        @return true if the given amount is greater than the current max loan amount. Otherwise it returns false.\\n     */\\n    function exceedsMaxLoanAmount(address assetAddress, uint256 amount)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n        @notice It updates the max total vaule locked amount for a given asset.\\n        @param assetAddress asset address used to update the max loan amount.\\n        @param newMaxTVLAmount the new max total vault locked amount to set.\\n     */\\n    function updateMaxTVL(address assetAddress, uint256 newMaxTVLAmount)\\n        external;\\n\\n    /**\\n        @notice Returns the max total value locked amount for a given asset.\\n        @param assetAddress asset address to retrieve the max total value locked amount.\\n     */\\n    function getMaxTVLAmount(address assetAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n    @notice It updates the max debt ratio for a given asset.\\n    @dev The ratio value has 2 decimal places. I.e 100 = 1%\\n    @param assetAddress asset address used to update the max debt ratio.\\n    @param newMaxDebtRatio the new max debt ratio to set.\\n    */\\n    function updateMaxDebtRatio(address assetAddress, uint256 newMaxDebtRatio)\\n        external;\\n\\n    /**\\n    @notice Returns the max debt ratio for a given asset.\\n    @dev The ratio value has 2 decimal places. I.e 100 = 1%\\n    @param assetAddress asset address to retrieve the max debt ratio.\\n    */\\n    function getMaxDebtRatio(address assetAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n        @notice It removes a configuration for a given asset on the platform.\\n        @param assetAddress asset address to remove.\\n     */\\n    function removeAsset(address assetAddress) external;\\n\\n    function initialize() external;\\n}\\n\",\"keccak256\":\"0x807abaf38b7879808579fbe8641b205f382a6be18a8cd125b4f439182caf5ed8\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBaseProxy {\\n    /**\\n        @notice Returns the current implementation.\\n        @return Address of the current implementation\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x53f172ad960a20215939523ffaf5aaebe27150373d4fd77de296212f7299ec95\",\"license\":\"MIT\"},\"contracts/interfaces/IDappRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../util/TellerCommon.sol\\\";\\n\\n/**\\n    @notice This interface defines the functions to manage the Escrow contracts associated to borrowers and loans.\\n\\n    @author develop@teller.finance\\n */\\ninterface IDappRegistry {\\n    /**\\n        @notice It gets a dapp configuration based on its contract address.\\n        @param dapp dapp address.\\n        @return the dapp details.\\n     */\\n    function dapps(address dapp)\\n        external\\n        view\\n        returns (TellerCommon.Dapp memory);\\n\\n    /**\\n        @notice It adds a new dapp to the factory.\\n        @param dapp address to add in this factory.\\n        @param unsecured boolean to describe if the dapp is allowed to be used with unsecured loans.\\n     */\\n    function addDapp(address dapp, bool unsecured) external;\\n\\n    /**\\n        @notice It updates a dapp configuration.\\n        @param dapp address to add in this factory.\\n        @param unsecured boolean that describes if the dapp can be used by with an unsecured loan.\\n     */\\n    function updateDapp(address dapp, bool unsecured) external;\\n\\n    /**\\n        @notice It removes a current dapp from the factory.\\n        @param dapp address to remove.\\n     */\\n    function removeDapp(address dapp) external;\\n\\n    /**\\n        @notice Gets all the dapps in the factory.\\n        @return an array of dapps (addresses).\\n     */\\n    function getDapps() external view returns (address[] memory);\\n\\n    /**\\n        @notice It initializes this escrow contract factory instance.\\n     */\\n    function initialize() external;\\n\\n    /**\\n        @notice This event is emitted when a new Escrow contract is created.\\n        @param borrower address associated to the new escrow.\\n        @param loansAddress loan manager contract address.\\n        @param loanID loan id associated to the borrower and escrow contract.\\n        @param escrowAddress the new escrow contract address.\\n     */\\n    event EscrowCreated(\\n        address indexed borrower,\\n        address indexed loansAddress,\\n        uint256 indexed loanID,\\n        address escrowAddress\\n    );\\n\\n    /**\\n        @notice This event is emitted when a new dapp is added to the factory.\\n        @param sender address.\\n        @param dapp address added to the factory.\\n        @param unsecured boolean that describes if the dapp can be used by with an unsecured loan.\\n     */\\n    event NewDappAdded(\\n        address indexed sender,\\n        address indexed dapp,\\n        bool unsecured\\n    );\\n\\n    /**\\n        @notice This event is emitted when a dapp is updated.\\n        @param sender address.\\n        @param dapp address of dapp contract.\\n        @param unsecured boolean that describes if the dapp can be used by with an unsecured loan.\\n     */\\n    event DappUpdated(\\n        address indexed sender,\\n        address indexed dapp,\\n        bool unsecured\\n    );\\n\\n    /**\\n        @notice This event is emitted when a current dapp is removed from the factory.\\n        @param sender address.\\n        @param dapp address removed from the factory.\\n     */\\n    event DappRemoved(address indexed sender, address indexed dapp);\\n}\\n\",\"keccak256\":\"0xfa622c6700ec05e799c6025f14143257722057218f87a592545215bcf65d2f97\",\"license\":\"MIT\"},\"contracts/interfaces/IInitializeableDynamicProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IInitializeableDynamicProxy {\\n    /**\\n        @notice It initializes a new dynamic proxy given a logic registry contract and a logic name.\\n        @param aLogicRegistryAddress the settings contract address.\\n        @param aLogicName the settings contract address.\\n        @param isStrictDynamic Boolean indicating if the proxy must check the registry for a new implementation.\\n     */\\n    function initialize(\\n        address aLogicRegistryAddress,\\n        bytes32 aLogicName,\\n        bool isStrictDynamic\\n    ) external;\\n}\\n\",\"keccak256\":\"0xad5d5a1462c06a15f17b55fa28c44cdc73aab938b1d55943227688ef445ebb33\",\"license\":\"MIT\"},\"contracts/interfaces/IMarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../util/TellerCommon.sol\\\";\\nimport \\\"./IMarketRegistry.sol\\\";\\n\\n/**\\n    @notice\\n\\n    @author develop@teller.finance\\n */\\n\\ninterface IMarketFactory {\\n    /** External Functions */\\n\\n    function marketRegistry() external returns (IMarketRegistry);\\n\\n    function createMarket(address lendingToken, address collateralToken)\\n        external;\\n\\n    function initialize() external;\\n\\n    /** Events */\\n\\n    event NewMarketCreated(\\n        address indexed sender,\\n        address indexed lendingToken,\\n        address indexed collateralToken,\\n        address loans,\\n        address lendingPool\\n    );\\n}\\n\",\"keccak256\":\"0x629329d0560226434fb9de293094b625426bde079a6d94d990cf1a61ff553a2a\",\"license\":\"MIT\"},\"contracts/interfaces/IMarketRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Utils\\nimport \\\"../util/AddressArrayLib.sol\\\";\\n\\n// Interfaces\\nimport \\\"./LendingPoolInterface.sol\\\";\\nimport \\\"./loans/ILoanManager.sol\\\";\\n\\n/**\\n    @notice It defines all the functions for the TToken registry\\n\\n    @author develop@teller.finance\\n */\\n\\ninterface IMarketRegistry {\\n    /**\\n        @notice It fetches an array of collateral tokens that a given lending token supports.\\n        @param lendingTokenAddress a token that the protocol lends.\\n        @return an array of collateral tokens supported by the lending token market.\\n     */\\n    function getMarkets(address lendingTokenAddress)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /**\\n        @notice It maps a lending token to the associated LendingPool contract.\\n        @param lendingTokenAddress the lending token used in a LendingPool.\\n        @return the LendingPool contract for the given token.\\n     */\\n    function lendingPools(address lendingTokenAddress)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n        @notice It maps a lending token and collateral token to the associated LoanManager contract.\\n        @param lendingTokenAddress a token the protocol lends out.\\n        @param collateralTokenAddress a token that is used as collateral.\\n        @return the Loans contract for the given token pair.\\n     */\\n    function loanManagers(\\n        address lendingTokenAddress,\\n        address collateralTokenAddress\\n    ) external view returns (address);\\n\\n    /**\\n        @notice It represents a mapping to identify a LendingPool's LoanManager contract address.\\n        @param lendingPoolAddress a LendingPool contract.\\n        @param loanManagerAddress a Loans contract.\\n        @return true if the Loans contract address is registered to the LendingPool contract.\\n     */\\n    function loanManagerRegistry(\\n        address lendingPoolAddress,\\n        address loanManagerAddress\\n    ) external view returns (bool);\\n\\n    /**\\n        @notice It registers a new market with a LendingPool and Loans contract pair.\\n        @param lendingPoolAddress a lending pool contract used to borrow assets.\\n        @param loanManagerAddress a loan manager contract that stores all the relevant loans info and functionality.\\n     */\\n    function registerMarket(\\n        address lendingPoolAddress,\\n        address loanManagerAddress\\n    ) external;\\n\\n    /**\\n        @notice It checks if a market already exists.\\n        @param lendingTokenAddress The lending token address.\\n        @param collateralTokenAddress The collateral token address.\\n     */\\n    function marketExists(\\n        address lendingTokenAddress,\\n        address collateralTokenAddress\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice It initializes the MarketRegistry contract by setting the owner of the caller.\\n     * @dev This contract is constructed and initialized by the MarketFactory.\\n     */\\n    function initialize() external;\\n}\\n\",\"keccak256\":\"0xd6593671ebc6148eddab5acf99aa94417fe72c7770f3cf4d404884f06579a5c2\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Interfaces\\nimport \\\"@chainlink/contracts/src/v0.5/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/*****************************************************************************************************/\\n/**                                             WARNING                                             **/\\n/**                                  THIS CONTRACT IS UPGRADEABLE!                                  **/\\n/**  ---------------------------------------------------------------------------------------------  **/\\n/**  Do NOT change the order of or PREPEND any storage variables to this or new versions of this    **/\\n/**  contract as this will cause the the storage slots to be overwritten on the proxy contract!!    **/\\n/**                                                                                                 **/\\n/**  Visit https://docs.openzeppelin.com/upgrades/2.6/proxies#upgrading-via-the-proxy-pattern for   **/\\n/**  more information.                                                                              **/\\n/*****************************************************************************************************/\\n/**\\n    @notice This contract is used to fetch and calculate prices and values from one token to another through Chainlink Aggregators.\\n    @dev It tries to find an aggregator using the token addresses supplied. If unable, it uses ETH as a pass through asset to construct a path conversion.\\n\\n    @author develop@teller.finance\\n */\\ninterface IPriceAggregator {\\n    /**\\n        @notice It grabs the Chainlink Aggregator contract address for the token pair if it is supported.\\n        @param src Source token address.\\n        @param dst Destination token address.\\n        @return AggregatorV2V3Interface The Chainlink Aggregator address.\\n        @return bool whether or not the values from the Aggregator should be considered inverted.\\n     */\\n    function aggregatorFor(address src, address dst)\\n        external\\n        view\\n        returns (AggregatorV2V3Interface, bool);\\n\\n    function isTokenSupported(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n        @notice It calculates the value of a token amount into another.\\n        @param src Source token address.\\n        @param dst Destination token address.\\n        @param srcAmount Amount of the source token to convert into the destination token.\\n        @return uint256 Value of the source token amount in destination tokens.\\n     */\\n    function valueFor(\\n        address src,\\n        address dst,\\n        uint256 srcAmount\\n    ) external view returns (uint256);\\n\\n    /**\\n        @notice It returns the price of the token pair as given from the Chainlink Aggregator.\\n        @dev It tries to use ETH as a pass through asset if the direct pair is not supported.\\n        @param src Source token address.\\n        @param dst Destination token address.\\n        @return uint256 The latest answer as given from Chainlink.\\n     */\\n    function latestAnswerFor(address src, address dst)\\n        external\\n        view\\n        returns (int256);\\n\\n    /**\\n        @notice It allows for additional Chainlink Aggregators to be supported.\\n        @param src Source token address.\\n        @param dst Destination token address.\\n     */\\n    function add(\\n        address src,\\n        address dst,\\n        address aggregator\\n    ) external;\\n\\n    /**\\n        @notice It removes support for a Chainlink Aggregator pair.\\n        @param src Source token address.\\n        @param dst Destination token address.\\n     */\\n    function remove(address src, address dst) external;\\n\\n    /**\\n        @notice It removes support for a Chainlink Aggregator.\\n        @param tokenAddress Token to remove all markets for.\\n     */\\n    function remove(address tokenAddress) external;\\n\\n    function initialize() external;\\n}\\n\",\"keccak256\":\"0x245b8c8272a22c4bf4ae47ae45a0443dba103afb49e805f765c666073fcae023\",\"license\":\"MIT\"},\"contracts/interfaces/ITToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Interfaces\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./LendingPoolInterface.sol\\\";\\n\\n/**\\n    @notice This contract acts as an interface for the Teller token (TToken).\\n\\n    @author develop@teller.finance\\n */\\nabstract contract ITToken {\\n    /**\\n     * @notice The LendingPool linked to this Teller Token.\\n     */\\n    function lendingPool() external view virtual returns (LendingPoolInterface);\\n\\n    /**\\n     * @notice The token that is the underlying assets for this Teller token.\\n     */\\n    function underlying() external view virtual returns (address);\\n\\n    /**\\n     * @notice Increase account supply of specified token amount.\\n     * @param account The account to mint tokens to.\\n     * @param amount The amount of tokens to mint.\\n     */\\n    function mint(address account, uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Reduce account supply of specified token amount.\\n     * @param account The account to burn tokens from.\\n     * @param amount The amount of tokens to burn.\\n     */\\n    function burn(address account, uint256 amount) external virtual;\\n\\n    /**\\n     * @param lendingPoolAddress the address of the lending pool this token is linked to. It is only used to add it as a minter.\\n     */\\n    function initialize(address lendingPoolAddress) external virtual;\\n}\\n\",\"keccak256\":\"0x9cea635513dce989ed2b32d7e7aae17a887639a2503c1fa919523eee67674429\",\"license\":\"MIT\"},\"contracts/interfaces/LendingPoolInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Utils\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n// Interfaces\\nimport \\\"./IMarketRegistry.sol\\\";\\nimport \\\"./ITToken.sol\\\";\\nimport \\\"../providers/uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../providers/compound/CErc20Interface.sol\\\";\\n\\n/**\\n    @notice This interface defines the functions for a lending pool that holds all of the tokens\\n    that lenders transfer into the protocol.\\n\\n    @author develop@teller.finance\\n */\\ninterface LendingPoolInterface {\\n    /**\\n        @notice It allows users to deposit tokens into the pool.\\n        @dev the user must call ERC20.approve function previously.\\n        @param amount of tokens to deposit in the pool.\\n    */\\n    function deposit(uint256 amount) external;\\n\\n    /**\\n        @notice It allows any tToken holder to burn their tToken tokens and withdraw their tokens.\\n        @param amount of tokens to withdraw.\\n        @dev It throws a require error if the contract hasn't enough tokens balance.\\n        @dev It throws a require error if the holder hasn't enough tToken balance.\\n     */\\n    function withdraw(uint256 amount) external;\\n\\n    /**\\n        @notice It allows a borrower repaying their loan.\\n        @dev This function can be called ONLY by the LoanManager contract.\\n        @dev It requires a ERC20.approve call before calling it.\\n        @dev It throws a require error if borrower called ERC20.approve function before calling it.\\n        @param principalAmount amount of tokens towards the principal.\\n        @param interestAmount amount of tokens towards the interest.\\n        @param borrower address that is repaying the loan.\\n     */\\n    function repay(\\n        uint256 principalAmount,\\n        uint256 interestAmount,\\n        address borrower\\n    ) external;\\n\\n    /**\\n        @notice Once the loan is created, it transfers the amount of tokens to the borrower.\\n        @param amount of tokens to transfer.\\n        @param borrower address which will receive the tokens.\\n        @dev This function only can be invoked by the LoanManager implementation.\\n        @dev It throws a require error if current ERC20 balance isn't enough to transfer the tokens.\\n     */\\n    function createLoan(uint256 amount, address borrower) external;\\n\\n    /**\\n        @notice It gets the lending token address.\\n        @return the ERC20 lending token address.\\n    */\\n    function lendingToken() external view returns (ERC20);\\n\\n    /**\\n        @notice It initializes the contract state variables.\\n        @param aMarketRegistry the MarketRegistry contract.\\n        @param aLendingToken The underlying token that is used for lending.\\n        @param aTToken the Teller token to link to the lending pool.\\n        @param settingsAddress Settings contract address.\\n        @dev It throws a require error if the contract is already initialized.\\n     */\\n    function initialize(\\n        IMarketRegistry aMarketRegistry,\\n        address aLendingToken,\\n        address aTToken,\\n        address settingsAddress\\n    ) external;\\n\\n    /**\\n        @notice It gets the cToken address.\\n        @return the cToken address.\\n    */\\n    function cToken() external view returns (CErc20Interface);\\n\\n    function compound() external view returns (IComptroller);\\n\\n    function comp() external view returns (ERC20);\\n\\n    /**\\n        @notice It gets the tToken address.\\n        @return the tToken address.\\n    */\\n    function tToken() external view returns (ITToken);\\n\\n    /**\\n        @notice It returns the balance of underlying tokens a lender owns with the amount\\n        of TTokens owned and the current exchange rate.\\n        @return a lender's balance of the underlying token in the pool.\\n     */\\n    function balanceOfUnderlying(address lender) external returns (uint256);\\n\\n    /**\\n        @notice Returns the total amount of interest earned by a lender.\\n        @dev This value includes already claimed + unclaimed interest earned.\\n        @return total interest earned by lender.\\n     */\\n    function getLenderInterestEarned(address lender) external returns (uint256);\\n\\n    /**\\n        @notice Returns the amount of claimable interest a lender has earned.\\n        @return claimable interest value.\\n     */\\n    function getClaimableInterestEarned(address lender)\\n        external\\n        returns (uint256);\\n\\n    /**\\n        @notice Returns the total amount of interest the pool has earned from repaying loans.\\n        @return total interest earned from loans.\\n     */\\n    function totalInterestEarned() external view returns (uint256);\\n\\n    /**\\n        @notice It calculates the market state values across all markets.\\n        @notice It returns values that represent the global state across all markets.\\n        @return totalSupplied\\n        @return totalBorrowed\\n        @return totalRepaid\\n        @return totalOnLoan\\n     */\\n    function getMarketState()\\n        external\\n        view\\n        returns (\\n            uint256 totalSupplied,\\n            uint256 totalBorrowed,\\n            uint256 totalRepaid,\\n            uint256 totalOnLoan\\n        );\\n\\n    /**\\n        @notice It gets the debt-to-supply (DtS) ratio for a given market, including a new loan amount.\\n        @notice The formula to calculate DtS ratio (including a new loan amount) is:\\n\\n            DtS = (SUM(total borrowed) - SUM(total repaid) + NewLoanAmount) / SUM(total supplied)\\n\\n        @notice The value has 2 decimal places.\\n            Example:\\n                100 => 1%\\n        @param loanAmount a new loan amount to consider in the ratio.\\n        @return the debt-to-supply ratio value.\\n     */\\n    function getDebtRatioFor(uint256 loanAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n        @notice This event is emitted when an user deposits tokens into the pool.\\n        @param sender address.\\n        @param amount of tokens.\\n     */\\n    event TokenDeposited(\\n        address indexed sender,\\n        uint256 amount,\\n        uint256 tTokenAmount\\n    );\\n\\n    /**\\n        @notice This event is emitted when an user withdraws tokens from the pool.\\n        @param sender address that withdrew the tokens.\\n        @param amount of tokens.\\n     */\\n    event TokenWithdrawn(\\n        address indexed sender,\\n        uint256 amount,\\n        uint256 tTokenAmount\\n    );\\n\\n    /**\\n        @notice This event is emitted when an borrower repaid a loan.\\n        @param borrower address.\\n        @param amount of tokens.\\n     */\\n    event TokenRepaid(address indexed borrower, uint256 amount);\\n\\n    /**\\n        @notice This event is emitted when an lender withdraws interests.\\n        @param lender address.\\n        @param amount of tokens.\\n     */\\n    event InterestWithdrawn(address indexed lender, uint256 amount);\\n\\n    /**\\n        @notice This event is emitted when the interest validator is updated.\\n        @param sender account that sends the transaction.\\n        @param oldInterestValidator the old validator address.\\n        @param newInterestValidator the new validator address.\\n     */\\n    event InterestValidatorUpdated(\\n        address indexed sender,\\n        address indexed oldInterestValidator,\\n        address indexed newInterestValidator\\n    );\\n}\\n\",\"keccak256\":\"0xd07c2575f6de7c3b0f1365b0c864215d565e11bdfad57dd41146105605a7750e\",\"license\":\"MIT\"},\"contracts/interfaces/LogicVersionsRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Commons\\nimport \\\"../util/LogicVersionLib.sol\\\";\\nimport \\\"../util/TellerCommon.sol\\\";\\n\\n/**\\n    @notice It defines all the functions to manage the logic contract versions.\\n\\n    @author develop@teller.finance\\n */\\ninterface LogicVersionsRegistryInterface {\\n    /**\\n        @notice This event is emitted when a new logic version is created.\\n        @param logicName new logic name.\\n        @param logic address where the logic is.\\n        @param version initial version for the logic address.\\n     */\\n    event LogicVersionCreated(\\n        bytes32 indexed logicName,\\n        address indexed logic,\\n        uint256 version\\n    );\\n\\n    /**\\n        @notice This event is emitted when a logic version is rollbacked.\\n        @param logicName the logic name.\\n        @param oldLogic the old logic address.\\n        @param newLogic the new (or previous) logic address.\\n        @param oldVersion the old version.\\n        @param newVersion the new (previous) version.\\n     */\\n    event LogicVersionRollbacked(\\n        bytes32 indexed logicName,\\n        address oldLogic,\\n        address newLogic,\\n        uint256 oldVersion,\\n        uint256 newVersion\\n    );\\n\\n    /**\\n        @notice This event is emitted when a new logic version is upgraded.\\n        @param logicName new logic name.\\n        @param oldLogic the old logic address.\\n        @param newLogic the new logic address.\\n        @param oldVersion the old version.\\n        @param newVersion the new version.\\n     */\\n    event LogicVersionUpgraded(\\n        bytes32 indexed logicName,\\n        address oldLogic,\\n        address newLogic,\\n        uint256 oldVersion,\\n        uint256 newVersion\\n    );\\n\\n    /** External Functions */\\n\\n    /**\\n        @notice It creates multiple logic versions.\\n        @param newLogicVersions lists of the new logic versions to create.\\n     */\\n    function createLogicVersions(\\n        TellerCommon.CreateLogicVersionRequest[] calldata newLogicVersions\\n    ) external;\\n\\n    /**\\n        @notice It upgrades multiple logic addresses.\\n        @param newLogicVersions lists of the new logic versions to create.\\n     */\\n    function upgradeLogicVersions(\\n        TellerCommon.UpgradeLogicVersionRequest[] calldata newLogicVersions\\n    ) external;\\n\\n    /**\\n        @notice It upgrades a logic version given a logic name.\\n        @param logicName logic name to upgrade.\\n        @param newLogic the new logic address to set.\\n        @param proxy The (optional) DynamicUpgradeable proxy address to attempt to directly upgrade.\\n     */\\n    function upgradeLogicVersion(\\n        bytes32 logicName,\\n        address newLogic,\\n        address proxy\\n    ) external;\\n\\n    /**\\n        @notice It rollbacks a logic to a previous version.\\n        @param logicName logic name to rollback.\\n        @param previousVersion the previous version to be used.\\n     */\\n    function rollbackLogicVersion(bytes32 logicName, uint256 previousVersion)\\n        external;\\n\\n    /**\\n        @notice It gets the current logic version for a given logic name.\\n        @param logicName to get.\\n        @return currentVersion the current logic version number.\\n        @return latestVersion the latest version number (higher than current if rolled back).\\n        @return logic the address of the current logic version\\n     */\\n    function getLogicVersion(bytes32 logicName)\\n        external\\n        view\\n        returns (\\n            uint256 currentVersion,\\n            uint256 latestVersion,\\n            address logic\\n        );\\n\\n    /**\\n        @notice It tests whether a logic name is already configured.\\n        @param logicName logic name to test.\\n        @return true if the logic version is already configured. Otherwise it returns false.\\n     */\\n    function hasLogicVersion(bytes32 logicName) external view returns (bool);\\n\\n    /**\\n        @notice It initializes this logic versions registry contract instance.\\n        @param aOwner address of the owner of the registry.\\n        @param initialLogicVersions lists of the new logic versions to create.\\n     */\\n    function initialize(\\n        address aOwner,\\n        TellerCommon.CreateLogicVersionRequest[] calldata initialLogicVersions\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcc4e9941221f7142f8cd1b7d800e825be3f42192ea0e5044dd965366d49c58b2\",\"license\":\"MIT\"},\"contracts/interfaces/SettingsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport \\\"../util/PlatformSettingsLib.sol\\\";\\n\\n// Interfaces\\nimport \\\"./IDappRegistry.sol\\\";\\nimport \\\"./IPriceAggregator.sol\\\";\\nimport \\\"./AssetSettingsInterface.sol\\\";\\nimport \\\"./IMarketFactory.sol\\\";\\n\\n/**\\n    @notice This interface defines all function to manage the platform configuration.\\n\\n    @author develop@teller.finance\\n */\\ninterface SettingsInterface {\\n    /**\\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\\n     */\\n    event Unpaused(address account);\\n\\n    event PauserAdded(address indexed account);\\n    event PauserRemoved(address indexed account);\\n\\n    /**\\n        @notice This event is emitted when a new platform setting is created.\\n        @param settingName new setting name.\\n        @param sender address that created it.\\n        @param value value for the new setting.\\n     */\\n    event PlatformSettingCreated(\\n        bytes32 indexed settingName,\\n        address indexed sender,\\n        uint256 value,\\n        uint256 minValue,\\n        uint256 maxValue\\n    );\\n\\n    /**\\n        @notice This event is emitted when a current platform setting is removed.\\n        @param settingName setting name removed.\\n        @param sender address that removed it.\\n     */\\n    event PlatformSettingRemoved(\\n        bytes32 indexed settingName,\\n        uint256 lastValue,\\n        address indexed sender\\n    );\\n\\n    /**\\n        @notice This event is emitted when a platform setting is updated.\\n        @param settingName settings name updated.\\n        @param sender address that updated it.\\n        @param oldValue old value for the setting.\\n        @param newValue new value for the setting.\\n     */\\n    event PlatformSettingUpdated(\\n        bytes32 indexed settingName,\\n        address indexed sender,\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    /**\\n        @notice This event is emitted when a lending pool is paused.\\n        @param account address that paused the lending pool.\\n        @param lendingPoolAddress lending pool address which was paused.\\n     */\\n    event LendingPoolPaused(\\n        address indexed account,\\n        address indexed lendingPoolAddress\\n    );\\n\\n    /**\\n        @notice This event is emitted when a lending pool is unpaused.\\n        @param account address that paused the lending pool.\\n        @param lendingPoolAddress lending pool address which was unpaused.\\n     */\\n    event LendingPoolUnpaused(\\n        address indexed account,\\n        address indexed lendingPoolAddress\\n    );\\n\\n    /**\\n        @notice This event is emitted when the platform restriction is switched\\n        @param restriction Boolean representing the state of the restriction\\n        @param pauser address of the pauser flipping the switch\\n    */\\n    event PlatformRestricted(bool restriction, address indexed pauser);\\n\\n    /**\\n        @notice This event is emitted when an address is given authorization\\n        @param user The address being authorized\\n        @param pauser address of the pauser adding the address\\n    */\\n    event AuthorizationGranted(address indexed user, address indexed pauser);\\n\\n    /**\\n        @notice This event is emitted when an address has authorization revoked\\n        @param user The address being revoked\\n        @param pauser address of the pauser removing the address\\n    */\\n    event AuthorizationRevoked(address indexed user, address indexed pauser);\\n\\n    /**\\n        @notice It creates a new platform setting given a setting name, value, min and max values.\\n        @param settingName setting name to create.\\n        @param value the initial value for the given setting name.\\n        @param minValue the min value for the setting.\\n        @param maxValue the max value for the setting.\\n     */\\n    function createPlatformSetting(\\n        bytes32 settingName,\\n        uint256 value,\\n        uint256 minValue,\\n        uint256 maxValue\\n    ) external;\\n\\n    function assetSettings() external view returns (AssetSettingsInterface);\\n\\n    /**\\n     * @notice It holds the address of a deployed InitializeableDynamicProxy contract.\\n     * @dev It is used to deploy a new proxy contract with minimal gas cost using the logic in the Factory contract.\\n     */\\n    function initDynamicProxyLogic() external view returns (address);\\n\\n    /**\\n        @notice It updates an existent platform setting given a setting name.\\n        @notice It only allows to update the value (not the min or max values).\\n        @notice In case you need to update the min or max values, you need to remove it, and create it again.\\n        @param settingName setting name to update.\\n        @param newValue the new value to set.\\n     */\\n    function updatePlatformSetting(bytes32 settingName, uint256 newValue)\\n        external;\\n\\n    /**\\n        @notice Removes a current platform setting given a setting name.\\n        @param settingName to remove.\\n     */\\n    function removePlatformSetting(bytes32 settingName) external;\\n\\n    /**\\n        @notice It gets the current \\\"RequiredSubmissionsPercentage\\\" setting's value\\n        @return value the current value.\\n     */\\n    function getRequiredSubmissionsPercentageValue()\\n        external\\n        view\\n        returns (uint256 value);\\n\\n    /**\\n        @notice It gets the current \\\"MaximumTolerance\\\" setting's value\\n        @return value the current value.\\n     */\\n    function getMaximumToleranceValue() external view returns (uint256 value);\\n\\n    /**\\n        @notice It gets the current \\\"ResponseExpiryLength\\\" setting's value\\n        @return value the current value.\\n     */\\n    function getResponseExpiryLengthValue()\\n        external\\n        view\\n        returns (uint256 value);\\n\\n    /**\\n        @notice It gets the current \\\"SafetyInterval\\\" setting's value\\n        @return value the current value.\\n     */\\n    function getSafetyIntervalValue() external view returns (uint256 value);\\n\\n    /**\\n        @notice It gets the current \\\"TermsExpiryTime\\\" setting's value\\n        @return value the current value.\\n     */\\n    function getTermsExpiryTimeValue() external view returns (uint256 value);\\n\\n    /**\\n        @notice It gets the current \\\"LiquidateEthPrice\\\" setting's value\\n        @return value the current value.\\n     */\\n    function getLiquidateEthPriceValue() external view returns (uint256 value);\\n\\n    /**\\n        @notice It gets the current \\\"MaximumLoanDuration\\\" setting's value\\n        @return value the current value.\\n     */\\n    function getMaximumLoanDurationValue()\\n        external\\n        view\\n        returns (uint256 value);\\n\\n    /**\\n        @notice It gets the current \\\"RequestLoanTermsRateLimit\\\" setting's value\\n        @return value the current value.\\n     */\\n    function getRequestLoanTermsRateLimitValue()\\n        external\\n        view\\n        returns (uint256 value);\\n\\n    /**\\n        @notice It gets the current \\\"CollateralBuffer\\\" setting's value\\n        @return value the current value.\\n     */\\n    function getCollateralBufferValue() external view returns (uint256 value);\\n\\n    /**\\n        @notice It gets the current \\\"OverCollateralizedBuffer\\\" setting's value\\n        @return value the current value.\\n     */\\n    function getOverCollateralizedBufferValue()\\n        external\\n        view\\n        returns (uint256 value);\\n\\n    /**\\n     * @notice It returns the address of the UniswapV2Router.\\n     */\\n    function getUniswapV2RouterAddress() external view returns (address);\\n\\n    /**\\n        @notice It tests whether a setting name is already configured.\\n        @param settingName setting name to test.\\n        @return true if the setting is already configured. Otherwise it returns false.\\n     */\\n    function hasPlatformSetting(bytes32 settingName)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n        @notice It gets whether the platform is paused or not.\\n        @return true if platform is paused. Otherwise it returns false.\\n     */\\n    function isPaused() external view returns (bool);\\n\\n    /**\\n        @notice It gets whether a lending pool is paused or not.\\n        @param lendingPoolAddress lending pool address to test.\\n        @return true if the lending pool is paused. Otherwise it returns false.\\n     */\\n    function lendingPoolPaused(address lendingPoolAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n        @notice It pauses a specific lending pool.\\n        @param lendingPoolAddress lending pool address to pause.\\n     */\\n    function pauseLendingPool(address lendingPoolAddress) external;\\n\\n    /**\\n        @notice It unpauses a specific lending pool.\\n        @param lendingPoolAddress lending pool address to unpause.\\n     */\\n    function unpauseLendingPool(address lendingPoolAddress) external;\\n\\n    function platformSettings(bytes32)\\n        external\\n        view\\n        returns (PlatformSettingsLib.PlatformSetting memory);\\n\\n    /**\\n        @notice Tests whether an account has the pauser role.\\n        @param account account to test.\\n        @return true if account has the pauser role. Otherwise it returns false.\\n     */\\n    function isPauser(address account) external view returns (bool);\\n\\n    /**\\n        @notice Requires an account to have the pauser role.\\n        @param account account to test.\\n     */\\n    function requirePauserRole(address account) external view;\\n\\n    /**\\n        @notice Restricts the use of the Teller protocol to authorized wallet addresses only\\n        @param restriction Bool turning the resitriction on or off\\n     */\\n    function restrictPlatform(bool restriction) external;\\n\\n    /**\\n        @notice Adds a wallet address to the list of authorized wallets\\n        @param addressToAdd The wallet address of the user being authorized\\n     */\\n    function addAuthorizedAddress(address addressToAdd) external;\\n\\n    /**\\n        @notice Adds a list of wallet addresses to the list of authorized wallets\\n        @param addressesToAdd The list of wallet addresses being authorized\\n     */\\n    function addAuthorizedAddressList(address[] calldata addressesToAdd)\\n        external;\\n\\n    function addEscrowAuthorized(address escrowAddress) external;\\n\\n    /**\\n        @notice Returns whether the platform is restricted or not\\n        @return bool True if the platform is restricted, false if not\\n     */\\n    function isPlatformRestricted() external view returns (bool);\\n\\n    /**\\n        @notice Tests whether an account has authorization\\n        @param account The account address to check for\\n        @return True if account has authorization, false if it does not\\n     */\\n    function hasAuthorization(address account) external view returns (bool);\\n\\n    /**\\n        @notice Requires an account to have platform authorization.\\n        @param account account to test.\\n     */\\n    function requireAuthorization(address account) external view;\\n\\n    /**\\n        @notice Removes a wallet address from the list of authorized wallets\\n        @param addressToRemove The wallet address of the user being unauthorized\\n     */\\n    function removeAuthorizedAddress(address addressToRemove) external;\\n\\n    /**\\n        @notice It is the global instance of the DappRegistry contract.\\n     */\\n    function dappRegistry() external view returns (IDappRegistry);\\n\\n    /**\\n        @notice It is the global instance of the PriceAggregator contract.\\n     */\\n    function priceAggregator() external view returns (IPriceAggregator);\\n\\n    /**\\n        @notice It is the global instance of the MarketFactory contract.\\n     */\\n    function marketFactory() external view returns (IMarketFactory);\\n\\n    /**\\n        @notice Gets the cToken address for a given asset address.\\n        @param assetAddress token address.\\n        @return the cToken address for a given asset address.\\n     */\\n    function getCTokenAddress(address assetAddress)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n        @notice It initializes this settings contract instance.\\n        @param wethTokenAddress canonical WETH token address.\\n        @param cethTokenAddress compound CETH token address.\\n        @param initDynamicProxyAddress Address of a deployed InitializeableDynamicProxy contract.\\n        @param uniswapV2RouterAddress Address of the UniswapV2Router instance to use for the platform.\\n     */\\n    function initialize(\\n        address wethTokenAddress,\\n        address cethTokenAddress,\\n        address initDynamicProxyAddress,\\n        address uniswapV2RouterAddress\\n    ) external;\\n\\n    /**\\n        @notice It gets the ETH address used in the platform.\\n        @return the ETH address used in the platform.\\n     */\\n    function ETH_ADDRESS() external view returns (address);\\n\\n    /**\\n        @notice It gets the canonical WETH address used in the platform.\\n        @return the canonical WETH address used in the platform.\\n     */\\n    function WETH_ADDRESS() external view returns (address);\\n\\n    /**\\n        @notice It gets the canonical CETH address used in the platform.\\n        @return the canonical CETH address used in the platform.\\n     */\\n    function CETH_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0x73333b22a315b297a1a0478f6996eb9a73addd802f1d056cdc9e1f3c4254a60e\",\"license\":\"MIT\"},\"contracts/interfaces/escrow/IEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport \\\"../../util/TellerCommon.sol\\\";\\n\\n// Interfaces\\nimport \\\"../loans/ILoanManager.sol\\\";\\nimport \\\"../loans/ILoanManager.sol\\\";\\n\\n/**\\n * @notice This interface defines all function to allow borrowers interact with their escrow contracts.\\n *\\n * @author develop@teller.finance\\n */\\ninterface IEscrow {\\n    /* External Functions */\\n\\n    /**\\n     * @notice It calls a given dapp using a delegatecall function by a borrower owned the current loan id associated to this escrow contract.\\n     * @param dappData the current dapp data to be executed.\\n     */\\n    function callDapp(TellerCommon.DappData calldata dappData) external;\\n\\n    /**\\n     * @notice Calculate the value of the loan by getting the value of all tokens the Escrow owns.\\n     * @return Escrow total value denoted in the lending token.\\n     */\\n    function calculateTotalValue() external view returns (uint256);\\n\\n    /**\\n     * @notice Repay this Escrow's loan.\\n     * @dev If the Escrow's balance of the borrowed token is less than the amount to repay, transfer tokens from the sender's wallet.\\n     */\\n    function repay(uint256 amount) external;\\n\\n    /**\\n     * @notice Sends the tokens owned by this escrow to the recipient.\\n     * @dev The loan must not be active.\\n     * @dev The recipient must either be the loan borrower AND the loan must be already liquidated.\\n     */\\n    function claimTokens() external;\\n\\n    /**\\n     * @notice Send the equivilant of tokens owned by this escrow (in collateral value) to the recipient,\\n     * @dev The loan must not be active\\n     * @dev The loan must be liquidated\\n     * @dev The recipeient must be the loan manager contract\\n     * @param recipient address to send the tokens to\\n     * @param value The value of escrow held tokens, to be claimed based on collateral value\\n     */\\n    function claimTokensByCollateralValue(address recipient, uint256 value)\\n        external;\\n\\n    /**\\n     * @notice It initializes this escrow instance for a given loans address and loan id.\\n     * @param settingsAddress The address of the settings contract.\\n     * @param lendingPoolAddress e\\n     * @param aLoanID the loan ID associated to this escrow instance.\\n     * @param lendingTokenAddress The token that the Escrow loan will be for.\\n     * @param borrowerAddress e\\n     */\\n    function initialize(\\n        address settingsAddress,\\n        address lendingPoolAddress,\\n        uint256 aLoanID,\\n        address lendingTokenAddress,\\n        address borrowerAddress\\n    ) external;\\n\\n    /**\\n     * @notice Notifies when the Escrow's tokens have been claimed.\\n     * @param recipient address where the tokens where sent to.\\n     */\\n    event TokensClaimed(address recipient);\\n}\\n\",\"keccak256\":\"0x1a20432cd8005f9dd2da67e5c41e534ba461c475409a4101a47f715bd5ce9f51\",\"license\":\"MIT\"},\"contracts/interfaces/loans/ILoanData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Commons\\nimport \\\"../../util/TellerCommon.sol\\\";\\n\\n// Interfaces\\nimport \\\"./ILoanStorage.sol\\\";\\nimport \\\"./ILoanTermsConsensus.sol\\\";\\nimport \\\"../SettingsInterface.sol\\\";\\nimport \\\"../LendingPoolInterface.sol\\\";\\nimport \\\"../../providers/compound/CErc20Interface.sol\\\";\\n\\n/**\\n * @notice This interface defines the functions to get and calculate information about loan data.\\n *\\n * @author develop@teller.finance\\n */\\ninterface ILoanData {\\n    /**\\n     * @notice Checks whether the status of a loan is Active or has Terms Set\\n     * @param loanID The loan ID for which to check the status\\n     * @return bool value indicating if the loan is active or has terms set\\n     */\\n    function isActiveOrSet(uint256 loanID) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the total owed amount remaining for a specified loan\\n     * @param loanID The ID of the loan to be queried\\n     * @return uint256 The total amount owed remaining\\n     */\\n    function getTotalOwed(uint256 loanID) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the total amount owed for a specified loan.\\n     * @param loanID The loan ID to get the total amount owed.\\n     * @return uint256 The amount owed.\\n     */\\n    function getLoanAmount(uint256 loanID) external view returns (uint256);\\n\\n    /**\\n     * @notice Checks whether the loan's collateral ratio is considered to be secured based on the settings collateral buffer value.\\n     * @param loanID The loan ID to check.\\n     * @return bool value of it being secured or not.\\n     */\\n    function isLoanSecured(uint256 loanID) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a loan is allowed to be deposited to an Externally Owned Account.\\n     * @param loanID The loan ID to check the collateral ratio for.\\n     * @return bool indicating whether the loan with specified parameters can be deposited to an EOA.\\n     */\\n    function canGoToEOA(uint256 loanID) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the amount of interest owed for a given loan and loan amount.\\n     * @param loanID The loan ID to get the owed interest.\\n     * @param amountBorrow The principal of the loan to take out.\\n     * @return uint256 The interest owed.\\n     */\\n    function getInterestOwedFor(uint256 loanID, uint256 amountBorrow)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the interest ratio based on the loan interest rate for the loan duration.\\n     * @dev The interest rate on the loan terms is APY.\\n     * @param loanID The loan ID to get the interest rate for.\\n     */\\n    function getInterestRatio(uint256 loanID) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the collateral needed for a loan, in the lending token, needed to take out the loan or for it be liquidated.\\n     * @param loanID The loan ID for which to get collateral information for\\n     * @return uint256 Collateral needed in lending token value\\n     */\\n    function getCollateralInLendingTokens(uint256 loanID)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get information on the collateral needed for the loan.\\n     * @param loanID The loan ID to get collateral info for.\\n     * @return neededInLendingTokens int256 Collateral needed in Lending tokens.\\n     * @return neededInCollateralTokens int256 Collateral needed in Collateral tokens (wei)\\n     * @return escrowLoanValue uint256 The value of the loan held in the escrow contract\\n     */\\n    function getCollateralNeededInfo(uint256 loanID)\\n        external\\n        view\\n        returns (\\n            int256 neededInLendingTokens,\\n            int256 neededInCollateralTokens,\\n            uint256 escrowLoanValue\\n        );\\n\\n    /**\\n     * @notice Returns the minimum collateral value threshold, in the lending token, needed to take out the loan or for it be liquidated.\\n     * @dev If the loan status is TermsSet, then the value is whats needed to take out the loan.\\n     * @dev If the loan status is Active, then the value is the threshold at which the loan can be liquidated at.\\n     * @param loanID The loan ID to get needed collateral info for.\\n     * @return neededInLendingTokens int256 The minimum collateral value threshold required.\\n     * @return escrowLoanValue uint256 The value of the loan held in the escrow contract.\\n     */\\n    function getCollateralNeededInTokens(uint256 loanID)\\n        external\\n        view\\n        returns (int256 neededInLendingTokens, uint256 escrowLoanValue);\\n\\n    /**\\n     * @notice It checks if a loan can be liquidated.\\n     * @param loanID The loan ID to check.\\n     * @return true if the loan is liquidable.\\n     */\\n    function isLiquidable(uint256 loanID) external view returns (bool);\\n\\n    /**\\n     * @notice It gets the current liquidation reward for a given loan.\\n     * @param loanID The loan ID to get the info.\\n     * @return The value the liquidator will receive denoted in collateral tokens.\\n     */\\n    function getLiquidationReward(uint256 loanID)\\n        external\\n        view\\n        returns (int256);\\n}\\n\",\"keccak256\":\"0xa4f213d80d631cb9302f6972a4fd982a0b54f7460a3334d4a3d6e3f9c0c0b9fc\",\"license\":\"MIT\"},\"contracts/interfaces/loans/ILoanManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Commons\\nimport \\\"../../util/TellerCommon.sol\\\";\\n\\n// Interfaces\\nimport \\\"../SettingsInterface.sol\\\";\\nimport \\\"./ILoanData.sol\\\";\\n\\n/**\\n * @notice This interface defines the functions to work with the Teller loans protocol\\n *\\n * @author develop@teller.finance\\n */\\ninterface ILoanManager {\\n    /**\\n     * @notice Deposit collateral for a loan, unless it isn't allowed\\n     * @param borrower Account address of the borrower\\n     * @param loanID ID of loan from which collateral was withdrawn\\n     * @param amount Amount to be deposited as collateral\\n     */\\n    function depositCollateral(\\n        address borrower,\\n        uint256 loanID,\\n        uint256 amount\\n    ) external payable;\\n\\n    /**\\n     * @notice Withdraw collateral from a loan, unless this isn't allowed\\n     * @param amount The amount of collateral token or ether the caller is hoping to withdraw\\n     * @param loanID The ID of the loan the collateral is for\\n     */\\n    function withdrawCollateral(uint256 amount, uint256 loanID) external;\\n\\n    /**\\n     * @notice Create a loan with specified terms, if allowed\\n     * @param request Struct of the protocol loan request\\n     * @param responses List of structs of the protocol loan responses\\n     * @param collateralAmount Amount of collateral for the loan\\n     */\\n    function createLoanWithTerms(\\n        TellerCommon.LoanRequest calldata request,\\n        TellerCommon.LoanResponse[] calldata responses,\\n        uint256 collateralAmount\\n    ) external payable;\\n\\n    /**\\n     * @notice Take out a loan, if allowed\\n     * @param loanID The ID of the loan to be taken out\\n     * @param amountBorrow Amount of tokens to be taken out in the loan\\n     */\\n    function takeOutLoan(uint256 loanID, uint256 amountBorrow) external;\\n\\n    /**\\n     * @notice Make a payment to a specified loan\\n     * @param amount The amount of tokens to pay back to the loan\\n     * @param loanID The ID of the loan the payment is for\\n     */\\n    function repay(uint256 amount, uint256 loanID) external;\\n\\n    /**\\n     * @notice Liquidate a loan if has is expired or under collateralized\\n     * @param loanID The ID of the loan to be liquidated\\n     */\\n    function liquidateLoan(uint256 loanID) external;\\n\\n    /**\\n        @notice It adds a new account as a signer.\\n        @param account address to add.\\n        @dev The sender must be the owner.\\n        @dev It throws a require error if the sender is not the owner.\\n     */\\n    function addSigner(address account) external;\\n\\n    /**\\n        @notice It adds a list of account as signers.\\n        @param accounts addresses to add.\\n        @dev The sender must be the owner.\\n        @dev It throws a require error if the sender is not the owner.\\n     */\\n    function addSigners(address[] calldata accounts) external;\\n\\n    /**\\n     *  @notice It calls the LogicVersionRegistry to update the stored logic address for LoanData.\\n     */\\n    function updateLoanDataLogic() external;\\n\\n    /**\\n     *  @notice It calls the LogicVersionRegistry to update the stored logic address for LoanTermsConsensus.\\n     */\\n    function updateLoanTermsConsensusLogic() external;\\n\\n    /**\\n     * @notice Initializes the current contract instance setting the required parameters, if allowed\\n     * @param lendingPoolAddress Contract address of the lending pool\\n     * @param settingsAddress Contract address for the configuration of the platform\\n     * @param collateralTokenAddress Contract address for the collateral token\\n     * @param initDynamicProxyLogicAddress Address of a deployed InitializableDynamicProxy contract.\\n     */\\n    function initialize(\\n        address lendingPoolAddress,\\n        address settingsAddress,\\n        address collateralTokenAddress,\\n        address initDynamicProxyLogicAddress\\n    ) external;\\n\\n    /**\\n     * @notice This event is emitted when collateral has been deposited for the loan\\n     * @param loanID ID of the loan for which collateral was deposited\\n     * @param borrower Account address of the borrower\\n     * @param depositAmount Amount of collateral deposited\\n     */\\n    event CollateralDeposited(\\n        uint256 indexed loanID,\\n        address indexed borrower,\\n        uint256 depositAmount\\n    );\\n\\n    /**\\n     * @notice This event is emitted when collateral has been withdrawn\\n     * @param loanID ID of loan from which collateral was withdrawn\\n     * @param borrower Account address of the borrower\\n     * @param recipient Account address of the recipient\\n     * @param amount Value of collateral withdrawn\\n     */\\n    event CollateralWithdrawn(\\n        uint256 indexed loanID,\\n        address indexed borrower,\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice This event is emitted when loan terms have been successfully set\\n     * @param loanID ID of loan from which collateral was withdrawn\\n     * @param borrower Account address of the borrower\\n     * @param recipient Account address of the recipient\\n     */\\n    event LoanTermsSet(\\n        uint256 indexed loanID,\\n        address indexed borrower,\\n        address indexed recipient,\\n        uint256 nonce\\n    );\\n\\n    /**\\n     * @notice This event is emitted when a loan has been successfully taken out\\n     * @param loanID ID of loan from which collateral was withdrawn\\n     * @param borrower Account address of the borrower\\n     * @param escrow Escrow address associated to this loan\\n     * @param amountBorrowed Total amount taken out in the loan\\n     */\\n    event LoanTakenOut(\\n        uint256 indexed loanID,\\n        address indexed borrower,\\n        address indexed escrow,\\n        uint256 amountBorrowed\\n    );\\n\\n    /**\\n     * @notice This event is emitted when a loan has been successfully repaid\\n     * @param loanID ID of loan from which collateral was withdrawn\\n     * @param borrower Account address of the borrower\\n     * @param amountPaid Amount of the loan paid back\\n     * @param payer Account address of the payer\\n     * @param totalOwed Total amount of the loan to be repaid\\n     */\\n    event LoanRepaid(\\n        uint256 indexed loanID,\\n        address indexed borrower,\\n        uint256 amountPaid,\\n        address payer,\\n        uint256 totalOwed\\n    );\\n\\n    /**\\n     * @notice This event is emitted when a loan has been successfully liquidated\\n     * @param loanID ID of loan from which collateral was withdrawn\\n     * @param borrower Account address of the borrower\\n     * @param liquidator Account address of the liquidator\\n     * @param collateralOut Collateral that is sent to the liquidator\\n     * @param tokensIn Percentage of the collateral price paid by the liquidator to the lending pool\\n     */\\n    event LoanLiquidated(\\n        uint256 indexed loanID,\\n        address indexed borrower,\\n        address liquidator,\\n        int256 collateralOut,\\n        uint256 tokensIn\\n    );\\n}\\n\",\"keccak256\":\"0x5e1da908dc97209c32fe782260e8101f025e822fed0f5dda6d93554f28272df7\",\"license\":\"MIT\"},\"contracts/interfaces/loans/ILoanStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Commons\\nimport \\\"../../util/TellerCommon.sol\\\";\\n\\n// Interfaces\\nimport \\\"../SettingsInterface.sol\\\";\\nimport \\\"../LendingPoolInterface.sol\\\";\\nimport \\\"./ILoanTermsConsensus.sol\\\";\\nimport \\\"../../providers/compound/CErc20Interface.sol\\\";\\n\\n/**\\n    Getting stack too deep issues and cannot get the proper\\n    struct as a return value from calling loans() externally.\\n    So we are just providing helpers here to get individual\\n    fields on a storage pointer of the loan by loanId.\\n */\\nabstract contract ALoanStorage {\\n    /**\\n     * @notice Holds the data of all loans for the lending token.\\n     */\\n    mapping(uint256 => TellerCommon.Loan) public loans;\\n\\n    function loanTerms(uint256 loanId)\\n        public\\n        view\\n        returns (TellerCommon.LoanTerms memory)\\n    {\\n        return loan(loanId).loanTerms;\\n    }\\n\\n    function termsExpiry(uint256 loanId) public view returns (uint256) {\\n        return loan(loanId).termsExpiry;\\n    }\\n\\n    function loanStartTime(uint256 loanId) public view returns (uint256) {\\n        return loan(loanId).loanStartTime;\\n    }\\n\\n    function collateral(uint256 loanId) public view returns (uint256) {\\n        return loan(loanId).collateral;\\n    }\\n\\n    function lastCollateralIn(uint256 loanId) public view returns (uint256) {\\n        return loan(loanId).lastCollateralIn;\\n    }\\n\\n    function principalOwed(uint256 loanId) public view returns (uint256) {\\n        return loan(loanId).principalOwed;\\n    }\\n\\n    function interestOwed(uint256 loanId) public view returns (uint256) {\\n        return loan(loanId).interestOwed;\\n    }\\n\\n    function borrowedAmount(uint256 loanId) public view returns (uint256) {\\n        return loan(loanId).borrowedAmount;\\n    }\\n\\n    function escrow(uint256 loanId) public view returns (address) {\\n        return loan(loanId).escrow;\\n    }\\n\\n    function status(uint256 loanId)\\n        public\\n        view\\n        returns (TellerCommon.LoanStatus)\\n    {\\n        return loan(loanId).status;\\n    }\\n\\n    function liquidated(uint256 loanId) public view returns (bool) {\\n        return loan(loanId).liquidated;\\n    }\\n\\n    function loan(uint256 loanId)\\n        internal\\n        view\\n        returns (TellerCommon.Loan storage loan_)\\n    {\\n        loan_ = loans[loanId];\\n    }\\n}\\n\\n/**\\n * @notice This interface defines the functions to get and calculate information about loan data.\\n *\\n * @author develop@teller.finance\\n */\\ninterface ILoanStorage {\\n    /**\\n     * @notice Holds the total amount of collateral held by the contract.\\n     */\\n    function totalCollateral() external view returns (uint256);\\n\\n    /**\\n     * @notice Holds the instance of the LendingPool used by the LoanManager.\\n     */\\n    function lendingPool() external view returns (LendingPoolInterface);\\n\\n    /**\\n     * @notice Holds the lending token used for creating loans by the LoanManager and LendingPool.\\n     */\\n    function lendingToken() external view returns (address);\\n\\n    /**\\n     * @notice Holds the collateral token.\\n     */\\n    function collateralToken() external view returns (address);\\n\\n    /**\\n     * @notice Holds the Compound cToken where the underlying token matches the lending token.\\n     */\\n    function cToken() external view returns (CErc20Interface);\\n\\n    /**\\n     * @notice Holds the ID of loans taken out\\n     * @dev Also the next available loan ID\\n     */\\n    function loanIDCounter() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x60a60bec346cf3c12164228522a4bd560b3a6874db63ec3f66ad7da7996a0d24\",\"license\":\"MIT\"},\"contracts/interfaces/loans/ILoanTermsConsensus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../util/TellerCommon.sol\\\";\\n\\n/**\\n    @notice This interface defines the function to process the loan terms through the Teller protocol\\n\\n    @author develop@teller.finance\\n */\\ninterface ILoanTermsConsensus {\\n    /**\\n        @notice Processes the loan request\\n        @param request Struct of the protocol loan request\\n        @param responses List of structs of the protocol loan responses\\n        @return uint256 Interest rate\\n        @return uint256 Collateral ratio\\n        @return uint256 Maximum loan amount\\n     */\\n    function processLoanTerms(\\n        TellerCommon.LoanRequest calldata request,\\n        TellerCommon.LoanResponse[] calldata responses\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0xfbd8266f3be9973dee72079b45699be8c5043182ec54781ab18b373547d9b74b\",\"license\":\"MIT\"},\"contracts/providers/compound/CErc20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IComptroller.sol\\\";\\n\\ninterface CErc20Interface {\\n    /*** User Interface ***/\\n\\n    /**\\n        @notice The mint function transfers an asset into the protocol, which begins accumulating interest based on the current Supply Rate for the asset. The user receives a quantity of cTokens equal to the underlying tokens supplied, divided by the current Exchange Rate.\\n        @param mintAmount The amount of the asset to be supplied, in units of the underlying asset.\\n        @return 0 on success, otherwise an Error code\\n        @dev msg.sender The account which shall supply the asset, and own the minted cTokens.\\n        @dev Before supplying an asset, users must first approve the cToken to access their token balance.\\n     */\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    /**\\n        @notice The redeem function converts a specified quantity of cTokens into the underlying asset, and returns them to the user. The amount of underlying tokens received is equal to the quantity of cTokens redeemed, multiplied by the current Exchange Rate. The amount redeemed must be less than the user's Account Liquidity and the market's available liquidity.\\n        @param redeemTokens The number of cTokens to be redeemed.\\n        @return 0 on success, otherwise an Error code\\n        @dev msg.sender The account to which redeemed funds shall be transferred.\\n     */\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    /**\\n        @notice The redeem underlying function converts cTokens into a specified quantity of the underlying asset, and returns them to the user. The amount of cTokens redeemed is equal to the quantity of underlying tokens received, divided by the current Exchange Rate. The amount redeemed must be less than the user's Account Liquidity and the market's available liquidity.\\n        @param redeemAmount The amount of underlying to be redeemed.\\n        @return 0 on success, otherwise an Error code\\n        @dev msg.sender The account to which redeemed funds shall be transferred.\\n     */\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    /**\\n        @notice The borrow function transfers an asset from the protocol to the user, and creates a borrow balance which begins accumulating interest based on the Borrow Rate for the asset. The amount borrowed must be less than the user's Account Liquidity and the market's available liquidity.\\n        @param borrowAmount The amount of the underlying asset to be borrowed.\\n        @return 0 on success, otherwise an Error code\\n        @dev msg.sender The account to which borrowed funds shall be transferred.\\n     */\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    /**\\n        @notice The repay function transfers an asset into the protocol, reducing the user's borrow balance.\\n        @param repayAmount The amount of the underlying borrowed asset to be repaid. A value of -1 (i.e. 2^256 - 1) can be used to repay the full amount.\\n        @return 0 on success, otherwise an Error code\\n        @dev msg.sender The account which borrowed the asset, and shall repay the borrow.\\n        @dev Before repaying an asset, users must first approve the cToken to access their token balance.\\n     */\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    /**\\n        @notice The repay function transfers an asset into the protocol, reducing the target user's borrow balance.\\n        @param borrower The account which borrowed the asset to be repaid.\\n        @param repayAmount The amount of the underlying borrowed asset to be repaid. A value of -1 (i.e. 2^256 - 1) can be used to repay the full amount.\\n        @return 0 on success, otherwise an Error code\\n        @dev msg.sender The account which shall repay the borrow.\\n        @dev Before repaying an asset, users must first approve the cToken to access their token balance.\\n     */\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount)\\n        external\\n        returns (uint256);\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint256 addAmount) external returns (uint256);\\n\\n    /** End Admin Functions */\\n\\n    function underlying() external view returns (address);\\n\\n    /**\\n        @notice Each cToken is convertible into an ever increasing quantity of the underlying asset, as interest accrues in the market. The exchange rate between a cToken and the underlying asset is\\n        equal to: exchangeRate = (getCash() + totalBorrows() - totalReserves()) / totalSupply()\\n        @return The current exchange rate as an unsigned integer, scaled by 1e18.\\n     */\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n        @notice The user's underlying balance, representing their assets in the protocol, is equal to the user's cToken balance multiplied by the Exchange Rate.\\n        @param account The account to get the underlying balance of.\\n        @return The amount of underlying currently owned by the account.\\n     */\\n    function balanceOfUnderlying(address account) external returns (uint256);\\n\\n    function comptroller() external view returns (IComptroller);\\n}\\n\",\"keccak256\":\"0x9491e46d10dac839d96ec682109ff8c7cee1f51c3547b17716fc9c666850ad83\",\"license\":\"MIT\"},\"contracts/providers/compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IComptroller {\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens)\\n        external\\n        returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    function claimComp(address holder) external;\\n\\n    function claimComp(address holder, address[] calldata cTokens) external;\\n\\n    function claimComp(\\n        address[] calldata holders,\\n        address[] calldata cTokens,\\n        bool borrowers,\\n        bool suppliers\\n    ) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n\\n    function getCompAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x495d8bb746a524fea6ddc4286c955d7a0160718bf662456330a9d6d14b8a5da9\",\"license\":\"MIT\"},\"contracts/providers/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n    @notice This interface defines the different functions available for a UniswapV2Router.\\n    @author develop@teller.finance\\n */\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    /**\\n        @notice It returns the address of the canonical WETH address;\\n    */\\n    function WETH() external pure returns (address);\\n\\n    /**\\n        @notice Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path. The first element of path is the input token, the last is the output token, and any intermediate elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\\n        @param amountIn The amount of input tokens to send.\\n        @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n        @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\\n        @param to Recipient of the output tokens.\\n        @param deadline Unix timestamp after which the transaction will revert.\\n        @return amounts The input token amount and all subsequent output token amounts.\\n        @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\\n     */\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    /**\\n        @notice Swaps an exact amount of tokens for as much ETH as possible, along the route determined by the path. The first element of path is the input token, the last must be WETH, and any intermediate elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\\n        @param amountIn The amount of input tokens to send.\\n        @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n        @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\\n        @param to Recipient of the ETH.\\n        @param deadline Unix timestamp after which the transaction will revert.\\n        @return amounts The input token amount and all subsequent output token amounts.\\n        @dev If the to address is a smart contract, it must have the ability to receive ETH.\\n     */\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    /**\\n        @notice Swaps an exact amount of ETH for as many output tokens as possible, along the route determined by the path. The first element of path must be WETH, the last is the output token, and any intermediate elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\\n        @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n        @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\\n        @param to Recipient of the output tokens.\\n        @param deadline Unix timestamp after which the transaction will revert.\\n        @return amounts The input token amount and all subsequent output token amounts.\\n     */\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x163f02a4e068fd3073b017c7323370451437fb15351cfbd055abb5ab5577b4c5\",\"license\":\"MIT\"},\"contracts/util/AddressArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressLib.sol\\\";\\n\\n/**\\n    @notice Utility library of inline functions on the address arrays.\\n\\n    @author develop@teller.finance\\n */\\nlibrary AddressArrayLib {\\n    using AddressLib for address;\\n\\n    struct AddressArray {\\n        address[] array;\\n        mapping(address => uint256) indices;\\n    }\\n\\n    function length(AddressArray storage self) internal view returns (uint256) {\\n        return self.array.length;\\n    }\\n\\n    /**\\n      @notice It adds an address value to the array.\\n      @param self current array.\\n      @param newItem new item to add.\\n      @return index the item was added to.\\n    */\\n    function add(address[] storage self, address newItem)\\n        internal\\n        returns (uint256)\\n    {\\n        newItem.requireNotEmpty(\\\"EMPTY_ADDRESS_NOT_ALLOWED\\\");\\n        self.push(newItem);\\n        return self.length - 1;\\n    }\\n\\n    function add(AddressArray storage self, address addr)\\n        internal\\n        returns (uint256 index)\\n    {\\n        addr.requireNotEmpty(\\\"EMPTY_ADDRESS_NOT_ALLOWED\\\");\\n        (bool found, ) = getIndex(self, addr);\\n        require(!found, \\\"ADDRESS_EXISTS\\\");\\n        self.array.push(addr);\\n        index = length(self) - 1;\\n        self.indices[addr] = index;\\n    }\\n\\n    /**\\n      @notice It removes the value at the given index in an array.\\n      @param self the current array.\\n      @param index remove an item in a specific index.\\n    */\\n    function removeAt(address[] storage self, uint256 index) internal {\\n        if (index >= self.length) return;\\n\\n        if (index != self.length - 1) {\\n            self[index] = self[self.length - 1];\\n        }\\n\\n        self.pop();\\n    }\\n\\n    function remove(AddressArray storage self, uint256 index) internal {\\n        removeAt(self.array, index);\\n    }\\n\\n    function remove(AddressArray storage self, address addr) internal {\\n        (bool found, uint256 index) = getIndex(self, addr);\\n\\n        if (!found) return;\\n\\n        removeAt(self.array, index);\\n    }\\n\\n    /**\\n      @notice It gets the index for a given item.\\n      @param self the current array.\\n      @param item to get the index.\\n      @return found true if the item was found. Otherwise it returns false.\\n      @return indexAt the current index for a given item.\\n    */\\n    function getIndex(address[] storage self, address item)\\n        internal\\n        view\\n        returns (bool found, uint256 indexAt)\\n    {\\n        for (indexAt = 0; indexAt < self.length; indexAt++) {\\n            found = self[indexAt] == item;\\n            if (found) {\\n                return (found, indexAt);\\n            }\\n        }\\n        return (found, indexAt);\\n    }\\n\\n    function getIndex(AddressArray storage self, address addr)\\n        internal\\n        view\\n        returns (bool found, uint256 index)\\n    {\\n        if (self.array.length > 0) {\\n            index = self.indices[addr];\\n            found = self.array[index] == addr;\\n        }\\n    }\\n\\n    /**\\n      @notice It removes an address value from the array.\\n      @param self the current array.\\n      @param item the item to remove.\\n    */\\n    function remove(address[] storage self, address item) internal {\\n        (bool found, uint256 indexAt) = getIndex(self, item);\\n        if (!found) return;\\n\\n        removeAt(self, indexAt);\\n    }\\n}\\n\",\"keccak256\":\"0x06601aa11366e783085ad50ea3d6c626f8b938a843561f50773fb753d82a6c45\",\"license\":\"MIT\"},\"contracts/util/AddressLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Utility library of inline functions on addresses\\n *\\n * @author develop@teller.finance\\n */\\nlibrary AddressLib {\\n    address public constant ADDRESS_EMPTY = address(0x0);\\n\\n    /**\\n     * @dev Checks if this address is all 0s\\n     * @param self The address this function was called on\\n     * @return boolean\\n     */\\n    function isEmpty(address self) internal pure returns (bool) {\\n        return self == ADDRESS_EMPTY;\\n    }\\n\\n    /**\\n     * @dev Checks if this address is the same as another address\\n     * @param self The address this function was called on\\n     * @param other Address to check against itself\\n     * @return boolean\\n     */\\n    function isEqualTo(address self, address other)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return self == other;\\n    }\\n\\n    /**\\n     * @dev Checks if this address is different to another address\\n     * @param self The address this function was called on\\n     * @param other Address to check against itself\\n     * @return boolean\\n     */\\n    function isNotEqualTo(address self, address other)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return self != other;\\n    }\\n\\n    /**\\n     * @dev Checks if this address is not all 0s\\n     * @param self The address this function was called on\\n     * @return boolean\\n     */\\n    function isNotEmpty(address self) internal pure returns (bool) {\\n        return self != ADDRESS_EMPTY;\\n    }\\n\\n    /**\\n     * @dev Throws an error if address is all 0s\\n     * @param self The address this function was called on\\n     * @param message Error message if address is all 0s\\n     */\\n    function requireNotEmpty(address self, string memory message)\\n        internal\\n        pure\\n    {\\n        require(isNotEmpty(self), message);\\n    }\\n\\n    /**\\n     * @dev Throws an error if address is not the same as another address\\n     * @param self The address this function was called on\\n     * @param other The address to check against itself\\n     * @param message Error message if addresses are not the same\\n     */\\n    function requireEqualTo(\\n        address self,\\n        address other,\\n        string memory message\\n    ) internal pure {\\n        require(isEqualTo(self, other), message);\\n    }\\n\\n    /**\\n     * @dev Throws an error if address is the same as another address\\n     * @param self The address this function was called on\\n     * @param other The address to check against itself\\n     * @param message Error message if addresses are the same\\n     */\\n    function requireNotEqualTo(\\n        address self,\\n        address other,\\n        string memory message\\n    ) internal pure {\\n        require(isNotEqualTo(self, other), message);\\n    }\\n}\\n\",\"keccak256\":\"0xb2209ddc5b12d89f5024141973f9b37e734b1c9c999f6b012f73550bf309a441\",\"license\":\"MIT\"},\"contracts/util/CacheLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./AddressLib.sol\\\";\\n\\n/**\\n    @notice Utility library of inline functions on the Cache struct.\\n\\n    @author develop@teller.finance\\n */\\nlibrary CacheLib {\\n    using AddressLib for address;\\n    using Address for address;\\n\\n    enum CacheType { Address, Uint, Int, Byte, Bool }\\n\\n    /**\\n        @notice This struct manages the cache of the library instance.\\n        @param addresses A mapping of address values mapped to cache keys in bytes.\\n        @param uints A mapping of uint values mapped to cache keys names in bytes.\\n        @param ints A mapping of int values mapped to cache keys names in bytes.\\n        @param bites A mapping of bytes values mapped to cache keys names in bytes.\\n        @param bools A mapping of bool values mapped to cache keys names in bytes.\\n     */\\n\\n    struct Cache {\\n        // Mapping of cache keys names to address values.\\n        mapping(bytes32 => address) addresses;\\n        // Mapping of cache keys names to uint256 values.\\n        mapping(bytes32 => uint256) uints;\\n        // Mapping of cache keys names to int256 values.\\n        mapping(bytes32 => int256) ints;\\n        // Mapping of cache keys names to bytes32 values.\\n        mapping(bytes32 => bytes32) bites;\\n        // Mapping of cache keys names to bool values.\\n        mapping(bytes32 => bool) bools;\\n    }\\n\\n    /**\\n        @notice The constant for the initialization check\\n     */\\n    //   bytes32 private constant INITIALIZED = keccak256(\\\"Initialized\\\");\\n\\n    /**\\n        @notice Initializes the cache instance.\\n        @param self The current cache\\n     */\\n    function initialize(Cache storage self) internal {\\n        requireNotExists(self);\\n        self.bools[keccak256(\\\"Initialized\\\")] = true;\\n    }\\n\\n    /**\\n        @notice Checks whether the current cache does not, throwing an error if it does.\\n        @param self The current cache\\n     */\\n    function requireNotExists(Cache storage self) internal view {\\n        require(!exists(self), \\\"CACHE_ALREADY_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice Checks whether the current cache exists, throwing an error if the cache does not.\\n        @param self The current cache\\n     */\\n    function requireExists(Cache storage self) internal view {\\n        require(exists(self), \\\"CACHE_DOES_NOT_EXIST\\\");\\n    }\\n\\n    /**\\n        @notice Tests whether the current cache exists or not.\\n        @param self The current cache.\\n        @return bool True if the cache exists.\\n     */\\n    function exists(Cache storage self) internal view returns (bool) {\\n        return self.bools[keccak256(\\\"Initialized\\\")];\\n    }\\n\\n    /**\\n        @notice Updates the address value for a given key name.\\n        @param self The current cache\\n        @param key The key for which the address value is being updated.\\n        @param newAddress The new address being set.\\n     */\\n    function updateAddress(\\n        Cache storage self,\\n        bytes32 key,\\n        address newAddress\\n    ) internal {\\n        requireExists(self);\\n        require(self.addresses[key] != newAddress, \\\"NEW_ADDRESS_REQUIRED\\\");\\n        self.addresses[key] = newAddress;\\n    }\\n\\n    /**\\n        @notice Updates the uint value for a given key name.\\n        @param self The current cache\\n        @param key The key for which the uint value is being updated.\\n        @param newValue The new value being set.\\n     */\\n    function updateUint(\\n        Cache storage self,\\n        bytes32 key,\\n        uint256 newValue\\n    ) internal {\\n        requireExists(self);\\n        require(self.uints[key] != newValue, \\\"NEW_UINT_REQUIRED\\\");\\n        self.uints[key] = newValue;\\n    }\\n\\n    /**\\n        @notice Tests whether a given uint value is greater than the current stored value for a given key.\\n        @param self The current cache\\n        @param key The key for which the uint value is being updated.\\n        @param amount The value being tested.\\n        @return bool True if the value exceed the stored value.\\n     */\\n    function exceedsUint(\\n        Cache storage self,\\n        bytes32 key,\\n        uint256 amount\\n    ) internal view returns (bool) {\\n        requireExists(self);\\n        return amount > self.uints[key];\\n    }\\n\\n    /**\\n        @notice Updates the int value for a given key name.\\n        @param self The current cache\\n        @param key The key for which the int value is being updated.\\n        @param newValue The new value being set.\\n     */\\n    function updateInt(\\n        Cache storage self,\\n        bytes32 key,\\n        int256 newValue\\n    ) internal {\\n        requireExists(self);\\n        require(self.ints[key] != newValue, \\\"NEW_INT_REQUIRED\\\");\\n        self.ints[key] = newValue;\\n    }\\n\\n    /**\\n        @notice Updates the bytes value for a given key name.\\n        @param self The current cache\\n        @param key The key for which the bytes value is being updated.\\n        @param newBites The new value being set.\\n     */\\n    function updateBites(\\n        Cache storage self,\\n        bytes32 key,\\n        bytes32 newBites\\n    ) internal {\\n        requireExists(self);\\n        require(self.bites[key] != newBites, \\\"NEW_BYTES_REQUIRED\\\");\\n        self.bites[key] = newBites;\\n    }\\n\\n    /**\\n        @notice Updates the bool value for a given key name.\\n        @param self The current cache\\n        @param key The key for which the bool value is being updated.\\n        @param newBool The new value being set.\\n     */\\n    function updateBool(\\n        Cache storage self,\\n        bytes32 key,\\n        bool newBool\\n    ) internal {\\n        requireExists(self);\\n        require(self.bools[key] != newBool, \\\"NEW_BOOLEAN_REQUIRED\\\");\\n        self.bools[key] = newBool;\\n    }\\n\\n    /**\\n     */\\n    function clearCache(\\n        Cache storage self,\\n        bytes32[5] memory keysToClear,\\n        CacheType[5] memory keyTypes\\n    ) internal {\\n        requireExists(self);\\n        require(\\n            keysToClear.length == keyTypes.length,\\n            \\\"ARRAY_LENGTHS_MISMATCH\\\"\\n        );\\n        for (uint256 i; i <= keysToClear.length; i++) {\\n            if (keyTypes[i] == CacheType.Address) {\\n                delete self.addresses[keysToClear[i]];\\n            } else if (keyTypes[i] == CacheType.Uint) {\\n                delete self.uints[keysToClear[i]];\\n            } else if (keyTypes[i] == CacheType.Int) {\\n                delete self.ints[keysToClear[i]];\\n            } else if (keyTypes[i] == CacheType.Byte) {\\n                delete self.bites[keysToClear[i]];\\n            } else if (keyTypes[i] == CacheType.Bool) {\\n                delete self.bools[keysToClear[i]];\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x73fda00db863d2ff1008716d149b190eda91ef8c9d3e3e2083fa217c50337edc\",\"license\":\"MIT\"},\"contracts/util/LogicVersionLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n    @notice This library manages the functions for the logic version struct.\\n\\n    @author develop@teller.finance\\n */\\nlibrary LogicVersionLib {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    /**\\n        @notice It stores all the versions for a given logic.\\n        @param currentVersion the current version.\\n        @param latestVersion the latest version.\\n        @param versions mapping version to logic address.\\n        @param exists boolean to test whether this logic version exists or not.\\n     */\\n    struct LogicVersion {\\n        uint256 currentVersion;\\n        uint256 latestVersion;\\n        mapping(uint256 => address) versions;\\n        bool exists;\\n    }\\n\\n    /**\\n        @notice It creates a new logic version.\\n        @param self the current logic version instance.\\n        @param logic initial logic address.\\n     */\\n    function initialize(LogicVersion storage self, address logic) internal {\\n        requireNotExists(self);\\n        require(logic.isContract(), \\\"LOGIC_MUST_BE_CONTRACT\\\");\\n        self.currentVersion = 0;\\n        self.latestVersion = 0;\\n        self.versions[self.currentVersion] = logic;\\n        self.exists = true;\\n    }\\n\\n    /**\\n        @notice It rollbacks a logic to a previous version.\\n        @param self the current logic version instance.\\n        @param previousVersion the previous version to be used.\\n     */\\n    function rollback(LogicVersion storage self, uint256 previousVersion)\\n        internal\\n        returns (\\n            uint256 currentVersion,\\n            address previousLogic,\\n            address newLogic\\n        )\\n    {\\n        requireExists(self);\\n        require(\\n            self.currentVersion != previousVersion,\\n            \\\"CURRENT_VERSION_MUST_BE_DIFF\\\"\\n        );\\n        require(\\n            self.latestVersion >= previousVersion,\\n            \\\"VERSION_MUST_BE_LTE_LATEST\\\"\\n        );\\n        currentVersion = self.currentVersion;\\n        previousLogic = self.versions[self.currentVersion];\\n        newLogic = self.versions[previousVersion];\\n\\n        self.currentVersion = previousVersion;\\n    }\\n\\n    /**\\n        @notice Checks whether the current logic version exists or not.\\n        @dev It throws a require error if the logic version already exists.\\n        @param self the current logic version.\\n     */\\n    function requireNotExists(LogicVersion storage self) internal view {\\n        require(!self.exists, \\\"LOGIC_ALREADY_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice Checks whether the current logic version exists or not.\\n        @dev It throws a require error if the current logic version doesn't exist.\\n        @param self the current logic version.\\n     */\\n    function requireExists(LogicVersion storage self) internal view {\\n        require(self.exists, \\\"LOGIC_NOT_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice It upgrades a logic version.\\n        @dev It throws a require error if:\\n            - The new logic is equal to the current logic.\\n        @param self the current logic version.\\n        @param newLogic the new logic to set in the logic version.\\n        @return oldLogic the old logic address.\\n        @return oldVersion the old version.\\n        @return newVersion the new version.\\n     */\\n    function upgrade(LogicVersion storage self, address newLogic)\\n        internal\\n        returns (\\n            address oldLogic,\\n            uint256 oldVersion,\\n            uint256 newVersion\\n        )\\n    {\\n        requireExists(self);\\n        require(\\n            self.versions[self.currentVersion] != newLogic,\\n            \\\"NEW_LOGIC_REQUIRED\\\"\\n        );\\n        require(newLogic.isContract(), \\\"LOGIC_MUST_BE_CONTRACT\\\");\\n        oldLogic = self.versions[self.currentVersion];\\n        oldVersion = self.currentVersion;\\n        newVersion = self.latestVersion.add(1);\\n\\n        self.currentVersion = newVersion;\\n        self.latestVersion = newVersion;\\n        self.versions[newVersion] = newLogic;\\n    }\\n}\\n\",\"keccak256\":\"0x1d3ce95637a20616ce867dc76775063e12781aac5a00fd51a752b8621c36a167\",\"license\":\"MIT\"},\"contracts/util/NumbersLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Utility library for uint256 numbers\\n *\\n * @author develop@teller.finance\\n */\\nlibrary NumbersLib {\\n    using SafeMath for uint256;\\n\\n    /**\\n        @dev It represents 100% with 2 decimal places.\\n     */\\n    function ONE_HUNDRED_PERCENT() internal pure returns (uint256) {\\n        return 10000;\\n    }\\n\\n    /**\\n        @notice Returns the positive difference value of a number to another number\\n        @param self The number to return the difference value for\\n        @param other The other number to calucualte the difference against\\n        @return uint256 The difference value\\n     */\\n    function diff(uint256 self, uint256 other) internal pure returns (uint256) {\\n        return other > self ? other.sub(self) : self.sub(other);\\n    }\\n\\n    /**\\n        @notice Returns the positive percentage difference of a value to 100%\\n        @param self The number to return the percentage difference for\\n        @return uint256 The percentage difference value\\n     */\\n    function diffOneHundredPercent(uint256 self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return diff(self, ONE_HUNDRED_PERCENT());\\n    }\\n\\n    /**\\n     * @notice Returns a percentage value of a number.\\n     * @param self The number to get a percentage of.\\n     * @param percentage The percentage value to calculate with 2 decimal places (10000 = 100%).\\n     */\\n    function percent(uint256 self, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return self.mul(percentage).div(ONE_HUNDRED_PERCENT());\\n    }\\n\\n    function percent(int256 self, uint256 percentage)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        return (self * int256(percentage)) / int256(ONE_HUNDRED_PERCENT());\\n    }\\n\\n    function abs(int256 self) internal pure returns (uint256) {\\n        return self >= 0 ? uint256(self) : uint256(-1 * self);\\n    }\\n\\n    /**\\n     * @notice Returns a ratio of 2 numbers.\\n     * @param self The number to get a ratio of.\\n     * @param num The number to calculate the ratio for.\\n     * @return Ratio of 2 numbers with 2 decimal places (10000 = 100%).\\n     */\\n    function ratioOf(uint256 self, uint256 num)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return self.mul(ONE_HUNDRED_PERCENT()).div(num);\\n    }\\n}\\n\",\"keccak256\":\"0x310fd069f9f886c2f66bb134c98f2dee97c6c03d22f6468661e6d896a7fee4a4\",\"license\":\"MIT\"},\"contracts/util/NumbersList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./NumbersLib.sol\\\";\\n\\n/**\\n * @dev Utility library of inline functions on NumbersList.Values\\n *\\n * @author develop@teller.finance\\n */\\nlibrary NumbersList {\\n    using SafeMath for uint256;\\n    using NumbersLib for uint256;\\n\\n    // Holds values to calculate the threshold of a list of numbers\\n    struct Values {\\n        uint256 count; // The total number of numbers added\\n        uint256 max; // The maximum number that was added\\n        uint256 min; // The minimum number that was added\\n        uint256 sum; // The total sum of the numbers that were added\\n    }\\n\\n    /**\\n     * @dev Add to the sum while keeping track of min and max values\\n     * @param self The Value this function was called on\\n     * @param newValue Number to increment sum by\\n     */\\n    function addValue(Values memory self, uint256 newValue) internal pure {\\n        if (self.max < newValue) {\\n            self.max = newValue;\\n        }\\n        if (self.min > newValue || self.count == 0) {\\n            self.min = newValue;\\n        }\\n        self.sum = self.sum.add(newValue);\\n        self.count = self.count.add(1);\\n    }\\n\\n    /**\\n     * @param self The Value this function was called on\\n     * @return the number of times the sum has updated\\n     */\\n    function valuesCount(Values memory self) internal pure returns (uint256) {\\n        return self.count;\\n    }\\n\\n    /**\\n     * @dev Checks if the sum has been changed\\n     * @param self The Value this function was called on\\n     * @return boolean\\n     */\\n    function isEmpty(Values memory self) internal pure returns (bool) {\\n        return valuesCount(self) == 0;\\n    }\\n\\n    /**\\n     * @param self The Value this function was called on\\n     * @return the average number that was used to calculate the sum\\n     */\\n    function getAverage(Values memory self) internal pure returns (uint256) {\\n        return isEmpty(self) ? 0 : self.sum.div(valuesCount(self));\\n    }\\n\\n    /**\\n     * @dev Checks if the min and max numbers are within the acceptable tolerance\\n     * @param self The Value this function was called on\\n     * @param tolerancePercentage Acceptable tolerance percentage as a whole number\\n     * The percentage should be entered with 2 decimal places. e.g. 2.5% should be entered as 250.\\n     * @return boolean\\n     */\\n    function isWithinTolerance(Values memory self, uint256 tolerancePercentage)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (isEmpty(self)) {\\n            return false;\\n        }\\n        uint256 average = getAverage(self);\\n        uint256 toleranceAmount = average.percent(tolerancePercentage);\\n\\n        uint256 minTolerance = average.sub(toleranceAmount);\\n        if (self.min < minTolerance) {\\n            return false;\\n        }\\n\\n        uint256 maxTolerance = average.add(toleranceAmount);\\n        if (self.max > maxTolerance) {\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xb724bee2331e49b0b74ad98d05c37c043f39e7abfe72a31d905fb0b548eaff05\",\"license\":\"MIT\"},\"contracts/util/PlatformSettingsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n    @notice Utility library of inline functions on the PlatformSetting struct.\\n\\n    @author develop@teller.finance\\n */\\nlibrary PlatformSettingsLib {\\n    /**\\n        It defines a platform settings. It includes: value, min, and max values.\\n     */\\n    struct PlatformSetting {\\n        uint256 value;\\n        uint256 min;\\n        uint256 max;\\n        bool exists;\\n    }\\n\\n    /**\\n        @notice It creates a new platform setting given a name, min and max values.\\n        @param value initial value for the setting.\\n        @param min min value allowed for the setting.\\n        @param max max value allowed for the setting.\\n     */\\n    function initialize(\\n        PlatformSetting storage self,\\n        uint256 value,\\n        uint256 min,\\n        uint256 max\\n    ) internal {\\n        requireNotExists(self);\\n        require(value >= min, \\\"VALUE_MUST_BE_GTE_MIN_VALUE\\\");\\n        require(value <= max, \\\"VALUE_MUST_BE_LTE_MAX_VALUE\\\");\\n        self.value = value;\\n        self.min = min;\\n        self.max = max;\\n        self.exists = true;\\n    }\\n\\n    /**\\n        @notice Checks whether the current platform setting exists or not.\\n        @dev It throws a require error if the platform setting already exists.\\n        @param self the current platform setting.\\n     */\\n    function requireNotExists(PlatformSetting storage self) internal view {\\n        require(!self.exists, \\\"PLATFORM_SETTING_ALREADY_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice Checks whether the current platform setting exists or not.\\n        @dev It throws a require error if the current platform setting doesn't exist.\\n        @param self the current platform setting.\\n     */\\n    function requireExists(PlatformSetting storage self) internal view {\\n        require(self.exists, \\\"PLATFORM_SETTING_NOT_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice It updates a current platform setting.\\n        @dev It throws a require error if:\\n            - The new value is equal to the current value.\\n            - The new value is not lower than the max value.\\n            - The new value is not greater than the min value\\n        @param self the current platform setting.\\n        @param newValue the new value to set in the platform setting.\\n     */\\n    function update(PlatformSetting storage self, uint256 newValue)\\n        internal\\n        returns (uint256 oldValue)\\n    {\\n        requireExists(self);\\n        require(self.value != newValue, \\\"NEW_VALUE_REQUIRED\\\");\\n        require(newValue >= self.min, \\\"NEW_VALUE_MUST_BE_GTE_MIN_VALUE\\\");\\n        require(newValue <= self.max, \\\"NEW_VALUE_MUST_BE_LTE_MAX_VALUE\\\");\\n        oldValue = self.value;\\n        self.value = newValue;\\n    }\\n\\n    /**\\n        @notice It removes a current platform setting.\\n        @param self the current platform setting to remove.\\n     */\\n    function remove(PlatformSetting storage self) internal {\\n        requireExists(self);\\n        self.value = 0;\\n        self.min = 0;\\n        self.max = 0;\\n        self.exists = false;\\n    }\\n}\\n\",\"keccak256\":\"0x5e2627596ee5335af8702afc01828cbd110cb897474a3ec20ddaa2eef4e239c3\",\"license\":\"MIT\"},\"contracts/util/TellerCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./NumbersList.sol\\\";\\n\\n/**\\n * @dev Library of structs common across the Teller protocol\\n *\\n * @author develop@teller.finance\\n */\\nlibrary TellerCommon {\\n    enum LoanStatus { NonExistent, TermsSet, Active, Closed }\\n\\n    /**\\n        @notice Represents a user signature\\n        @param v The recovery identifier represented by the last byte of a ECDSA signature as an int\\n        @param r The random point x-coordinate of the signature respresented by the first 32 bytes of the generated ECDSA signature\\n        @param s The signature proof represented by the second 32 bytes of the generated ECDSA signature\\n     */\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /**\\n        @notice Borrower request object to take out a loan\\n        @param borrower The wallet address of the borrower\\n        @param recipient The address where funds will be sent, only applicable in over collateralized loans\\n        @param consensusAddress The address of the Teller loan consensus contract to which the request should be sent\\n        @param requestNonce The nonce of the borrower wallet address required for authentication\\n        @param amount The amount of tokens requested by the borrower for the loan\\n        @param duration The length of time in seconds that the loan has been requested for\\n        @param requestTime The timestamp at which the loan was requested\\n     */\\n    struct LoanRequest {\\n        address payable borrower;\\n        address recipient;\\n        address consensusAddress;\\n        uint256 requestNonce;\\n        uint256 amount;\\n        uint256 duration;\\n        uint256 requestTime;\\n    }\\n\\n    /**\\n        @notice Borrower response object to take out a loan\\n        @param signer The wallet address of the signer validating the interest request of the lender\\n        @param consensusAddress The address of the Teller loan consensus contract to which the request should be sent\\n        @param responseTime The timestamp at which the response was sent\\n        @param interestRate The signed interest rate generated by the signer's Credit Risk Algorithm (CRA)\\n        @param collateralRatio The ratio of collateral to loan amount that is generated by the signer's Credit Risk Algorithm (CRA)\\n        @param maxLoanAmount The largest amount of tokens that can be taken out in the loan by the borrower\\n        @param signature The signature generated by the signer in the format of the above Signature struct\\n     */\\n    struct LoanResponse {\\n        address signer;\\n        address consensusAddress;\\n        uint256 responseTime;\\n        uint256 interestRate;\\n        uint256 collateralRatio;\\n        uint256 maxLoanAmount;\\n        Signature signature;\\n    }\\n\\n    /**\\n        @notice Represents loan terms based on consensus values\\n        @param interestRate The consensus value for the interest rate based on all the loan responses from the signers\\n        @param collateralRatio The consensus value for the ratio of collateral to loan amount required for the loan, based on all the loan responses from the signers\\n        @param maxLoanAmount The consensus value for the largest amount of tokens that can be taken out in the loan, based on all the loan responses from the signers\\n     */\\n    struct AccruedLoanTerms {\\n        NumbersList.Values interestRate;\\n        NumbersList.Values collateralRatio;\\n        NumbersList.Values maxLoanAmount;\\n    }\\n\\n    /**\\n        @notice Represents the terms of a loan based on the consensus of a LoanRequest\\n        @param borrower The wallet address of the borrower\\n        @param recipient The address where funds will be sent, only applicable in over collateralized loans\\n        @param interestRate The consensus interest rate calculated based on all signer loan responses\\n        @param collateralRatio The consensus ratio of collateral to loan amount calculated based on all signer loan responses\\n        @param maxLoanAmount The consensus largest amount of tokens that can be taken out in the loan by the borrower, calculated based on all signer loan responses\\n        @param duration The consensus length of loan time, calculated based on all signer loan responses\\n     */\\n    struct LoanTerms {\\n        address payable borrower;\\n        address recipient;\\n        uint256 interestRate;\\n        uint256 collateralRatio;\\n        uint256 maxLoanAmount;\\n        uint256 duration;\\n    }\\n\\n    /**\\n        @notice Data per borrow as struct\\n        @param id The id of the loan for internal tracking\\n        @param loanTerms The loan terms returned by the signers\\n        @param termsExpiry The timestamp at which the loan terms expire, after which if the loan is not yet active, cannot be taken out\\n        @param loanStartTime The timestamp at which the loan became active\\n        @param collateral The total amount of collateral deposited by the borrower to secure the loan\\n        @param lastCollateralIn The amount of collateral that was last deposited by the borrower to keep the loan active\\n        @param principalOwed The total amount of the loan taken out by the borrower, reduces on loan repayments\\n        @param interestOwed The total interest owed by the borrower for the loan, reduces on loan repayments\\n        @param borrowedAmount The total amount of the loan size taken out\\n        @param escrow The address of the escrow contract that holds the funds taken out in the loan on behalf of the borrower\\n        @param status The status of the loan currently based on the LoanStatus enum - NonExistent, TermsSet, Active, Closed\\n        @param liquidated Flag marking if the loan has been liquidated or not\\n     */\\n    struct Loan {\\n        uint256 id;\\n        LoanTerms loanTerms;\\n        uint256 termsExpiry;\\n        uint256 loanStartTime;\\n        uint256 collateral;\\n        uint256 lastCollateralIn;\\n        uint256 principalOwed;\\n        uint256 interestOwed;\\n        uint256 borrowedAmount;\\n        address escrow;\\n        LoanStatus status;\\n        bool liquidated;\\n    }\\n\\n    /**\\n        @notice This struct defines the dapp address and data to execute in the callDapp function.\\n        @dev It is executed using a delegatecall in the Escrow contract.\\n        @param exists Flag marking whether the dapp is a Teller registered address\\n        @param unsecured Flag marking if the loan allowed to be used in the dapp is a secured, or unsecured loan\\n     */\\n    struct Dapp {\\n        bool exists;\\n        bool unsecured;\\n    }\\n\\n    /**\\n        @notice This struct defines the dapp address and data to execute in the callDapp function.\\n        @dev It is executed using a delegatecall in the Escrow contract.\\n        @param location The proxy contract address for the dapp that will be used by the Escrow contract delegatecall\\n        @param data The encoded function signature with parameters for the dapp method in bytes that will be sent in the Escrow delegatecall\\n     */\\n    struct DappData {\\n        address location;\\n        bytes data;\\n    }\\n\\n    /**\\n        @notice This struct defines a market in the platform.\\n        @dev It is used by the MarketFactory contract.\\n        @param loans The address for the Teller LoanManager contract that is being used for a market\\n        @param lendingPool The address for the Teller Lending Pool contract that is being used for a market\\n        @param loanTermsConsensus The address for the Teller Loan Terms Consensus contract that is being used for a market\\n        @param exists Flag marking if the market is defined on the platform or not\\n     */\\n    struct Market {\\n        address loans;\\n        address lendingPool;\\n        address loanTermsConsensus;\\n        bool exists;\\n    }\\n\\n    /**\\n        @notice This struct is used to register new logic versions.\\n        @param logic The address for the new contract holding the logic.\\n        @param logicName The name for the logic to be stored as.\\n     */\\n    struct CreateLogicVersionRequest {\\n        address logic;\\n        bytes32 logicName;\\n    }\\n\\n    /**\\n        @notice This struct is used to upgrade logic versions.\\n        @param logic The new logic address to upgrade proxy to.\\n        @param logicName The name for the logic to be stored as.\\n        @param proxy The (optional) DynamicUpgradeable proxy address to attempt to directly upgrade.\\n     */\\n    struct UpgradeLogicVersionRequest {\\n        address logic;\\n        bytes32 logicName;\\n        address proxy;\\n    }\\n}\\n\",\"keccak256\":\"0xa90e2a78f0d767c9cea8ce6b0f0a1a359fcaebb63e7fc6393c7dceb443ccc791\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061471d806100206000396000f3fe6080604052600436106103355760003560e01c8063854768c0116101ab578063d8aed145116100f7578063e949756111610095578063eee8b7ff1161006f578063eee8b7ff14610b44578063f8c8765e14610b71578063fdf6e4ea14610b91578063fec6889414610bc157610335565b8063e949756114610ae4578063eb12d61e14610b04578063eb78303b14610b2457610335565b8063e154e9a4116100d1578063e154e9a41461099f578063e1ec3c68146109b9578063e6a901c114610aa4578063e8906a2d14610ac457610335565b8063d8aed1451461094a578063db24c6831461096a578063e06174e41461097f57610335565b8063b2016bd411610164578063c49d99fd1161013e578063c49d99fd146108bc578063c9e02bef146108d1578063ccdd9f5d146108f1578063d68ff1911461091157610335565b8063b2016bd414610848578063b3076d0014610868578063b67805071461088857610335565b8063854768c01461076657806386f0a62114610786578063a59a9973146107a6578063aaaca558146107c6578063b06164cf146107e6578063b10b8a2c1461081b57610335565b806342d21ef71161028557806359c697f4116102235780635ebc6334116101fd5780635ebc6334146106cb57806369e527da146106eb57806372e113271461070b578063767a7b051461074657610335565b806359c697f4146106415780635ca879d7146106615780635ea2a2cf1461069157610335565b80634f8654bc1161025f5780634f8654bc146105b657806351348454146105db57806352d07b3b146105f157806355dbd8eb1461062157610335565b806342d21ef7146105295780634a26a71b146105705780634ac8eb5f146105a057610335565b8063226546a4116102f257806338c72f69116102cc57806338c72f69146104785780633ab01c0a146104ac5780633b1f18dd146104d95780633b9293001461050957610335565b8063226546a41461040a5780632c26486d1461042a57806337c3eedc1461044057610335565b806302bc2cdb1461033a57806304b0c79b1461035c57806310780bed1461039f5780631a74856b146103cf5780631de2e883146103e25780631eb83d54146103f5575b600080fd5b34801561034657600080fd5b5061035a610355366004614218565b610bf1565b005b34801561036857600080fd5b5061038c610377366004614200565b6000908152600f60205260409020600d015490565b6040519081526020015b60405180910390f35b3480156103ab57600080fd5b5061038c6103ba366004614200565b6000908152600f60205260409020600c015490565b61035a6103dd366004613eba565b61131e565b61035a6103f036600461406c565b6114ee565b34801561040157600080fd5b5061035a611a0f565b34801561041657600080fd5b5061038c610425366004614200565b611ade565b34801561043657600080fd5b5061038c60015481565b34801561044c57600080fd5b50600054610460906001600160a01b031681565b6040516001600160a01b039091168152602001610396565b34801561048457600080fd5b5061038c7f698a3c07617049c2f15d3f96333af3d44fbf5976ff9ca8e1df2e46ac61ce155a81565b3480156104b857600080fd5b506104cc6104c7366004613e2d565b611b4d565b60405161039691906143d6565b3480156104e557600080fd5b5061038c6104f4366004614200565b6000908152600f602052604090206009015490565b34801561051557600080fd5b5061038c610524366004614200565b611ba2565b34801561053557600080fd5b50610563610544366004614200565b6000908152600f60205260409020600e0154600160a01b900460ff1690565b60405161039691906143e9565b34801561057c57600080fd5b5061038c61058b366004614200565b6000908152600f602052604090206008015490565b3480156105ac57600080fd5b5061038c60105481565b3480156105c257600080fd5b506002546104609061010090046001600160a01b031681565b3480156105e757600080fd5b5061038c60165481565b3480156105fd57600080fd5b5061038c61060c366004614200565b6000908152600f60205260409020600b015490565b34801561062d57600080fd5b5061035a61063c366004613db6565b611bf3565b34801561064d57600080fd5b5061038c61065c366004614200565b611c72565b34801561066d57600080fd5b5061068161067c366004614200565b611cc4565b6040519015158152602001610396565b34801561069d57600080fd5b506106816106ac366004614200565b6000908152600f60205260409020600e0154600160a81b900460ff1690565b3480156106d757600080fd5b5061038c6106e6366004614200565b611d2c565b3480156106f757600080fd5b50601454610460906001600160a01b031681565b34801561071757600080fd5b5061072b610726366004614200565b611d7e565b60408051938452602084019290925290820152606001610396565b34801561075257600080fd5b5061035a610761366004614218565b611df8565b34801561077257600080fd5b50610681610781366004614200565b612145565b34801561079257600080fd5b5061038c6107a1366004614200565b612197565b3480156107b257600080fd5b50601154610460906001600160a01b031681565b3480156107d257600080fd5b50601254610460906001600160a01b031681565b3480156107f257600080fd5b50610806610801366004614200565b6121e9565b60408051928352602083019190915201610396565b34801561082757600080fd5b5061083b610836366004614200565b61225f565b6040516103969190614565565b34801561085457600080fd5b50601354610460906001600160a01b031681565b34801561087457600080fd5b50601c54610460906001600160a01b031681565b34801561089457600080fd5b5061038c7f87ff11116505b975498f87d319b3b9d631d98e48aa48a4655041faecc8d805ac81565b3480156108c857600080fd5b5061035a612310565b3480156108dd57600080fd5b506106816108ec366004614200565b6123cf565b3480156108fd57600080fd5b5061035a61090c366004614200565b612421565b34801561091d57600080fd5b5061046061092c366004614200565b6000908152600f60205260409020600e01546001600160a01b031690565b34801561095657600080fd5b5061035a610965366004614218565b6126fa565b34801561097657600080fd5b5061035a612aec565b34801561098b57600080fd5b50600454610460906001600160a01b031681565b3480156109ab57600080fd5b506002546106819060ff1681565b3480156109c557600080fd5b50610a8c6109d4366004614200565b600f602090815260009182526040918290208054835160c08101855260018301546001600160a01b03908116825260028401548116948201949094526003830154948101949094526004820154606085015260058201546080850152600682015460a0850152600782015460088301546009840154600a850154600b860154600c870154600d880154600e9098015496999895979496939592949193909281169060ff600160a01b8204811691600160a81b9004168c565b6040516103969c9b9a99989796959493929190614573565b348015610ab057600080fd5b50610681610abf366004614200565b612bab565b348015610ad057600080fd5b5061035a610adf366004613eee565b612bfd565b348015610af057600080fd5b5061038c610aff366004614218565b612cc8565b348015610b1057600080fd5b5061035a610b1f366004613db6565b612d3f565b348015610b3057600080fd5b5061072b610b3f36600461411a565b612e04565b348015610b5057600080fd5b50610b64610b5f366004613db6565b612e84565b6040516103969190614392565b348015610b7d57600080fd5b5061035a610b8c366004613dd2565b612ef0565b348015610b9d57600080fd5b5061038c610bac366004614200565b6000908152600f60205260409020600a015490565b348015610bcd57600080fd5b5061038c610bdc366004614200565b6000908152600f602052604090206007015490565b610bf961313d565b15610c0657610c06611a0f565b601b54600160a01b900460ff16610c385760405162461bcd60e51b8152600401610c2f90614453565b60405180910390fd5b601b805460ff60a01b19169055610c4d613165565b15610c6a5760405162461bcd60e51b8152600401610c2f90614427565b6011546001600160a01b0316610c7f816131ed565b15610c9c5760405162461bcd60e51b8152600401610c2f906143f7565b60048054604051636a3a61cd60e01b815233928101929092526001600160a01b031690636a3a61cd9060240160006040518083038186803b158015610ce057600080fd5b505afa158015610cf4573d6000803e3d6000fd5b5050506000848152600f60205260409020600101546001600160a01b031633149050610d515760405162461bcd60e51b815260206004820152600c60248201526b2727aa2fa127a92927aba2a960a11b6044820152606401610c2f565b60016000848152600f60205260409020600e0154600160a01b900460ff166003811115610d8e57634e487b7160e01b600052602160045260246000fd5b14610dca5760405162461bcd60e51b815260206004820152600c60248201526b1313d05397d393d517d4d15560a21b6044820152606401610c2f565b6000838152600f6020526040902060070154421115610e205760405162461bcd60e51b81526020600482015260126024820152711313d05397d511549354d7d156141254915160721b6044820152606401610c2f565b610e2982613270565b610e755760405162461bcd60e51b815260206004820152601a60248201527f535550504c595f544f5f444542545f455843454544535f4d41580000000000006044820152606401610c2f565b6000838152600f6020526040902060050154821115610eca5760405162461bcd60e51b815260206004820152601160248201527013505617d313d05397d15610d151511151607a1b6044820152606401610c2f565b6000610ed584611d7e565b506000868152600f60205260409020600901549092508213159050610f3c5760405162461bcd60e51b815260206004820152601860248201527f4d4f52455f434f4c4c41544552414c5f524551554952454400000000000000006044820152606401610c2f565b610fcc600460009054906101000a90046001600160a01b03166001600160a01b03166393d748246040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8d57600080fd5b505afa158015610fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc59190614004565b4290613378565b6000858152600f60205260409020600a0154111561102c5760405162461bcd60e51b815260206004820152601d60248201527f434f4c4c41544552414c5f4445504f53495445445f524543454e544c590000006044820152606401610c2f565b6000848152600f60205260409020600d8101849055600b018390556110518484612cc8565b6000858152600f60205260408120600c810192909255600e8201805460ff60a01b1916600160a11b1790554260089092019190915580611090866123cf565b905080156110fb576000868152600f60205260409020600201546001600160a01b0316156110d8576000868152600f60205260409020600201546001600160a01b03166110f4565b6000868152600f60205260409020600101546001600160a01b03165b9150611135565b61110486613384565b6000878152600f60205260409020600e0180546001600160a01b0319166001600160a01b0392909216918217905591505b601154604051631397424760e11b8152600481018790526001600160a01b0384811660248301529091169063272e848e90604401600060405180830381600087803b15801561118357600080fd5b505af1158015611197573d6000803e3d6000fd5b505050508061129d57604080518082018252601b81527f455343524f575f434f4e54524143545f4e4f545f444546494e454400000000006020808301919091526000898152600f90915291909120600e01546111fe916001600160a01b03909116906134f5565b6000868152600f602052604090819020600e8101546004805460115460125460019095015495516333e1a22360e01b81526001600160a01b039283169381019390935281166024830152604482018b90529283166064820152928216608484015216906333e1a2239060a401600060405180830381600087803b15801561128457600080fd5b505af1158015611298573d6000803e3d6000fd5b505050505b6000868152600f602052604090819020600e81015460019091015491516001600160a01b03918216929091169088907f85b5516a17ce775661a4b967b1fb30c852678f6598d86d9f3c99b7b60ff2d0ce906112fb908a815260200190565b60405180910390a45050601b805460ff60a01b1916600160a01b17905550505050565b61132661313d565b1561133357611333611a0f565b8161133d81612bab565b6113825760405162461bcd60e51b81526020600482015260166024820152751313d05397d393d517d050d512559157d3d497d4d15560521b6044820152606401610c2f565b61138a613165565b156113a75760405162461bcd60e51b8152600401610c2f90614427565b6011546001600160a01b03166113bc816131ed565b156113d95760405162461bcd60e51b8152600401610c2f906143f7565b60048054604051636a3a61cd60e01b815233928101929092526001600160a01b031690636a3a61cd9060240160006040518083038186803b15801561141d57600080fd5b505afa158015611431573d6000803e3d6000fd5b5050506000858152600f6020908152604091829020600101548251808401909352601983527f424f52524f5745525f4c4f414e5f49445f4d49534d41544348000000000000009183019190915261149792506001600160a01b038881169291169061351d565b600083116114dd5760405162461bcd60e51b815260206004820152601360248201527243414e4e4f545f4445504f5349545f5a45524f60681b6044820152606401610c2f565b6114e78484613550565b5050505050565b6114f661313d565b1561150357611503611a0f565b601b54600160a01b900460ff1661152c5760405162461bcd60e51b8152600401610c2f90614453565b601b805460ff60a01b19169055611541613165565b1561155e5760405162461bcd60e51b8152600401610c2f90614427565b61156d368590038501856140ff565b6000600460009054906101000a90046001600160a01b03166001600160a01b03166354409f2b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115bd57600080fd5b505afa1580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f59190614004565b90508160a0015181101561164b5760405162461bcd60e51b815260206004820152601d60248201527f4455524154494f4e5f455843454544535f4d41585f4455524154494f4e0000006044820152606401610c2f565b601c546012546080840151604051631a7fddd160e21b81526001600160a01b039283166004820152602481019190915260009291909116906369ff77449060440160206040518083038186803b1580156116a457600080fd5b505afa1580156116b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dc9190613f5e565b9050801561172c5760405162461bcd60e51b815260206004820152601960248201527f414d4f554e545f455843454544535f4d41585f414d4f554e54000000000000006044820152606401610c2f565b6117398360800151613270565b6117855760405162461bcd60e51b815260206004820152601a60248201527f535550504c595f544f5f444542545f455843454544535f4d41580000000000006044820152606401610c2f565b60048054604051636a3a61cd60e01b815233928101929092526001600160a01b031690636a3a61cd9060240160006040518083038186803b1580156117c957600080fd5b505afa1580156117dd573d6000803e3d6000fd5b506117ef925050506020880188613db6565b6001600160a01b0316336001600160a01b0316146118445760405162461bcd60e51b81526020600482015260126024820152712727aa2fa627a0a72fa922a8aaa2a9aa22a960711b6044820152606401610c2f565b600080806118b361185a368c90038c018c6140ff565b8a8a808060200260200160405190810160405280939291908181526020016000905b828210156118a95761189a61012083028601368190038101906141e4565b8152602001906001019061187c565b5050505050612e04565b9194509250905060006118d66118ce368d90038d018d6140ff565b85858561361d565b905087156118e8576118e88189613550565b6119096118fb60408d0160208e01613db6565b6001600160a01b0316151590565b1561196357611917816123cf565b6119635760405162461bcd60e51b815260206004820152601960248201527f554e4445525f434f4c4c5f574954485f524543495049454e54000000000000006044820152606401610c2f565b6015600061197460208e018e613db6565b6001600160a01b03908116825260208083019390935260409182016000908120805460018101825590825284822001859055848152600f845282902060020154915160608f01358152911691339184917f40ed10b06bb9055e12a66cea10237c57a55e5830f61c79384d78f338f44d9e5e910160405180910390a45050601b805460ff60a01b1916600160a01b179055505050505050505050565b60008054600154604051638b51f58b60e01b81526001600160a01b0390921691638b51f58b91611a459160040190815260200190565b60606040518083038186803b158015611a5d57600080fd5b505afa158015611a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a959190614239565b6002549093506001600160a01b0380851661010090920416149150611ad790505760028054610100600160a81b0319166101006001600160a01b038416021790555b5043600355565b601a54604051602481018390526000918291611b30916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b031663089951a960e21b17905261385e565b905080806020019051810190611b469190614004565b9392505050565b6060333014611b8f5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa1a0a62622a960911b6044820152606401610c2f565b611b998383613927565b90505b92915050565b601a54604051602481018390526000918291611b30916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b0316623b929360e81b17905261385e565b6000546001600160a01b03163314611c465760405162461bcd60e51b81526020600482015260166024820152754d5553545f42455f4c4f4749435f524547495354525960501b6044820152606401610c2f565b600280546001600160a01b0390921661010002610100600160a81b031990921691909117905543600355565b601a54604051602481018390526000918291611b30916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b0316631671a5fd60e21b17905261385e565b601a54604051602481018390526000918291611d16916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b0316635ca879d760e01b17905261385e565b905080806020019051810190611b469190613f5e565b601a54604051602481018390526000918291611b30916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b03166317af18cd60e21b17905261385e565b601a5460405160248101839052600091829182918291611dd4916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b03166372e1132760e01b17905261385e565b905080806020019051810190611dea919061401c565b935093509350509193909250565b611e0061313d565b15611e0d57611e0d611a0f565b601b54600160a01b900460ff16611e365760405162461bcd60e51b8152600401610c2f90614453565b601b805460ff60a01b1916905580611e4d81612bab565b611e925760405162461bcd60e51b81526020600482015260166024820152751313d05397d393d517d050d512559157d3d497d4d15560521b6044820152606401610c2f565b611e9a613165565b15611eb75760405162461bcd60e51b8152600401610c2f90614427565b6011546001600160a01b0316611ecc816131ed565b15611ee95760405162461bcd60e51b8152600401610c2f906143f7565b60048054604051636a3a61cd60e01b815233928101929092526001600160a01b031690636a3a61cd9060240160006040518083038186803b158015611f2d57600080fd5b505afa158015611f41573d6000803e3d6000fd5b5050506000848152600f60205260409020600101546001600160a01b031633149050611fa85760405162461bcd60e51b815260206004820152601660248201527521a0a62622a92fa227a2a9a72a2fa7aba72fa627a0a760511b6044820152606401610c2f565b60008411611fef5760405162461bcd60e51b815260206004820152601460248201527343414e4e4f545f57495448445241575f5a45524f60601b6044820152606401610c2f565b60026000848152600f60205260409020600e0154600160a01b900460ff16600381111561202c57634e487b7160e01b600052602160045260246000fd5b14156120c057600061203d84611d7e565b5091505060008113156120ba576000848152600f60205260408120600901546120669083613378565b9050858110156120b85760405162461bcd60e51b815260206004820152601a60248201527f434f4c4c41544552414c5f414d4f554e545f544f4f5f484947480000000000006044820152606401610c2f565b505b50612121565b6000838152600f60205260409020600901548411156121215760405162461bcd60e51b815260206004820152601b60248201527f434f4c4c41544552414c5f414d4f554e545f4e4f545f4d4154434800000000006044820152606401610c2f565b61212c83853361399b565b5050601b805460ff60a01b1916600160a01b1790555050565b601a54604051602481018390526000918291611d16916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b03166302151da360e61b17905261385e565b601a54604051602481018390526000918291611b30916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b03166386f0a62160e01b17905261385e565b601a54604051602481018390526000918291829161223f916001600160a01b039091169060440160408051601f198184030181529190526020810180516001600160e01b031663b06164cf60e01b17905261385e565b9050808060200190518101906122559190614049565b9250925050915091565b6122aa6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b6000828152600f602052604090206040805160c08101825260018301546001600160a01b0390811682526002840154166020820152600383015491810191909152600482015460608201526005820154608082015260069091015460a082015292915050565b600054604051638b51f58b60e01b81527f698a3c07617049c2f15d3f96333af3d44fbf5976ff9ca8e1df2e46ac61ce155a60048201526001600160a01b0390911690638b51f58b9060240160606040518083038186803b15801561237357600080fd5b505afa158015612387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ab9190614239565b601a80546001600160a01b0319166001600160a01b03929092169190911790555050565b601a54604051602481018390526000918291611d16916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b031663c9e02bef60e01b17905261385e565b61242961313d565b1561243657612436611a0f565b601b54600160a01b900460ff1661245f5760405162461bcd60e51b8152600401610c2f90614453565b601b805460ff60a01b191690558060026000828152600f60205260409020600e0154600160a01b900460ff1660038111156124aa57634e487b7160e01b600052602160045260246000fd5b146124e95760405162461bcd60e51b815260206004820152600f60248201526e4c4f414e5f4e4f545f41435449564560881b6044820152606401610c2f565b6124f1613165565b1561250e5760405162461bcd60e51b8152600401610c2f90614427565b6011546001600160a01b0316612523816131ed565b156125405760405162461bcd60e51b8152600401610c2f906143f7565b61254983611cc4565b6125955760405162461bcd60e51b815260206004820152601760248201527f444f45534e545f4e4545445f4c49515549444154494f4e0000000000000000006044820152606401610c2f565b60006125a084611d2c565b6000858152600f60205260408120600c810154600b9091015492935090916125c791613a01565b6011546000878152600f602052604090819020600b810154600c90910154915163b1e8f8ef60e01b8152600481019190915260248101919091523360448201529192506001600160a01b03169063b1e8f8ef90606401600060405180830381600087803b15801561263757600080fd5b505af115801561264b573d6000803e3d6000fd5b5050506000868152600f60205260409020600e01805461ffff60a01b191661010360a01b1790555061267e858333613a0d565b6000858152600f60209081526040918290206001015482513381529182018590529181018390526001600160a01b039091169086907f4ca647aea530b1ffb7616d399ad7e257e470510d1f439f1ea0b155e55b3994f99060600160405180910390a35050601b805460ff60a01b1916600160a01b179055505050565b61270261313d565b1561270f5761270f611a0f565b601b54600160a01b900460ff166127385760405162461bcd60e51b8152600401610c2f90614453565b601b805460ff60a01b191690558060026000828152600f60205260409020600e0154600160a01b900460ff16600381111561278357634e487b7160e01b600052602160045260246000fd5b146127c25760405162461bcd60e51b815260206004820152600f60248201526e4c4f414e5f4e4f545f41435449564560881b6044820152606401610c2f565b6127ca613165565b156127e75760405162461bcd60e51b8152600401610c2f90614427565b6011546001600160a01b03166127fc816131ed565b156128195760405162461bcd60e51b8152600401610c2f906143f7565b60048054604051636a3a61cd60e01b815233928101929092526001600160a01b031690636a3a61cd9060240160006040518083038186803b15801561285d57600080fd5b505afa158015612871573d6000803e3d6000fd5b50505050600084116128bd5760405162461bcd60e51b8152602060048201526015602482015274105353d5539517d59053155157d491545552549151605a1b6044820152606401610c2f565b60006128c884611ba2565b9050848110156128d6578094505b6128e08186613378565b6000858152600f60205260408120600c015491925090819087101561293557506000858152600f60205260409020600c0154869061291e9082613378565b6000878152600f60205260409020600c01556129b6565b6000868152600f60205260409020600c01541561297e57506000858152600f60205260409020600c01546129698782613378565b6000878152600f60205260408120600c015596505b86156129b6576000868152600f60205260409020600b01548792506129a39083613378565b6000878152600f60205260409020600b01555b60115460405163b1e8f8ef60e01b815260048101849052602481018390523360448201526001600160a01b039091169063b1e8f8ef90606401600060405180830381600087803b158015612a0957600080fd5b505af1158015612a1d573d6000803e3d6000fd5b505050508260001415612a6c576000868152600f60205260409020600e8101805460ff60a01b1916600360a01b1790556009810154600190910154612a6c9188916001600160a01b031661399b565b6000868152600f60205260409020600101546001600160a01b0316867f20a1f2ec363af45dc5ee7d9d622f2dd68b52501c382126c7f04b53663c4c69bf612ab38585613a01565b60408051918252336020830152810187905260600160405180910390a35050601b805460ff60a01b1916600160a01b1790555050505050565b600054604051638b51f58b60e01b81527f87ff11116505b975498f87d319b3b9d631d98e48aa48a4655041faecc8d805ac60048201526001600160a01b0390911690638b51f58b9060240160606040518083038186803b158015612b4f57600080fd5b505afa158015612b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b879190614239565b601b80546001600160a01b0319166001600160a01b03929092169190911790555050565b601a54604051602481018390526000918291611d16916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b031663e6a901c160e01b17905261385e565b612c0561313d565b15612c1257612c12611a0f565b6004805460405163c095ea2760e01b815233928101929092526001600160a01b03169063c095ea279060240160006040518083038186803b158015612c5657600080fd5b505afa158015612c6a573d6000803e3d6000fd5b5050601b54604051612cc393506001600160a01b039091169150612c949085908590602401614344565b60408051601f198184030181529190526020810180516001600160e01b031663e8906a2d60e01b179052613927565b505050565b601a5460405160248101849052604481018390526000918291612d21916001600160a01b03169060640160408051601f198184030181529190526020810180516001600160e01b031663e949756160e01b17905261385e565b905080806020019051810190612d379190614004565b949350505050565b612d4761313d565b15612d5457612d54611a0f565b6004805460405163c095ea2760e01b815233928101929092526001600160a01b03169063c095ea279060240160006040518083038186803b158015612d9857600080fd5b505afa158015612dac573d6000803e3d6000fd5b5050601b546040516001600160a01b038581166024830152612e009450909116915060440160408051601f198184030181529190526020810180516001600160e01b03166375896b0f60e11b179052613927565b5050565b601b54604051600091829182918291612e60916001600160a01b031690612e319089908990602401614477565b60408051601f198184030181529190526020810180516001600160e01b031663eb78303b60e01b17905261385e565b905080806020019051810190612e76919061401c565b935093509350509250925092565b6001600160a01b038116600090815260156020908152604091829020805483518184028101840190945280845260609392830182828015612ee457602002820191906000526020600020905b815481526020019060010190808311612ed0575b50505050509050919050565b60408051808201909152601c81527f50524f564944455f4c454e44494e475f504f4f4c5f41444452455353000000006020820152612f38906001600160a01b038616906134f5565b612f4183613b46565b601180546001600160a01b0319166001600160a01b0386169081179091556040805163155594ab60e31b8152905163aaaca55891600480820192602092909190829003018186803b158015612f9557600080fd5b505afa158015612fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fcd9190613fe8565b601280546001600160a01b0319166001600160a01b03928316179055601154604080516334f293ed60e11b8152905191909216916369e527da916004808301926020929190829003018186803b15801561302657600080fd5b505afa15801561303a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305e9190613fe8565b601480546001600160a01b03199081166001600160a01b039384161790915560198054909116838316179055600480546040805162b3076d60e81b81529051919093169263b3076d009281810192602092909190829003018186803b1580156130c657600080fd5b505afa1580156130da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fe9190613fe8565b601c80546001600160a01b03199081166001600160a01b039384161790915560138054909116918416919091179055613135612310565b61212c612aec565b60025460009060ff168015613160575043600354600161315d9190614648565b11155b905090565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b1580156131b557600080fd5b505afa1580156131c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131609190613f5e565b60048054604051633b66832160e01b81526001600160a01b038481169382019390935260009290911690633b6683219060240160206040518083038186803b15801561323857600080fd5b505afa15801561324c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9c9190613f5e565b601c546012546040516362d128d160e01b81526001600160a01b03918216600482015260009291909116906362d128d19060240160206040518083038186803b1580156132bc57600080fd5b505afa1580156132d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f49190614004565b60115460405163126e099960e31b8152600481018590526001600160a01b03909116906393704cc89060240160206040518083038186803b15801561333857600080fd5b505afa15801561334c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133709190614004565b111592915050565b6000611b998284614660565b6000818152600f60205260408120600e01546001600160a01b0316156133ec5760405162461bcd60e51b815260206004820152601a60248201527f4c4f414e5f455343524f575f414c52454144595f4558495354530000000000006044820152606401610c2f565b601954613401906001600160a01b0316613bb0565b6000546040516307397e5b60e51b81526001600160a01b0391821660048201527fb9bc528025c382c0c8143814a1df5b62366b6d562d71f58bf61651b823f9809460248201526001604482015291925082169063e72fcb6090606401600060405180830381600087803b15801561347757600080fd5b505af115801561348b573d6000803e3d6000fd5b505060048054604051630e5a3be960e21b81526001600160a01b038681169382019390935291169250633968efa49150602401600060405180830381600087803b1580156134d857600080fd5b505af11580156134ec573d6000803e3d6000fd5b50505050919050565b806001600160a01b038316612cc35760405162461bcd60e51b8152600401610c2f91906143d6565b806001600160a01b038381169085161461354a5760405162461bcd60e51b8152600401610c2f91906143d6565b50505050565b8034146135965760405162461bcd60e51b8152602060048201526014602482015273125390d3d4949150d517d1551217d05353d5539560621b6044820152606401610c2f565b6010546135a39082613a01565b6010556000828152600f60205260409020600901546135c29082613a01565b6000838152600f6020908152604091829020600981019390935542600a9093019290925551828152339184917feec2f3feb835e2f2fd44281034b04700a1ddda63dd402949d470a25a7c40b36c910160405180910390a35050565b60165460009061362e816001613a01565b601655600080828152600f60205260409020600e0154600160a01b900460ff16600381111561366d57634e487b7160e01b600052602160045260246000fd5b146136b05760405162461bcd60e51b81526020600482015260136024820152724c4f414e5f414c52454144595f45584953545360681b6044820152606401610c2f565b85516001600160a01b03166136f85760405162461bcd60e51b815260206004820152600e60248201526d424f52524f5745525f454d50545960901b6044820152606401610c2f565b6000818152600f60205260409020818155600e0180546001919060ff60a01b1916600160a01b8302179055506040805160c08101825287516001600160a01b0390811682526020808a015182168184019081528385018a8152606085018a8152608086018a815260a0808f015190880190815260008a8152600f8752898120985160018a018054918a166001600160a01b0319928316179055955160028a018054918a1691909716179095559251600388015590516004808801919091559051600587015590516006909501949094558354855163cfa8bb9360e01b81529551919593169363cfa8bb939380820193929190829003018186803b1580156137fe57600080fd5b505afa158015613812573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138369190614004565b90506138424282613a01565b6000838152600f60205260409020600701555095945050505050565b6060600080306001600160a01b03168585604051602401613880929190614320565b60408051601f198184030181529181526020820180516001600160e01b0316631d580e0560e11b179052516138b59190614304565b600060405180830381855afa9150503d80600081146138f0576040519150601f19603f3d011682016040523d82523d6000602084013e6138f5565b606091505b5091509150600082141561390a573d60208201fd5b8080602001905181019061391e9190613f7e565b95945050505050565b60606000836001600160a01b0316836040516139439190614304565b600060405180830381855af49150503d806000811461397e576040519150601f19603f3d011682016040523d82523d6000602084013e613983565b606091505b509250905080613994573d60208301fd5b5092915050565b6139a6838383613c02565b6000838152600f60209081526040918290206001015491518481526001600160a01b0384811693169186917f354da53cd88eb0936caa11700c1928b13f3f2803cca6f4f464ceff3b4bd7d38e910160405180910390a4505050565b6000611b998284614648565b60008213613a1a57612cc3565b6000838152600f60205260409020600901548290811015613a4557613a40848284613c02565b61354a565b6000848152600f6020526040902060090154811061354a576000848152600f6020526040812060090154613a7a908390613378565b6000868152600f6020526040902060090154909150613a9b90869085613c02565b600081118015613ac457506000858152600f60205260409020600e01546001600160a01b031615155b156114e7576000858152600f602052604090819020600e015490516352fbd9cb60e11b81526001600160a01b038581166004830152602482018490529091169063a5f7b39690604401600060405180830381600087803b158015613b2757600080fd5b505af1158015613b3b573d6000803e3d6000fd5b505050505050505050565b60408051808201909152601981527f53455454494e47535f4d5553545f42455f50524f5649444544000000000000006020820152613b8e906001600160a01b038316906134f5565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f0949350505050565b601054613c0f9083613378565b6010556000838152600f6020526040902060090154613c2e9083613378565b6000848152600f60205260408082206009019290925590516001600160a01b0383169184156108fc02918591818181858888f1935050505015801561354a573d6000803e3d6000fd5b600060e08284031215613c88578081fd5b613c9260e06145ef565b90508135613c9f816146cf565b81526020820135613caf816146cf565b60208201526040820135613cc2816146cf565b80604083015250606082013560608201526080820135608082015260a082013560a082015260c082013560c082015292915050565b6000818303610120811215613d0a578182fd5b613d1460e06145ef565b91508235613d21816146cf565b82526020830135613d31816146cf565b8060208401525060408301356040830152606083013560608301526080830135608083015260a083013560a0830152606060bf1982011215613d7257600080fd5b50613d7d60606145ef565b60c083013560ff81168114613d9157600080fd5b815260e0830135602082015261010090920135604083015260c0810191909152919050565b600060208284031215613dc7578081fd5b8135611b46816146cf565b60008060008060808587031215613de7578283fd5b8435613df2816146cf565b93506020850135613e02816146cf565b92506040850135613e12816146cf565b91506060850135613e22816146cf565b939692955090935050565b60008060408385031215613e3f578182fd5b8235613e4a816146cf565b9150602083013567ffffffffffffffff811115613e65578182fd5b8301601f81018513613e75578182fd5b8035613e88613e8382614620565b6145ef565b818152866020838501011115613e9c578384fd5b81602084016020830137908101602001929092525090939092509050565b600080600060608486031215613ece578081fd5b8335613ed9816146cf565b95602085013595506040909401359392505050565b60008060208385031215613f00578182fd5b823567ffffffffffffffff80821115613f17578384fd5b818501915085601f830112613f2a578384fd5b813581811115613f38578485fd5b8660208260051b8501011115613f4c578485fd5b60209290920196919550909350505050565b600060208284031215613f6f578081fd5b81518015158114611b46578182fd5b600060208284031215613f8f578081fd5b815167ffffffffffffffff811115613fa5578182fd5b8201601f81018413613fb5578182fd5b8051613fc3613e8382614620565b818152856020838501011115613fd7578384fd5b61391e826020830160208601614677565b600060208284031215613ff9578081fd5b8151611b46816146cf565b600060208284031215614015578081fd5b5051919050565b600080600060608486031215614030578081fd5b8351925060208401519150604084015190509250925092565b6000806040838503121561405b578182fd5b505080516020909101519092909150565b60008060008084860361012080821215614084578384fd5b60e0821215614091578384fd5b86955060e0870135915067ffffffffffffffff808311156140b0578485fd5b828801925088601f8401126140c3578485fd5b8235818111156140d1578586fd5b89602084830286010111156140e4578586fd5b96996020939093019850959661010001359550909350505050565b600060e08284031215614110578081fd5b611b998383613c77565b600080610100838503121561412d578182fd5b6141378484613c77565b915060e083013567ffffffffffffffff80821115614153578283fd5b818501915085601f830112614166578283fd5b813560208282111561417a5761417a6146b9565b614188818360051b016145ef565b8281528181019350848201610120808502870184018b10156141a8578788fd5b8796505b848710156141d4576141be8b83613cf7565b86526001969096019594830194908101906141ac565b5096999098509650505050505050565b600061012082840312156141f6578081fd5b611b998383613cf7565b600060208284031215614211578081fd5b5035919050565b6000806040838503121561422a578182fd5b50508035926020909101359150565b60008060006060848603121561424d578081fd5b83519250602084015191506040840151614266816146cf565b809150509250925092565b60008151808452614289816020860160208601614677565b601f01601f19169290920160200192915050565b600481106142bb57634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b0390811683526020808301519091169083015260408082015190830152606080820151908301526080808201519083015260a090810151910152565b60008251614316818460208701614677565b9190910192915050565b6001600160a01b0383168152604060208201819052600090612d3790830184614271565b60208082528181018390526000908460408401835b8681101561438757823561436c816146cf565b6001600160a01b031682529183019190830190600101614359565b509695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156143ca578351835292840192918401916001016143ae565b50909695505050505050565b600060208252611b996020830184614271565b60208101611b9c828461429d565b60208082526016908201527513115391125391d7d413d3d317d254d7d4105554d15160521b604082015260600190565b602080825260129082015271141310551193d49357d254d7d4105554d15160721b604082015260600190565b6020808252600a90820152691c994b595b9d195c995960b21b604082015260600190565b600061010080830160018060a01b03808751168552602081818901511681870152604082818a015116818801526060808a0151818901526080808b0151818a015260a0808c0151818b015260c0808d0151818c015260e089818d0152888d51808b526101209a508a8e019150888f018d5b8281101561454d57815180518d1685528b8101518d168c8601528a8101518b860152898101518a86015288810151898601528781015188860152860151805160ff1687860152808c0151868601528a01518e850152928c0192908a01906001016144e8565b505050809b5050505050505050505050509392505050565b60c08101611b9c82846142bf565b8c81526102208101614588602083018e6142bf565b8b60e08301528a61010083015289610120830152886101408301528761016083015286610180830152856101a083015260018060a01b0385166101c08301526145d56101e083018561429d565b8215156102008301529d9c50505050505050505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715614618576146186146b9565b604052919050565b600067ffffffffffffffff82111561463a5761463a6146b9565b50601f01601f191660200190565b6000821982111561465b5761465b6146a3565b500190565b600082821015614672576146726146a3565b500390565b60005b8381101561469257818101518382015260200161467a565b8381111561354a5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146146e457600080fd5b5056fea26469706673582212207fcc5587f230ccf514f1984b8d49be377a810b703f966cd6b1b9879ff4695ac764736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106103355760003560e01c8063854768c0116101ab578063d8aed145116100f7578063e949756111610095578063eee8b7ff1161006f578063eee8b7ff14610b44578063f8c8765e14610b71578063fdf6e4ea14610b91578063fec6889414610bc157610335565b8063e949756114610ae4578063eb12d61e14610b04578063eb78303b14610b2457610335565b8063e154e9a4116100d1578063e154e9a41461099f578063e1ec3c68146109b9578063e6a901c114610aa4578063e8906a2d14610ac457610335565b8063d8aed1451461094a578063db24c6831461096a578063e06174e41461097f57610335565b8063b2016bd411610164578063c49d99fd1161013e578063c49d99fd146108bc578063c9e02bef146108d1578063ccdd9f5d146108f1578063d68ff1911461091157610335565b8063b2016bd414610848578063b3076d0014610868578063b67805071461088857610335565b8063854768c01461076657806386f0a62114610786578063a59a9973146107a6578063aaaca558146107c6578063b06164cf146107e6578063b10b8a2c1461081b57610335565b806342d21ef71161028557806359c697f4116102235780635ebc6334116101fd5780635ebc6334146106cb57806369e527da146106eb57806372e113271461070b578063767a7b051461074657610335565b806359c697f4146106415780635ca879d7146106615780635ea2a2cf1461069157610335565b80634f8654bc1161025f5780634f8654bc146105b657806351348454146105db57806352d07b3b146105f157806355dbd8eb1461062157610335565b806342d21ef7146105295780634a26a71b146105705780634ac8eb5f146105a057610335565b8063226546a4116102f257806338c72f69116102cc57806338c72f69146104785780633ab01c0a146104ac5780633b1f18dd146104d95780633b9293001461050957610335565b8063226546a41461040a5780632c26486d1461042a57806337c3eedc1461044057610335565b806302bc2cdb1461033a57806304b0c79b1461035c57806310780bed1461039f5780631a74856b146103cf5780631de2e883146103e25780631eb83d54146103f5575b600080fd5b34801561034657600080fd5b5061035a610355366004614218565b610bf1565b005b34801561036857600080fd5b5061038c610377366004614200565b6000908152600f60205260409020600d015490565b6040519081526020015b60405180910390f35b3480156103ab57600080fd5b5061038c6103ba366004614200565b6000908152600f60205260409020600c015490565b61035a6103dd366004613eba565b61131e565b61035a6103f036600461406c565b6114ee565b34801561040157600080fd5b5061035a611a0f565b34801561041657600080fd5b5061038c610425366004614200565b611ade565b34801561043657600080fd5b5061038c60015481565b34801561044c57600080fd5b50600054610460906001600160a01b031681565b6040516001600160a01b039091168152602001610396565b34801561048457600080fd5b5061038c7f698a3c07617049c2f15d3f96333af3d44fbf5976ff9ca8e1df2e46ac61ce155a81565b3480156104b857600080fd5b506104cc6104c7366004613e2d565b611b4d565b60405161039691906143d6565b3480156104e557600080fd5b5061038c6104f4366004614200565b6000908152600f602052604090206009015490565b34801561051557600080fd5b5061038c610524366004614200565b611ba2565b34801561053557600080fd5b50610563610544366004614200565b6000908152600f60205260409020600e0154600160a01b900460ff1690565b60405161039691906143e9565b34801561057c57600080fd5b5061038c61058b366004614200565b6000908152600f602052604090206008015490565b3480156105ac57600080fd5b5061038c60105481565b3480156105c257600080fd5b506002546104609061010090046001600160a01b031681565b3480156105e757600080fd5b5061038c60165481565b3480156105fd57600080fd5b5061038c61060c366004614200565b6000908152600f60205260409020600b015490565b34801561062d57600080fd5b5061035a61063c366004613db6565b611bf3565b34801561064d57600080fd5b5061038c61065c366004614200565b611c72565b34801561066d57600080fd5b5061068161067c366004614200565b611cc4565b6040519015158152602001610396565b34801561069d57600080fd5b506106816106ac366004614200565b6000908152600f60205260409020600e0154600160a81b900460ff1690565b3480156106d757600080fd5b5061038c6106e6366004614200565b611d2c565b3480156106f757600080fd5b50601454610460906001600160a01b031681565b34801561071757600080fd5b5061072b610726366004614200565b611d7e565b60408051938452602084019290925290820152606001610396565b34801561075257600080fd5b5061035a610761366004614218565b611df8565b34801561077257600080fd5b50610681610781366004614200565b612145565b34801561079257600080fd5b5061038c6107a1366004614200565b612197565b3480156107b257600080fd5b50601154610460906001600160a01b031681565b3480156107d257600080fd5b50601254610460906001600160a01b031681565b3480156107f257600080fd5b50610806610801366004614200565b6121e9565b60408051928352602083019190915201610396565b34801561082757600080fd5b5061083b610836366004614200565b61225f565b6040516103969190614565565b34801561085457600080fd5b50601354610460906001600160a01b031681565b34801561087457600080fd5b50601c54610460906001600160a01b031681565b34801561089457600080fd5b5061038c7f87ff11116505b975498f87d319b3b9d631d98e48aa48a4655041faecc8d805ac81565b3480156108c857600080fd5b5061035a612310565b3480156108dd57600080fd5b506106816108ec366004614200565b6123cf565b3480156108fd57600080fd5b5061035a61090c366004614200565b612421565b34801561091d57600080fd5b5061046061092c366004614200565b6000908152600f60205260409020600e01546001600160a01b031690565b34801561095657600080fd5b5061035a610965366004614218565b6126fa565b34801561097657600080fd5b5061035a612aec565b34801561098b57600080fd5b50600454610460906001600160a01b031681565b3480156109ab57600080fd5b506002546106819060ff1681565b3480156109c557600080fd5b50610a8c6109d4366004614200565b600f602090815260009182526040918290208054835160c08101855260018301546001600160a01b03908116825260028401548116948201949094526003830154948101949094526004820154606085015260058201546080850152600682015460a0850152600782015460088301546009840154600a850154600b860154600c870154600d880154600e9098015496999895979496939592949193909281169060ff600160a01b8204811691600160a81b9004168c565b6040516103969c9b9a99989796959493929190614573565b348015610ab057600080fd5b50610681610abf366004614200565b612bab565b348015610ad057600080fd5b5061035a610adf366004613eee565b612bfd565b348015610af057600080fd5b5061038c610aff366004614218565b612cc8565b348015610b1057600080fd5b5061035a610b1f366004613db6565b612d3f565b348015610b3057600080fd5b5061072b610b3f36600461411a565b612e04565b348015610b5057600080fd5b50610b64610b5f366004613db6565b612e84565b6040516103969190614392565b348015610b7d57600080fd5b5061035a610b8c366004613dd2565b612ef0565b348015610b9d57600080fd5b5061038c610bac366004614200565b6000908152600f60205260409020600a015490565b348015610bcd57600080fd5b5061038c610bdc366004614200565b6000908152600f602052604090206007015490565b610bf961313d565b15610c0657610c06611a0f565b601b54600160a01b900460ff16610c385760405162461bcd60e51b8152600401610c2f90614453565b60405180910390fd5b601b805460ff60a01b19169055610c4d613165565b15610c6a5760405162461bcd60e51b8152600401610c2f90614427565b6011546001600160a01b0316610c7f816131ed565b15610c9c5760405162461bcd60e51b8152600401610c2f906143f7565b60048054604051636a3a61cd60e01b815233928101929092526001600160a01b031690636a3a61cd9060240160006040518083038186803b158015610ce057600080fd5b505afa158015610cf4573d6000803e3d6000fd5b5050506000848152600f60205260409020600101546001600160a01b031633149050610d515760405162461bcd60e51b815260206004820152600c60248201526b2727aa2fa127a92927aba2a960a11b6044820152606401610c2f565b60016000848152600f60205260409020600e0154600160a01b900460ff166003811115610d8e57634e487b7160e01b600052602160045260246000fd5b14610dca5760405162461bcd60e51b815260206004820152600c60248201526b1313d05397d393d517d4d15560a21b6044820152606401610c2f565b6000838152600f6020526040902060070154421115610e205760405162461bcd60e51b81526020600482015260126024820152711313d05397d511549354d7d156141254915160721b6044820152606401610c2f565b610e2982613270565b610e755760405162461bcd60e51b815260206004820152601a60248201527f535550504c595f544f5f444542545f455843454544535f4d41580000000000006044820152606401610c2f565b6000838152600f6020526040902060050154821115610eca5760405162461bcd60e51b815260206004820152601160248201527013505617d313d05397d15610d151511151607a1b6044820152606401610c2f565b6000610ed584611d7e565b506000868152600f60205260409020600901549092508213159050610f3c5760405162461bcd60e51b815260206004820152601860248201527f4d4f52455f434f4c4c41544552414c5f524551554952454400000000000000006044820152606401610c2f565b610fcc600460009054906101000a90046001600160a01b03166001600160a01b03166393d748246040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8d57600080fd5b505afa158015610fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc59190614004565b4290613378565b6000858152600f60205260409020600a0154111561102c5760405162461bcd60e51b815260206004820152601d60248201527f434f4c4c41544552414c5f4445504f53495445445f524543454e544c590000006044820152606401610c2f565b6000848152600f60205260409020600d8101849055600b018390556110518484612cc8565b6000858152600f60205260408120600c810192909255600e8201805460ff60a01b1916600160a11b1790554260089092019190915580611090866123cf565b905080156110fb576000868152600f60205260409020600201546001600160a01b0316156110d8576000868152600f60205260409020600201546001600160a01b03166110f4565b6000868152600f60205260409020600101546001600160a01b03165b9150611135565b61110486613384565b6000878152600f60205260409020600e0180546001600160a01b0319166001600160a01b0392909216918217905591505b601154604051631397424760e11b8152600481018790526001600160a01b0384811660248301529091169063272e848e90604401600060405180830381600087803b15801561118357600080fd5b505af1158015611197573d6000803e3d6000fd5b505050508061129d57604080518082018252601b81527f455343524f575f434f4e54524143545f4e4f545f444546494e454400000000006020808301919091526000898152600f90915291909120600e01546111fe916001600160a01b03909116906134f5565b6000868152600f602052604090819020600e8101546004805460115460125460019095015495516333e1a22360e01b81526001600160a01b039283169381019390935281166024830152604482018b90529283166064820152928216608484015216906333e1a2239060a401600060405180830381600087803b15801561128457600080fd5b505af1158015611298573d6000803e3d6000fd5b505050505b6000868152600f602052604090819020600e81015460019091015491516001600160a01b03918216929091169088907f85b5516a17ce775661a4b967b1fb30c852678f6598d86d9f3c99b7b60ff2d0ce906112fb908a815260200190565b60405180910390a45050601b805460ff60a01b1916600160a01b17905550505050565b61132661313d565b1561133357611333611a0f565b8161133d81612bab565b6113825760405162461bcd60e51b81526020600482015260166024820152751313d05397d393d517d050d512559157d3d497d4d15560521b6044820152606401610c2f565b61138a613165565b156113a75760405162461bcd60e51b8152600401610c2f90614427565b6011546001600160a01b03166113bc816131ed565b156113d95760405162461bcd60e51b8152600401610c2f906143f7565b60048054604051636a3a61cd60e01b815233928101929092526001600160a01b031690636a3a61cd9060240160006040518083038186803b15801561141d57600080fd5b505afa158015611431573d6000803e3d6000fd5b5050506000858152600f6020908152604091829020600101548251808401909352601983527f424f52524f5745525f4c4f414e5f49445f4d49534d41544348000000000000009183019190915261149792506001600160a01b038881169291169061351d565b600083116114dd5760405162461bcd60e51b815260206004820152601360248201527243414e4e4f545f4445504f5349545f5a45524f60681b6044820152606401610c2f565b6114e78484613550565b5050505050565b6114f661313d565b1561150357611503611a0f565b601b54600160a01b900460ff1661152c5760405162461bcd60e51b8152600401610c2f90614453565b601b805460ff60a01b19169055611541613165565b1561155e5760405162461bcd60e51b8152600401610c2f90614427565b61156d368590038501856140ff565b6000600460009054906101000a90046001600160a01b03166001600160a01b03166354409f2b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115bd57600080fd5b505afa1580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f59190614004565b90508160a0015181101561164b5760405162461bcd60e51b815260206004820152601d60248201527f4455524154494f4e5f455843454544535f4d41585f4455524154494f4e0000006044820152606401610c2f565b601c546012546080840151604051631a7fddd160e21b81526001600160a01b039283166004820152602481019190915260009291909116906369ff77449060440160206040518083038186803b1580156116a457600080fd5b505afa1580156116b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dc9190613f5e565b9050801561172c5760405162461bcd60e51b815260206004820152601960248201527f414d4f554e545f455843454544535f4d41585f414d4f554e54000000000000006044820152606401610c2f565b6117398360800151613270565b6117855760405162461bcd60e51b815260206004820152601a60248201527f535550504c595f544f5f444542545f455843454544535f4d41580000000000006044820152606401610c2f565b60048054604051636a3a61cd60e01b815233928101929092526001600160a01b031690636a3a61cd9060240160006040518083038186803b1580156117c957600080fd5b505afa1580156117dd573d6000803e3d6000fd5b506117ef925050506020880188613db6565b6001600160a01b0316336001600160a01b0316146118445760405162461bcd60e51b81526020600482015260126024820152712727aa2fa627a0a72fa922a8aaa2a9aa22a960711b6044820152606401610c2f565b600080806118b361185a368c90038c018c6140ff565b8a8a808060200260200160405190810160405280939291908181526020016000905b828210156118a95761189a61012083028601368190038101906141e4565b8152602001906001019061187c565b5050505050612e04565b9194509250905060006118d66118ce368d90038d018d6140ff565b85858561361d565b905087156118e8576118e88189613550565b6119096118fb60408d0160208e01613db6565b6001600160a01b0316151590565b1561196357611917816123cf565b6119635760405162461bcd60e51b815260206004820152601960248201527f554e4445525f434f4c4c5f574954485f524543495049454e54000000000000006044820152606401610c2f565b6015600061197460208e018e613db6565b6001600160a01b03908116825260208083019390935260409182016000908120805460018101825590825284822001859055848152600f845282902060020154915160608f01358152911691339184917f40ed10b06bb9055e12a66cea10237c57a55e5830f61c79384d78f338f44d9e5e910160405180910390a45050601b805460ff60a01b1916600160a01b179055505050505050505050565b60008054600154604051638b51f58b60e01b81526001600160a01b0390921691638b51f58b91611a459160040190815260200190565b60606040518083038186803b158015611a5d57600080fd5b505afa158015611a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a959190614239565b6002549093506001600160a01b0380851661010090920416149150611ad790505760028054610100600160a81b0319166101006001600160a01b038416021790555b5043600355565b601a54604051602481018390526000918291611b30916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b031663089951a960e21b17905261385e565b905080806020019051810190611b469190614004565b9392505050565b6060333014611b8f5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa1a0a62622a960911b6044820152606401610c2f565b611b998383613927565b90505b92915050565b601a54604051602481018390526000918291611b30916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b0316623b929360e81b17905261385e565b6000546001600160a01b03163314611c465760405162461bcd60e51b81526020600482015260166024820152754d5553545f42455f4c4f4749435f524547495354525960501b6044820152606401610c2f565b600280546001600160a01b0390921661010002610100600160a81b031990921691909117905543600355565b601a54604051602481018390526000918291611b30916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b0316631671a5fd60e21b17905261385e565b601a54604051602481018390526000918291611d16916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b0316635ca879d760e01b17905261385e565b905080806020019051810190611b469190613f5e565b601a54604051602481018390526000918291611b30916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b03166317af18cd60e21b17905261385e565b601a5460405160248101839052600091829182918291611dd4916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b03166372e1132760e01b17905261385e565b905080806020019051810190611dea919061401c565b935093509350509193909250565b611e0061313d565b15611e0d57611e0d611a0f565b601b54600160a01b900460ff16611e365760405162461bcd60e51b8152600401610c2f90614453565b601b805460ff60a01b1916905580611e4d81612bab565b611e925760405162461bcd60e51b81526020600482015260166024820152751313d05397d393d517d050d512559157d3d497d4d15560521b6044820152606401610c2f565b611e9a613165565b15611eb75760405162461bcd60e51b8152600401610c2f90614427565b6011546001600160a01b0316611ecc816131ed565b15611ee95760405162461bcd60e51b8152600401610c2f906143f7565b60048054604051636a3a61cd60e01b815233928101929092526001600160a01b031690636a3a61cd9060240160006040518083038186803b158015611f2d57600080fd5b505afa158015611f41573d6000803e3d6000fd5b5050506000848152600f60205260409020600101546001600160a01b031633149050611fa85760405162461bcd60e51b815260206004820152601660248201527521a0a62622a92fa227a2a9a72a2fa7aba72fa627a0a760511b6044820152606401610c2f565b60008411611fef5760405162461bcd60e51b815260206004820152601460248201527343414e4e4f545f57495448445241575f5a45524f60601b6044820152606401610c2f565b60026000848152600f60205260409020600e0154600160a01b900460ff16600381111561202c57634e487b7160e01b600052602160045260246000fd5b14156120c057600061203d84611d7e565b5091505060008113156120ba576000848152600f60205260408120600901546120669083613378565b9050858110156120b85760405162461bcd60e51b815260206004820152601a60248201527f434f4c4c41544552414c5f414d4f554e545f544f4f5f484947480000000000006044820152606401610c2f565b505b50612121565b6000838152600f60205260409020600901548411156121215760405162461bcd60e51b815260206004820152601b60248201527f434f4c4c41544552414c5f414d4f554e545f4e4f545f4d4154434800000000006044820152606401610c2f565b61212c83853361399b565b5050601b805460ff60a01b1916600160a01b1790555050565b601a54604051602481018390526000918291611d16916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b03166302151da360e61b17905261385e565b601a54604051602481018390526000918291611b30916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b03166386f0a62160e01b17905261385e565b601a54604051602481018390526000918291829161223f916001600160a01b039091169060440160408051601f198184030181529190526020810180516001600160e01b031663b06164cf60e01b17905261385e565b9050808060200190518101906122559190614049565b9250925050915091565b6122aa6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b6000828152600f602052604090206040805160c08101825260018301546001600160a01b0390811682526002840154166020820152600383015491810191909152600482015460608201526005820154608082015260069091015460a082015292915050565b600054604051638b51f58b60e01b81527f698a3c07617049c2f15d3f96333af3d44fbf5976ff9ca8e1df2e46ac61ce155a60048201526001600160a01b0390911690638b51f58b9060240160606040518083038186803b15801561237357600080fd5b505afa158015612387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ab9190614239565b601a80546001600160a01b0319166001600160a01b03929092169190911790555050565b601a54604051602481018390526000918291611d16916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b031663c9e02bef60e01b17905261385e565b61242961313d565b1561243657612436611a0f565b601b54600160a01b900460ff1661245f5760405162461bcd60e51b8152600401610c2f90614453565b601b805460ff60a01b191690558060026000828152600f60205260409020600e0154600160a01b900460ff1660038111156124aa57634e487b7160e01b600052602160045260246000fd5b146124e95760405162461bcd60e51b815260206004820152600f60248201526e4c4f414e5f4e4f545f41435449564560881b6044820152606401610c2f565b6124f1613165565b1561250e5760405162461bcd60e51b8152600401610c2f90614427565b6011546001600160a01b0316612523816131ed565b156125405760405162461bcd60e51b8152600401610c2f906143f7565b61254983611cc4565b6125955760405162461bcd60e51b815260206004820152601760248201527f444f45534e545f4e4545445f4c49515549444154494f4e0000000000000000006044820152606401610c2f565b60006125a084611d2c565b6000858152600f60205260408120600c810154600b9091015492935090916125c791613a01565b6011546000878152600f602052604090819020600b810154600c90910154915163b1e8f8ef60e01b8152600481019190915260248101919091523360448201529192506001600160a01b03169063b1e8f8ef90606401600060405180830381600087803b15801561263757600080fd5b505af115801561264b573d6000803e3d6000fd5b5050506000868152600f60205260409020600e01805461ffff60a01b191661010360a01b1790555061267e858333613a0d565b6000858152600f60209081526040918290206001015482513381529182018590529181018390526001600160a01b039091169086907f4ca647aea530b1ffb7616d399ad7e257e470510d1f439f1ea0b155e55b3994f99060600160405180910390a35050601b805460ff60a01b1916600160a01b179055505050565b61270261313d565b1561270f5761270f611a0f565b601b54600160a01b900460ff166127385760405162461bcd60e51b8152600401610c2f90614453565b601b805460ff60a01b191690558060026000828152600f60205260409020600e0154600160a01b900460ff16600381111561278357634e487b7160e01b600052602160045260246000fd5b146127c25760405162461bcd60e51b815260206004820152600f60248201526e4c4f414e5f4e4f545f41435449564560881b6044820152606401610c2f565b6127ca613165565b156127e75760405162461bcd60e51b8152600401610c2f90614427565b6011546001600160a01b03166127fc816131ed565b156128195760405162461bcd60e51b8152600401610c2f906143f7565b60048054604051636a3a61cd60e01b815233928101929092526001600160a01b031690636a3a61cd9060240160006040518083038186803b15801561285d57600080fd5b505afa158015612871573d6000803e3d6000fd5b50505050600084116128bd5760405162461bcd60e51b8152602060048201526015602482015274105353d5539517d59053155157d491545552549151605a1b6044820152606401610c2f565b60006128c884611ba2565b9050848110156128d6578094505b6128e08186613378565b6000858152600f60205260408120600c015491925090819087101561293557506000858152600f60205260409020600c0154869061291e9082613378565b6000878152600f60205260409020600c01556129b6565b6000868152600f60205260409020600c01541561297e57506000858152600f60205260409020600c01546129698782613378565b6000878152600f60205260408120600c015596505b86156129b6576000868152600f60205260409020600b01548792506129a39083613378565b6000878152600f60205260409020600b01555b60115460405163b1e8f8ef60e01b815260048101849052602481018390523360448201526001600160a01b039091169063b1e8f8ef90606401600060405180830381600087803b158015612a0957600080fd5b505af1158015612a1d573d6000803e3d6000fd5b505050508260001415612a6c576000868152600f60205260409020600e8101805460ff60a01b1916600360a01b1790556009810154600190910154612a6c9188916001600160a01b031661399b565b6000868152600f60205260409020600101546001600160a01b0316867f20a1f2ec363af45dc5ee7d9d622f2dd68b52501c382126c7f04b53663c4c69bf612ab38585613a01565b60408051918252336020830152810187905260600160405180910390a35050601b805460ff60a01b1916600160a01b1790555050505050565b600054604051638b51f58b60e01b81527f87ff11116505b975498f87d319b3b9d631d98e48aa48a4655041faecc8d805ac60048201526001600160a01b0390911690638b51f58b9060240160606040518083038186803b158015612b4f57600080fd5b505afa158015612b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b879190614239565b601b80546001600160a01b0319166001600160a01b03929092169190911790555050565b601a54604051602481018390526000918291611d16916001600160a01b03169060440160408051601f198184030181529190526020810180516001600160e01b031663e6a901c160e01b17905261385e565b612c0561313d565b15612c1257612c12611a0f565b6004805460405163c095ea2760e01b815233928101929092526001600160a01b03169063c095ea279060240160006040518083038186803b158015612c5657600080fd5b505afa158015612c6a573d6000803e3d6000fd5b5050601b54604051612cc393506001600160a01b039091169150612c949085908590602401614344565b60408051601f198184030181529190526020810180516001600160e01b031663e8906a2d60e01b179052613927565b505050565b601a5460405160248101849052604481018390526000918291612d21916001600160a01b03169060640160408051601f198184030181529190526020810180516001600160e01b031663e949756160e01b17905261385e565b905080806020019051810190612d379190614004565b949350505050565b612d4761313d565b15612d5457612d54611a0f565b6004805460405163c095ea2760e01b815233928101929092526001600160a01b03169063c095ea279060240160006040518083038186803b158015612d9857600080fd5b505afa158015612dac573d6000803e3d6000fd5b5050601b546040516001600160a01b038581166024830152612e009450909116915060440160408051601f198184030181529190526020810180516001600160e01b03166375896b0f60e11b179052613927565b5050565b601b54604051600091829182918291612e60916001600160a01b031690612e319089908990602401614477565b60408051601f198184030181529190526020810180516001600160e01b031663eb78303b60e01b17905261385e565b905080806020019051810190612e76919061401c565b935093509350509250925092565b6001600160a01b038116600090815260156020908152604091829020805483518184028101840190945280845260609392830182828015612ee457602002820191906000526020600020905b815481526020019060010190808311612ed0575b50505050509050919050565b60408051808201909152601c81527f50524f564944455f4c454e44494e475f504f4f4c5f41444452455353000000006020820152612f38906001600160a01b038616906134f5565b612f4183613b46565b601180546001600160a01b0319166001600160a01b0386169081179091556040805163155594ab60e31b8152905163aaaca55891600480820192602092909190829003018186803b158015612f9557600080fd5b505afa158015612fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fcd9190613fe8565b601280546001600160a01b0319166001600160a01b03928316179055601154604080516334f293ed60e11b8152905191909216916369e527da916004808301926020929190829003018186803b15801561302657600080fd5b505afa15801561303a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305e9190613fe8565b601480546001600160a01b03199081166001600160a01b039384161790915560198054909116838316179055600480546040805162b3076d60e81b81529051919093169263b3076d009281810192602092909190829003018186803b1580156130c657600080fd5b505afa1580156130da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fe9190613fe8565b601c80546001600160a01b03199081166001600160a01b039384161790915560138054909116918416919091179055613135612310565b61212c612aec565b60025460009060ff168015613160575043600354600161315d9190614648565b11155b905090565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b815260040160206040518083038186803b1580156131b557600080fd5b505afa1580156131c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131609190613f5e565b60048054604051633b66832160e01b81526001600160a01b038481169382019390935260009290911690633b6683219060240160206040518083038186803b15801561323857600080fd5b505afa15801561324c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9c9190613f5e565b601c546012546040516362d128d160e01b81526001600160a01b03918216600482015260009291909116906362d128d19060240160206040518083038186803b1580156132bc57600080fd5b505afa1580156132d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f49190614004565b60115460405163126e099960e31b8152600481018590526001600160a01b03909116906393704cc89060240160206040518083038186803b15801561333857600080fd5b505afa15801561334c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133709190614004565b111592915050565b6000611b998284614660565b6000818152600f60205260408120600e01546001600160a01b0316156133ec5760405162461bcd60e51b815260206004820152601a60248201527f4c4f414e5f455343524f575f414c52454144595f4558495354530000000000006044820152606401610c2f565b601954613401906001600160a01b0316613bb0565b6000546040516307397e5b60e51b81526001600160a01b0391821660048201527fb9bc528025c382c0c8143814a1df5b62366b6d562d71f58bf61651b823f9809460248201526001604482015291925082169063e72fcb6090606401600060405180830381600087803b15801561347757600080fd5b505af115801561348b573d6000803e3d6000fd5b505060048054604051630e5a3be960e21b81526001600160a01b038681169382019390935291169250633968efa49150602401600060405180830381600087803b1580156134d857600080fd5b505af11580156134ec573d6000803e3d6000fd5b50505050919050565b806001600160a01b038316612cc35760405162461bcd60e51b8152600401610c2f91906143d6565b806001600160a01b038381169085161461354a5760405162461bcd60e51b8152600401610c2f91906143d6565b50505050565b8034146135965760405162461bcd60e51b8152602060048201526014602482015273125390d3d4949150d517d1551217d05353d5539560621b6044820152606401610c2f565b6010546135a39082613a01565b6010556000828152600f60205260409020600901546135c29082613a01565b6000838152600f6020908152604091829020600981019390935542600a9093019290925551828152339184917feec2f3feb835e2f2fd44281034b04700a1ddda63dd402949d470a25a7c40b36c910160405180910390a35050565b60165460009061362e816001613a01565b601655600080828152600f60205260409020600e0154600160a01b900460ff16600381111561366d57634e487b7160e01b600052602160045260246000fd5b146136b05760405162461bcd60e51b81526020600482015260136024820152724c4f414e5f414c52454144595f45584953545360681b6044820152606401610c2f565b85516001600160a01b03166136f85760405162461bcd60e51b815260206004820152600e60248201526d424f52524f5745525f454d50545960901b6044820152606401610c2f565b6000818152600f60205260409020818155600e0180546001919060ff60a01b1916600160a01b8302179055506040805160c08101825287516001600160a01b0390811682526020808a015182168184019081528385018a8152606085018a8152608086018a815260a0808f015190880190815260008a8152600f8752898120985160018a018054918a166001600160a01b0319928316179055955160028a018054918a1691909716179095559251600388015590516004808801919091559051600587015590516006909501949094558354855163cfa8bb9360e01b81529551919593169363cfa8bb939380820193929190829003018186803b1580156137fe57600080fd5b505afa158015613812573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138369190614004565b90506138424282613a01565b6000838152600f60205260409020600701555095945050505050565b6060600080306001600160a01b03168585604051602401613880929190614320565b60408051601f198184030181529181526020820180516001600160e01b0316631d580e0560e11b179052516138b59190614304565b600060405180830381855afa9150503d80600081146138f0576040519150601f19603f3d011682016040523d82523d6000602084013e6138f5565b606091505b5091509150600082141561390a573d60208201fd5b8080602001905181019061391e9190613f7e565b95945050505050565b60606000836001600160a01b0316836040516139439190614304565b600060405180830381855af49150503d806000811461397e576040519150601f19603f3d011682016040523d82523d6000602084013e613983565b606091505b509250905080613994573d60208301fd5b5092915050565b6139a6838383613c02565b6000838152600f60209081526040918290206001015491518481526001600160a01b0384811693169186917f354da53cd88eb0936caa11700c1928b13f3f2803cca6f4f464ceff3b4bd7d38e910160405180910390a4505050565b6000611b998284614648565b60008213613a1a57612cc3565b6000838152600f60205260409020600901548290811015613a4557613a40848284613c02565b61354a565b6000848152600f6020526040902060090154811061354a576000848152600f6020526040812060090154613a7a908390613378565b6000868152600f6020526040902060090154909150613a9b90869085613c02565b600081118015613ac457506000858152600f60205260409020600e01546001600160a01b031615155b156114e7576000858152600f602052604090819020600e015490516352fbd9cb60e11b81526001600160a01b038581166004830152602482018490529091169063a5f7b39690604401600060405180830381600087803b158015613b2757600080fd5b505af1158015613b3b573d6000803e3d6000fd5b505050505050505050565b60408051808201909152601981527f53455454494e47535f4d5553545f42455f50524f5649444544000000000000006020820152613b8e906001600160a01b038316906134f5565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f0949350505050565b601054613c0f9083613378565b6010556000838152600f6020526040902060090154613c2e9083613378565b6000848152600f60205260408082206009019290925590516001600160a01b0383169184156108fc02918591818181858888f1935050505015801561354a573d6000803e3d6000fd5b600060e08284031215613c88578081fd5b613c9260e06145ef565b90508135613c9f816146cf565b81526020820135613caf816146cf565b60208201526040820135613cc2816146cf565b80604083015250606082013560608201526080820135608082015260a082013560a082015260c082013560c082015292915050565b6000818303610120811215613d0a578182fd5b613d1460e06145ef565b91508235613d21816146cf565b82526020830135613d31816146cf565b8060208401525060408301356040830152606083013560608301526080830135608083015260a083013560a0830152606060bf1982011215613d7257600080fd5b50613d7d60606145ef565b60c083013560ff81168114613d9157600080fd5b815260e0830135602082015261010090920135604083015260c0810191909152919050565b600060208284031215613dc7578081fd5b8135611b46816146cf565b60008060008060808587031215613de7578283fd5b8435613df2816146cf565b93506020850135613e02816146cf565b92506040850135613e12816146cf565b91506060850135613e22816146cf565b939692955090935050565b60008060408385031215613e3f578182fd5b8235613e4a816146cf565b9150602083013567ffffffffffffffff811115613e65578182fd5b8301601f81018513613e75578182fd5b8035613e88613e8382614620565b6145ef565b818152866020838501011115613e9c578384fd5b81602084016020830137908101602001929092525090939092509050565b600080600060608486031215613ece578081fd5b8335613ed9816146cf565b95602085013595506040909401359392505050565b60008060208385031215613f00578182fd5b823567ffffffffffffffff80821115613f17578384fd5b818501915085601f830112613f2a578384fd5b813581811115613f38578485fd5b8660208260051b8501011115613f4c578485fd5b60209290920196919550909350505050565b600060208284031215613f6f578081fd5b81518015158114611b46578182fd5b600060208284031215613f8f578081fd5b815167ffffffffffffffff811115613fa5578182fd5b8201601f81018413613fb5578182fd5b8051613fc3613e8382614620565b818152856020838501011115613fd7578384fd5b61391e826020830160208601614677565b600060208284031215613ff9578081fd5b8151611b46816146cf565b600060208284031215614015578081fd5b5051919050565b600080600060608486031215614030578081fd5b8351925060208401519150604084015190509250925092565b6000806040838503121561405b578182fd5b505080516020909101519092909150565b60008060008084860361012080821215614084578384fd5b60e0821215614091578384fd5b86955060e0870135915067ffffffffffffffff808311156140b0578485fd5b828801925088601f8401126140c3578485fd5b8235818111156140d1578586fd5b89602084830286010111156140e4578586fd5b96996020939093019850959661010001359550909350505050565b600060e08284031215614110578081fd5b611b998383613c77565b600080610100838503121561412d578182fd5b6141378484613c77565b915060e083013567ffffffffffffffff80821115614153578283fd5b818501915085601f830112614166578283fd5b813560208282111561417a5761417a6146b9565b614188818360051b016145ef565b8281528181019350848201610120808502870184018b10156141a8578788fd5b8796505b848710156141d4576141be8b83613cf7565b86526001969096019594830194908101906141ac565b5096999098509650505050505050565b600061012082840312156141f6578081fd5b611b998383613cf7565b600060208284031215614211578081fd5b5035919050565b6000806040838503121561422a578182fd5b50508035926020909101359150565b60008060006060848603121561424d578081fd5b83519250602084015191506040840151614266816146cf565b809150509250925092565b60008151808452614289816020860160208601614677565b601f01601f19169290920160200192915050565b600481106142bb57634e487b7160e01b600052602160045260246000fd5b9052565b80516001600160a01b0390811683526020808301519091169083015260408082015190830152606080820151908301526080808201519083015260a090810151910152565b60008251614316818460208701614677565b9190910192915050565b6001600160a01b0383168152604060208201819052600090612d3790830184614271565b60208082528181018390526000908460408401835b8681101561438757823561436c816146cf565b6001600160a01b031682529183019190830190600101614359565b509695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156143ca578351835292840192918401916001016143ae565b50909695505050505050565b600060208252611b996020830184614271565b60208101611b9c828461429d565b60208082526016908201527513115391125391d7d413d3d317d254d7d4105554d15160521b604082015260600190565b602080825260129082015271141310551193d49357d254d7d4105554d15160721b604082015260600190565b6020808252600a90820152691c994b595b9d195c995960b21b604082015260600190565b600061010080830160018060a01b03808751168552602081818901511681870152604082818a015116818801526060808a0151818901526080808b0151818a015260a0808c0151818b015260c0808d0151818c015260e089818d0152888d51808b526101209a508a8e019150888f018d5b8281101561454d57815180518d1685528b8101518d168c8601528a8101518b860152898101518a86015288810151898601528781015188860152860151805160ff1687860152808c0151868601528a01518e850152928c0192908a01906001016144e8565b505050809b5050505050505050505050509392505050565b60c08101611b9c82846142bf565b8c81526102208101614588602083018e6142bf565b8b60e08301528a61010083015289610120830152886101408301528761016083015286610180830152856101a083015260018060a01b0385166101c08301526145d56101e083018561429d565b8215156102008301529d9c50505050505050505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715614618576146186146b9565b604052919050565b600067ffffffffffffffff82111561463a5761463a6146b9565b50601f01601f191660200190565b6000821982111561465b5761465b6146a3565b500190565b600082821015614672576146726146a3565b500390565b60005b8381101561469257818101518382015260200161467a565b8381111561354a5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146146e457600080fd5b5056fea26469706673582212207fcc5587f230ccf514f1984b8d49be377a810b703f966cd6b1b9879ff4695ac764736f6c63430008030033",
  "devdoc": {
    "author": "develop@teller.finance",
    "kind": "dev",
    "methods": {
      "_updateImplementationStored()": {
        "details": "It uses the LogicVersionsRegistry contract to get the logic address or the cached address if valid.It caches the current logic address for the proxy to reduce gas on subsequent calls within the same block."
      },
      "addSigner(address)": {
        "details": "The sender must be the owner.It throws a require error if the sender is not the owner.",
        "params": {
          "account": "address to add."
        }
      },
      "addSigners(address[])": {
        "details": "The sender must be the owner.It throws a require error if the sender is not the owner.",
        "params": {
          "accounts": "addresses to add."
        }
      },
      "createLoanWithTerms((address,address,address,uint256,uint256,uint256,uint256),(address,address,uint256,uint256,uint256,uint256,(uint8,bytes32,bytes32))[],uint256)": {
        "params": {
          "collateralAmount": "Amount of collateral required for the loan",
          "request": "Struct of the protocol loan request",
          "responses": "List of structs of the protocol loan responses"
        }
      },
      "depositCollateral(address,uint256,uint256)": {
        "params": {
          "amount": "The amount to deposit as collateral.",
          "borrower": "The address of the loan borrower.",
          "loanID": "The ID of the loan the collateral is for"
        }
      },
      "initialize(address,address,address,address)": {
        "params": {
          "collateralTokenAddress": "Address of the collateral token for loans in this contract.",
          "initDynamicProxyLogicAddress": "Address of a deployed InitializeableDynamicProxy contract.",
          "lendingPoolAddress": "Address of the LendingPool.",
          "settingsAddress": "Address for the platform Settings contract."
        }
      },
      "liquidateLoan(uint256)": {
        "params": {
          "loanID": "The ID of the loan to be liquidated"
        }
      },
      "processLoanTerms((address,address,address,uint256,uint256,uint256,uint256),(address,address,uint256,uint256,uint256,uint256,(uint8,bytes32,bytes32))[])": {
        "params": {
          "request": "Struct of the protocol loan request",
          "responses": "List of structs of the protocol loan responses"
        },
        "returns": {
          "_0": "uint256 Interest rate",
          "_1": "uint256 Collateral ratio",
          "_2": "uint256 Maximum loan amount"
        }
      },
      "repay(uint256,uint256)": {
        "params": {
          "amount": "The amount of tokens to pay back to the loan",
          "loanID": "The ID of the loan the payment is for"
        }
      },
      "takeOutLoan(uint256,uint256)": {
        "details": "collateral ratio is a percentage of the loan amount that's required in collateralthe percentage will be *(10**2). I.e. collateralRatio of 5244 means 52.44% collateralis required in the loan. Interest rate is also a percentage with 2 decimal points."
      },
      "withdrawCollateral(uint256,uint256)": {
        "params": {
          "amount": "The amount of collateral token or ether the caller is hoping to withdraw.",
          "loanID": "The ID of the loan the collateral is for"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CollateralDeposited(uint256,address,uint256)": {
        "notice": "This event is emitted when collateral has been deposited for the loan"
      },
      "CollateralWithdrawn(uint256,address,address,uint256)": {
        "notice": "This event is emitted when collateral has been withdrawn"
      },
      "LoanLiquidated(uint256,address,address,int256,uint256)": {
        "notice": "This event is emitted when a loan has been successfully liquidated"
      },
      "LoanRepaid(uint256,address,uint256,address,uint256)": {
        "notice": "This event is emitted when a loan has been successfully repaid"
      },
      "LoanTakenOut(uint256,address,address,uint256)": {
        "notice": "This event is emitted when a loan has been successfully taken out"
      },
      "LoanTermsSet(uint256,address,address,uint256)": {
        "notice": "This event is emitted when loan terms have been successfully set"
      }
    },
    "kind": "user",
    "methods": {
      "LOAN_DATA_LOGIC_NAME()": {
        "notice": "Holds the logic name used for the LoanData contract."
      },
      "LOAN_TERMS_CONSENSUS_LOGIC_NAME()": {
        "notice": "Holds the logic name used for the LoanTermsConsensus contract."
      },
      "_updateImplementationStored()": {
        "notice": "Updates the current implementation logic address for the stored logic name."
      },
      "addSigner(address)": {
        "notice": "It adds a new account as a signer."
      },
      "addSigners(address[])": {
        "notice": "It adds a list of account as signers."
      },
      "assetSettings()": {
        "notice": "It holds the platform AssetSettings instance."
      },
      "cToken()": {
        "notice": "Holds the Compound cToken where the underlying token matches the lending token."
      },
      "canGoToEOA(uint256)": {
        "notice": "See LoanData.canGoToEOA"
      },
      "collateralToken()": {
        "notice": "Holds the collateral token."
      },
      "createLoanWithTerms((address,address,address,uint256,uint256,uint256,uint256),(address,address,uint256,uint256,uint256,uint256,(uint8,bytes32,bytes32))[],uint256)": {
        "notice": "Creates a loan with the loan request and terms"
      },
      "depositCollateral(address,uint256,uint256)": {
        "notice": "Deposit collateral tokens into a loan."
      },
      "getBorrowerLoans(address)": {
        "notice": "See LoanData.getBorrowerLoans"
      },
      "getCollateralInLendingTokens(uint256)": {
        "notice": "See LoanData.getCollateralInLendingTokens"
      },
      "getCollateralNeededInTokens(uint256)": {
        "notice": "See LoanData.getCollateralNeededInTokens"
      },
      "getCollateralNeededInfo(uint256)": {
        "notice": "See LoanData.getCollateralNeededInfo"
      },
      "getInterestOwedFor(uint256,uint256)": {
        "notice": "See LoanData.getInterestOwedFor"
      },
      "getInterestRatio(uint256)": {
        "notice": "See LoanData.getInterestRatio"
      },
      "getLiquidationReward(uint256)": {
        "notice": "See LoanData.getLiquidationReward"
      },
      "getLoanAmount(uint256)": {
        "notice": "See LoanData.getLoanAmount"
      },
      "getTotalOwed(uint256)": {
        "notice": "See LoanData.getTotalOwed"
      },
      "implementationStored()": {
        "notice": "It stores the last known logic address locally to reduce gas costs."
      },
      "initialize(address,address,address,address)": {
        "notice": "Initializes the current contract instance setting the required parameters."
      },
      "isActiveOrSet(uint256)": {
        "notice": "See LoanData.isActiveOrSet"
      },
      "isLiquidable(uint256)": {
        "notice": "See LoanData.isLiquidable"
      },
      "isLoanSecured(uint256)": {
        "notice": "See LoanData.isLoanSecured"
      },
      "lendingPool()": {
        "notice": "Holds the instance of the LendingPool used by the LoanManager."
      },
      "lendingToken()": {
        "notice": "Holds the lending token used for creating loans by the LoanManager and LendingPool."
      },
      "liquidateLoan(uint256)": {
        "notice": "Liquidate a loan if it is expired or under collateralized"
      },
      "loanIDCounter()": {
        "notice": "Holds the ID of loans taken out"
      },
      "loans(uint256)": {
        "notice": "Holds the data of all loans for the lending token."
      },
      "logicName()": {
        "notice": "It represent the logic name (key) used for this proxy."
      },
      "logicRegistry()": {
        "notice": "It returns the logic registry that is used to determine the implementation logic for this proxy."
      },
      "processLoanTerms((address,address,address,uint256,uint256,uint256,uint256),(address,address,uint256,uint256,uint256,uint256,(uint8,bytes32,bytes32))[])": {
        "notice": "Processes the loan request"
      },
      "repay(uint256,uint256)": {
        "notice": "Make a payment to a loan"
      },
      "settings()": {
        "notice": "It holds the platform Settings instance."
      },
      "strictDynamic()": {
        "notice": "Boolean indicating if the proxy must check the registry for a new implementation."
      },
      "takeOutLoan(uint256,uint256)": {
        "notice": "Take out a loan"
      },
      "totalCollateral()": {
        "notice": "Holds the total amount of collateral held by the contract."
      },
      "updateLoanDataLogic()": {
        "notice": "It calls the LogicVersionRegistry to update the stored logic address for LoanData."
      },
      "updateLoanTermsConsensusLogic()": {
        "notice": "It calls the LogicVersionRegistry to update the stored logic address for LoanTermsConsensus."
      },
      "upgradeProxyTo(address)": {
        "notice": "It updates a proxy's cached implementation address.It must only be called by the LogicVersionsRegistry for non strict DynamicProxy"
      },
      "withdrawCollateral(uint256,uint256)": {
        "notice": "Withdraw collateral from a loan, unless this isn't allowed"
      }
    },
    "notice": "This contract is used as a basis for the creation of the different types of loans across the platformIt implements the Base contract from Teller and the ILoanManager",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13960,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "logicRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(LogicVersionsRegistryInterface)14789"
      },
      {
        "astId": 13963,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "logicName",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 13966,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "strictDynamic",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 13969,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "implementationStored",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13972,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "_implementationBlockUpdated",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1898,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "settings",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(SettingsInterface)15153"
      },
      {
        "astId": 1903,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "__gap",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)10_storage"
      },
      {
        "astId": 15523,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "loans",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(Loan)19171_storage)"
      },
      {
        "astId": 10536,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "totalCollateral",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 10541,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "lendingPool",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(LendingPoolInterface)14684"
      },
      {
        "astId": 10545,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "lendingToken",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 10549,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "collateralToken",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 10554,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "cToken",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(CErc20Interface)16245"
      },
      {
        "astId": 10560,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "borrowerLoans",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10564,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "loanIDCounter",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 10568,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "signers",
        "offset": 0,
        "slot": "23",
        "type": "t_struct(AddressArray)17340_storage"
      },
      {
        "astId": 10571,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "initDynamicProxyLogic",
        "offset": 0,
        "slot": "25",
        "type": "t_address"
      },
      {
        "astId": 10574,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "loanData",
        "offset": 0,
        "slot": "26",
        "type": "t_address"
      },
      {
        "astId": 10577,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "loanTermsConsensus",
        "offset": 0,
        "slot": "27",
        "type": "t_address"
      },
      {
        "astId": 10591,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "_notEntered",
        "offset": 20,
        "slot": "27",
        "type": "t_bool"
      },
      {
        "astId": 10595,
        "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
        "label": "assetSettings",
        "offset": 0,
        "slot": "28",
        "type": "t_contract(AssetSettingsInterface)14175"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AssetSettingsInterface)14175": {
        "encoding": "inplace",
        "label": "contract AssetSettingsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(CErc20Interface)16245": {
        "encoding": "inplace",
        "label": "contract CErc20Interface",
        "numberOfBytes": "20"
      },
      "t_contract(LendingPoolInterface)14684": {
        "encoding": "inplace",
        "label": "contract LendingPoolInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LogicVersionsRegistryInterface)14789": {
        "encoding": "inplace",
        "label": "contract LogicVersionsRegistryInterface",
        "numberOfBytes": "20"
      },
      "t_contract(SettingsInterface)15153": {
        "encoding": "inplace",
        "label": "contract SettingsInterface",
        "numberOfBytes": "20"
      },
      "t_enum(LoanStatus)19083": {
        "encoding": "inplace",
        "label": "enum TellerCommon.LoanStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Loan)19171_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TellerCommon.Loan)",
        "numberOfBytes": "32",
        "value": "t_struct(Loan)19171_storage"
      },
      "t_struct(AddressArray)17340_storage": {
        "encoding": "inplace",
        "label": "struct AddressArrayLib.AddressArray",
        "members": [
          {
            "astId": 17335,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "array",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 17339,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "indices",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Loan)19171_storage": {
        "encoding": "inplace",
        "label": "struct TellerCommon.Loan",
        "members": [
          {
            "astId": 19146,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19149,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "loanTerms",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(LoanTerms)19144_storage"
          },
          {
            "astId": 19151,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "termsExpiry",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 19153,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "loanStartTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 19155,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "collateral",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 19157,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "lastCollateralIn",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 19159,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "principalOwed",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 19161,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "interestOwed",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 19163,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "borrowedAmount",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 19165,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "escrow",
            "offset": 0,
            "slot": "14",
            "type": "t_address"
          },
          {
            "astId": 19168,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "status",
            "offset": 20,
            "slot": "14",
            "type": "t_enum(LoanStatus)19083"
          },
          {
            "astId": 19170,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "liquidated",
            "offset": 21,
            "slot": "14",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(LoanTerms)19144_storage": {
        "encoding": "inplace",
        "label": "struct TellerCommon.LoanTerms",
        "members": [
          {
            "astId": 19133,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "borrower",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 19135,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 19137,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "interestRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19139,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "collateralRatio",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 19141,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "maxLoanAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 19143,
            "contract": "contracts/base/loans/LoanManager.sol:LoanManager",
            "label": "duration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}

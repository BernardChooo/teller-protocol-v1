{
  "address": "0xfd7f9D58340DC9849e46752314a6A85d24446bbF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDestination",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "v2RouterAddress",
          "type": "address"
        }
      ],
      "name": "swapWithRouter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfa9f158c5f65a1efa0fce65316e71db4864acd6c0d12f5fccb9ee921a34b06a6",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0xfd7f9D58340DC9849e46752314a6A85d24446bbF",
    "transactionIndex": 0,
    "gasUsed": "566327",
    "logsBloom": "0x
    "blockHash": "0x5b4b11ef4fc0e496004041fa32daf0f3a9eebf92de5cbe7cd4b9aee14b7b919a",
    "transactionHash": "0xfa9f158c5f65a1efa0fce65316e71db4864acd6c0d12f5fccb9ee921a34b06a6",
    "logs": [],
    "blockNumber": 24117028,
    "cumulativeGasUsed": "566327",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0c80e7fb8aff27a671cb2892ea4bafd6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDestination\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"v2RouterAddress\",\"type\":\"address\"}],\"name\":\"swapWithRouter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"develop@teller.finance\",\"kind\":\"dev\",\"methods\":{\"swapWithRouter(address[],uint256,uint256,address)\":{\"params\":{\"minDestination\":\"The minimum amount of output tokens that must be received for the transaction not to revert.\",\"path\":\"An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\",\"sourceAmount\":\"amount of source token to swap.\",\"v2RouterAddress\":\"The UniswapV2Router router address to use.\"},\"returns\":{\"_0\":\"uint256 The destination amount that was acquired from the swap.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swapWithRouter(address[],uint256,uint256,address)\":{\"notice\":\"Swaps tokens using a given UniswapV2Router.\"}},\"notice\":\"This contract is used to swap tokens on Uniswap.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/providers/uniswap/Uniswap.sol\":\"Uniswap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.5/interfaces/AggregatorInterface.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n  function latestTimestamp() external view returns (uint256);\\n  function latestRound() external view returns (uint256);\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0x64fa8b255860b1cf2661a2d87ca287c21479edf18673ca694a770b6498e2de39\"},\"@chainlink/contracts/src/v0.5/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title The V2 & V3 Aggregator Interface\\n * @notice Solidity V0.5 does not allow interfaces to inherit from other\\n * interfaces so this contract is a combination of v0.5 AggregatorInterface.sol\\n * and v0.5 AggregatorV3Interface.sol.\\n */\\ninterface AggregatorV2V3Interface {\\n  //\\n  // V2 Interface:\\n  //\\n  function latestAnswer() external view returns (int256);\\n  function latestTimestamp() external view returns (uint256);\\n  function latestRound() external view returns (uint256);\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n\\n  //\\n  // V3 Interface:\\n  //\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xacc87fdd0c5891084d0a2d801bb968d864f6bebacad14767a399b5b0ad3511f3\"},\"@chainlink/contracts/src/v0.5/interfaces/AggregatorV3Interface.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x636b9f52b4ef5795c35a189a94e95a8f909ed1f7ef799e0218b71d97b3a780a0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Interfaces\\nimport \\\"@chainlink/contracts/src/v0.5/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/*****************************************************************************************************/\\n/**                                             WARNING                                             **/\\n/**                                  THIS CONTRACT IS UPGRADEABLE!                                  **/\\n/**  ---------------------------------------------------------------------------------------------  **/\\n/**  Do NOT change the order of or PREPEND any storage variables to this or new versions of this    **/\\n/**  contract as this will cause the the storage slots to be overwritten on the proxy contract!!    **/\\n/**                                                                                                 **/\\n/**  Visit https://docs.openzeppelin.com/upgrades/2.6/proxies#upgrading-via-the-proxy-pattern for   **/\\n/**  more information.                                                                              **/\\n/*****************************************************************************************************/\\n/**\\n    @notice This contract is used to fetch and calculate prices and values from one token to another through Chainlink Aggregators.\\n    @dev It tries to find an aggregator using the token addresses supplied. If unable, it uses ETH as a pass through asset to construct a path conversion.\\n\\n    @author develop@teller.finance\\n */\\ninterface IPriceAggregator {\\n    /**\\n        @notice It grabs the Chainlink Aggregator contract address for the token pair if it is supported.\\n        @param src Source token address.\\n        @param dst Destination token address.\\n        @return AggregatorV2V3Interface The Chainlink Aggregator address.\\n        @return bool whether or not the values from the Aggregator should be considered inverted.\\n     */\\n    function aggregatorFor(address src, address dst)\\n        external\\n        view\\n        returns (AggregatorV2V3Interface, bool);\\n\\n    function isTokenSupported(address tokenAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n        @notice It calculates the value of a token amount into another.\\n        @param src Source token address.\\n        @param dst Destination token address.\\n        @param srcAmount Amount of the source token to convert into the destination token.\\n        @return uint256 Value of the source token amount in destination tokens.\\n     */\\n    function valueFor(\\n        address src,\\n        address dst,\\n        uint256 srcAmount\\n    ) external view returns (uint256);\\n\\n    /**\\n        @notice It returns the price of the token pair as given from the Chainlink Aggregator.\\n        @dev It tries to use ETH as a pass through asset if the direct pair is not supported.\\n        @param src Source token address.\\n        @param dst Destination token address.\\n        @return uint256 The latest answer as given from Chainlink.\\n     */\\n    function latestAnswerFor(address src, address dst)\\n        external\\n        view\\n        returns (int256);\\n\\n    /**\\n        @notice It allows for additional Chainlink Aggregators to be supported.\\n        @param src Source token address.\\n        @param dst Destination token address.\\n     */\\n    function add(\\n        address src,\\n        address dst,\\n        address aggregator\\n    ) external;\\n\\n    /**\\n        @notice It removes support for a Chainlink Aggregator pair.\\n        @param src Source token address.\\n        @param dst Destination token address.\\n     */\\n    function remove(address src, address dst) external;\\n\\n    /**\\n        @notice It removes support for a Chainlink Aggregator.\\n        @param tokenAddress Token to remove all markets for.\\n     */\\n    function remove(address tokenAddress) external;\\n\\n    function initialize() external;\\n}\\n\",\"keccak256\":\"0x245b8c8272a22c4bf4ae47ae45a0443dba103afb49e805f765c666073fcae023\",\"license\":\"MIT\"},\"contracts/providers/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n    @notice This interface defines the different functions available for a UniswapV2Router.\\n    @author develop@teller.finance\\n */\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    /**\\n        @notice It returns the address of the canonical WETH address;\\n    */\\n    function WETH() external pure returns (address);\\n\\n    /**\\n        @notice Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path. The first element of path is the input token, the last is the output token, and any intermediate elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\\n        @param amountIn The amount of input tokens to send.\\n        @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n        @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\\n        @param to Recipient of the output tokens.\\n        @param deadline Unix timestamp after which the transaction will revert.\\n        @return amounts The input token amount and all subsequent output token amounts.\\n        @dev msg.sender should have already given the router an allowance of at least amountIn on the input token.\\n     */\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    /**\\n        @notice Swaps an exact amount of tokens for as much ETH as possible, along the route determined by the path. The first element of path is the input token, the last must be WETH, and any intermediate elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\\n        @param amountIn The amount of input tokens to send.\\n        @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n        @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\\n        @param to Recipient of the ETH.\\n        @param deadline Unix timestamp after which the transaction will revert.\\n        @return amounts The input token amount and all subsequent output token amounts.\\n        @dev If the to address is a smart contract, it must have the ability to receive ETH.\\n     */\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    /**\\n        @notice Swaps an exact amount of ETH for as many output tokens as possible, along the route determined by the path. The first element of path must be WETH, the last is the output token, and any intermediate elements represent intermediate pairs to trade through (if, for example, a direct pair does not exist).\\n        @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n        @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\\n        @param to Recipient of the output tokens.\\n        @param deadline Unix timestamp after which the transaction will revert.\\n        @return amounts The input token amount and all subsequent output token amounts.\\n     */\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x163f02a4e068fd3073b017c7323370451437fb15351cfbd055abb5ab5577b4c5\",\"license\":\"MIT\"},\"contracts/providers/uniswap/Uniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// External Libraries\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// Interfaces\\nimport \\\"./IUniswapV2Router02.sol\\\";\\nimport \\\"../../interfaces/IPriceAggregator.sol\\\";\\n\\n/*****************************************************************************************************/\\n/**                                             WARNING                                             **/\\n/**                              THIS CONTRACT IS AN UPGRADEABLE FACET!                             **/\\n/**  ---------------------------------------------------------------------------------------------  **/\\n/**  Do NOT place ANY storage/state variables directly in this contract! If you wish to make        **/\\n/**  make changes to the state variables used by this contract, do so in its defined Storage        **/\\n/**  contract that this contract inherits from                                                      **/\\n/**                                                                                                 **/\\n/**  Visit https://docs.openzeppelin.com/upgrades/2.6/proxies#upgrading-via-the-proxy-pattern for   **/\\n/**  more information.                                                                              **/\\n/*****************************************************************************************************/\\n/**\\n * @notice This contract is used to swap tokens on Uniswap.\\n *\\n * @author develop@teller.finance\\n */\\ncontract Uniswap {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Swaps tokens using a given UniswapV2Router.\\n     * @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\\n     * @param sourceAmount amount of source token to swap.\\n     * @param minDestination The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param v2RouterAddress The UniswapV2Router router address to use.\\n     * @return uint256 The destination amount that was acquired from the swap.\\n     */\\n    function swapWithRouter(\\n        address[] memory path,\\n        uint256 sourceAmount,\\n        uint256 minDestination,\\n        address v2RouterAddress\\n    ) public returns (uint256) {\\n        require(path.length >= 2, \\\"UNI_PATH_TOO_SHORT\\\");\\n        address source = path[0];\\n        address destination = path[path.length - 1];\\n        require(source != destination, \\\"UNI_SRC_DST_SAME\\\");\\n\\n        IERC20(source).safeIncreaseAllowance(v2RouterAddress, sourceAmount);\\n        uint256[] memory amounts =\\n            IUniswapV2Router02(v2RouterAddress).swapExactTokensForTokens(\\n                sourceAmount,\\n                minDestination,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n\\n        require(amounts.length == path.length, \\\"UNI_ERROR_SWAPPING\\\");\\n        return amounts[amounts.length - 1];\\n    }\\n}\\n\",\"keccak256\":\"0x80b895767b3d42e8dc294aed36ffdd59fe492fbfcedb5d2b32cdf0ee1ab17cf7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610948806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063efcbb09214610030575b600080fd5b61004361003e3660046105eb565b610055565b60405190815260200160405180910390f35b60006002855110156100a35760405162461bcd60e51b815260206004820152601260248201527115539257d410551217d513d3d7d4d213d49560721b60448201526064015b60405180910390fd5b6000856000815181106100c657634e487b7160e01b600052603260045260246000fd5b60200260200101519050600086600188516100e191906108a3565b815181106100ff57634e487b7160e01b600052603260045260246000fd5b60200260200101519050806001600160a01b0316826001600160a01b0316141561015e5760405162461bcd60e51b815260206004820152601060248201526f554e495f5352435f4453545f53414d4560801b604482015260640161009a565b6101726001600160a01b0383168588610289565b6040516338ed173960e01b81526000906001600160a01b038616906338ed1739906101a9908a908a908d90309042906004016107c6565b600060405180830381600087803b1580156101c357600080fd5b505af11580156101d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101ff91908101906106ac565b905087518151146102475760405162461bcd60e51b8152602060048201526012602482015271554e495f4552524f525f5357415050494e4760701b604482015260640161009a565b806001825161025691906108a3565b8151811061027457634e487b7160e01b600052603260045260246000fd5b60200260200101519350505050949350505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156102d557600080fd5b505afa1580156102e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030d919061075f565b610317919061088b565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905290915061036c908590610372565b50505050565b60006103c7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166104499092919063ffffffff16565b80519091501561044457808060200190518101906103e5919061073f565b6104445760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161009a565b505050565b60606104588484600085610462565b90505b9392505050565b6060824710156104c35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161009a565b6104cc85610591565b6105185760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161009a565b600080866001600160a01b031685876040516105349190610777565b60006040518083038185875af1925050503d8060008114610571576040519150601f19603f3d011682016040523d82523d6000602084013e610576565b606091505b509150915061058682828661059b565b979650505050505050565b803b15155b919050565b606083156105aa57508161045b565b8251156105ba5782518084602001fd5b8160405162461bcd60e51b815260040161009a9190610793565b80356001600160a01b038116811461059657600080fd5b60008060008060808587031215610600578384fd5b843567ffffffffffffffff811115610616578485fd5b8501601f81018713610626578485fd5b8035602061063b61063683610867565b610836565b8083825282820191508285018b848660051b880101111561065a57898afd5b8995505b848610156106835761066f816105d4565b83526001959095019491830191830161065e565b5097505087013594505050604085013591506106a1606086016105d4565b905092959194509250565b600060208083850312156106be578182fd5b825167ffffffffffffffff8111156106d4578283fd5b8301601f810185136106e4578283fd5b80516106f261063682610867565b80828252848201915084840188868560051b8701011115610711578687fd5b8694505b83851015610733578051835260019490940193918501918501610715565b50979650505050505050565b600060208284031215610750578081fd5b8151801515811461045b578182fd5b600060208284031215610770578081fd5b5051919050565b600082516107898184602087016108ba565b9190910192915050565b60006020825282518060208401526107b28160408501602087016108ba565b601f01601f19169190910160400192915050565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b818110156108155784516001600160a01b0316835293830193918301916001016107f0565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561085f5761085f6108fc565b604052919050565b600067ffffffffffffffff821115610881576108816108fc565b5060051b60200190565b6000821982111561089e5761089e6108e6565b500190565b6000828210156108b5576108b56108e6565b500390565b60005b838110156108d55781810151838201526020016108bd565b8381111561036c5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220eaded4731656f1ca9959dc069d00c1666eec560c870714a222dd0d60435c9fe764736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063efcbb09214610030575b600080fd5b61004361003e3660046105eb565b610055565b60405190815260200160405180910390f35b60006002855110156100a35760405162461bcd60e51b815260206004820152601260248201527115539257d410551217d513d3d7d4d213d49560721b60448201526064015b60405180910390fd5b6000856000815181106100c657634e487b7160e01b600052603260045260246000fd5b60200260200101519050600086600188516100e191906108a3565b815181106100ff57634e487b7160e01b600052603260045260246000fd5b60200260200101519050806001600160a01b0316826001600160a01b0316141561015e5760405162461bcd60e51b815260206004820152601060248201526f554e495f5352435f4453545f53414d4560801b604482015260640161009a565b6101726001600160a01b0383168588610289565b6040516338ed173960e01b81526000906001600160a01b038616906338ed1739906101a9908a908a908d90309042906004016107c6565b600060405180830381600087803b1580156101c357600080fd5b505af11580156101d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101ff91908101906106ac565b905087518151146102475760405162461bcd60e51b8152602060048201526012602482015271554e495f4552524f525f5357415050494e4760701b604482015260640161009a565b806001825161025691906108a3565b8151811061027457634e487b7160e01b600052603260045260246000fd5b60200260200101519350505050949350505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156102d557600080fd5b505afa1580156102e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030d919061075f565b610317919061088b565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905290915061036c908590610372565b50505050565b60006103c7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166104499092919063ffffffff16565b80519091501561044457808060200190518101906103e5919061073f565b6104445760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161009a565b505050565b60606104588484600085610462565b90505b9392505050565b6060824710156104c35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161009a565b6104cc85610591565b6105185760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161009a565b600080866001600160a01b031685876040516105349190610777565b60006040518083038185875af1925050503d8060008114610571576040519150601f19603f3d011682016040523d82523d6000602084013e610576565b606091505b509150915061058682828661059b565b979650505050505050565b803b15155b919050565b606083156105aa57508161045b565b8251156105ba5782518084602001fd5b8160405162461bcd60e51b815260040161009a9190610793565b80356001600160a01b038116811461059657600080fd5b60008060008060808587031215610600578384fd5b843567ffffffffffffffff811115610616578485fd5b8501601f81018713610626578485fd5b8035602061063b61063683610867565b610836565b8083825282820191508285018b848660051b880101111561065a57898afd5b8995505b848610156106835761066f816105d4565b83526001959095019491830191830161065e565b5097505087013594505050604085013591506106a1606086016105d4565b905092959194509250565b600060208083850312156106be578182fd5b825167ffffffffffffffff8111156106d4578283fd5b8301601f810185136106e4578283fd5b80516106f261063682610867565b80828252848201915084840188868560051b8701011115610711578687fd5b8694505b83851015610733578051835260019490940193918501918501610715565b50979650505050505050565b600060208284031215610750578081fd5b8151801515811461045b578182fd5b600060208284031215610770578081fd5b5051919050565b600082516107898184602087016108ba565b9190910192915050565b60006020825282518060208401526107b28160408501602087016108ba565b601f01601f19169190910160400192915050565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b818110156108155784516001600160a01b0316835293830193918301916001016107f0565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561085f5761085f6108fc565b604052919050565b600067ffffffffffffffff821115610881576108816108fc565b5060051b60200190565b6000821982111561089e5761089e6108e6565b500190565b6000828210156108b5576108b56108e6565b500390565b60005b838110156108d55781810151838201526020016108bd565b8381111561036c5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220eaded4731656f1ca9959dc069d00c1666eec560c870714a222dd0d60435c9fe764736f6c63430008030033",
  "devdoc": {
    "author": "develop@teller.finance",
    "kind": "dev",
    "methods": {
      "swapWithRouter(address[],uint256,uint256,address)": {
        "params": {
          "minDestination": "The minimum amount of output tokens that must be received for the transaction not to revert.",
          "path": "An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.",
          "sourceAmount": "amount of source token to swap.",
          "v2RouterAddress": "The UniswapV2Router router address to use."
        },
        "returns": {
          "_0": "uint256 The destination amount that was acquired from the swap."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "swapWithRouter(address[],uint256,uint256,address)": {
        "notice": "Swaps tokens using a given UniswapV2Router."
      }
    },
    "notice": "This contract is used to swap tokens on Uniswap.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}

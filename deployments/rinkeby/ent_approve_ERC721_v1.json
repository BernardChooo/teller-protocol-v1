{
  "address": "0x2978e90bE88B589B296641Ad5406B2a5f98B72df",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x02ed6eea9c1cfa9e893f39c3f65ab98fee8b582a544ce6a739bdcb89078fdbc6",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0x2978e90bE88B589B296641Ad5406B2a5f98B72df",
    "transactionIndex": 0,
    "gasUsed": "281961",
    "logsBloom": "0x
    "blockHash": "0xe44bff6555aec297c02053d5c327d0fe64496576177a7e4d85d3220381418fb5",
    "transactionHash": "0x02ed6eea9c1cfa9e893f39c3f65ab98fee8b582a544ce6a739bdcb89078fdbc6",
    "logs": [],
    "blockNumber": 8363116,
    "cumulativeGasUsed": "281961",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5c6a9058c46611581868a70d5eba78f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"diamonds/contexts/ERC721/entry/approve.sol\":\"ent_approve_ERC721_v1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"diamonds/contexts/ERC721/data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary ERC721EventsLib {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x1ae796554e3f406d85e3e1b6e7c3a1b7ef495ee13df4af9c42b6138638627c85\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/entry/approve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"../storage/ERC721.sol\\\";\\nimport \\\"../internal/approve.sol\\\";\\n\\ncontract ent_approve_ERC721_v1 is sto_ERC721, int_approve_ERC721_v1 {\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) external virtual {\\n        address owner = erc721Store().owners[tokenId];\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            msg.sender == owner || _isApprovedForAll(owner, msg.sender),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        external\\n        virtual\\n    {\\n        require(operator != msg.sender, \\\"ERC721: approve to caller\\\");\\n\\n        _setApprovalForAll(operator, approved);\\n    }\\n}\\n\",\"keccak256\":\"0x8a147ffce3a8a9cb96c45a8030474b82091b5ff5407d0d2086cc4be455441feb\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/internal/approve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"../storage/ERC721.sol\\\";\\nimport { int_exists_ERC721_v1 } from \\\"./exists.sol\\\";\\n\\n// Utils\\nimport { ERC721EventsLib } from \\\"../data.sol\\\";\\n\\nabstract contract int_approve_ERC721_v1 is sto_ERC721, int_exists_ERC721_v1 {\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        erc721Store().tokenApprovals[tokenId] = to;\\n        emit ERC721EventsLib.Approval(\\n            erc721Store().owners[tokenId],\\n            to,\\n            tokenId\\n        );\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address operator, bool approved)\\n        internal\\n        virtual\\n    {\\n        erc721Store().operatorApprovals[msg.sender][operator] = approved;\\n        emit ERC721EventsLib.ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = erc721Store().owners[tokenId];\\n        return (spender == owner ||\\n            erc721Store().tokenApprovals[tokenId] == spender ||\\n            erc721Store().operatorApprovals[owner][spender]);\\n    }\\n\\n    /**\\n     * @dev Returns whether `operator` is allowed to manage all of `owner` tokens.\\n     */\\n    function _isApprovedForAll(address owner, address operator)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return erc721Store().operatorApprovals[owner][operator];\\n    }\\n}\\n\",\"keccak256\":\"0xf01b4b5b9ff68c0ed739f2d802e38b10fd13eab1792accb6cf92410c7c357379\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/internal/exists.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"../storage/ERC721.sol\\\";\\n\\nabstract contract int_exists_ERC721_v1 is sto_ERC721 {\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return erc721Store().owners[tokenId] != address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x5290c03ebf2f1acdc8416f3bdcc640537d636020a5960e11375f6ace8051653d\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/storage/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract sto_ERC721 {\\n    struct ERC721Storage {\\n        // Token name\\n        string name;\\n        // Token symbol\\n        string symbol;\\n        // Mapping from token ID to owner address\\n        mapping(uint256 => address) owners;\\n        // Mapping owner address to token count\\n        mapping(address => uint256) balances;\\n        // Mapping from token ID to approved address\\n        mapping(uint256 => address) tokenApprovals;\\n        // Mapping from owner to operator approvals\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    function erc721Store() internal pure returns (ERC721Storage storage s) {\\n        bytes32 position = keccak256(\\\"teller_protocol.ERC721_token\\\");\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa7e97bf0b2a7cb6a50dbf0ec070901b154b8e4c745ebcec9e2b398852992a0c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610423806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063095ea7b31461003b578063a22cb46514610050575b600080fd5b61004e6100493660046103c4565b610063565b005b61004e61005e36600461038a565b6101d7565b60008181527f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d99f60205260409020546001600160a01b039081169083168114156100fd5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061015657506001600160a01b03811660009081527f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d9a26020908152604080832033845290915290205460ff165b6101c85760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016100f4565b6101d2838361023e565b505050565b6001600160a01b0382163314156102305760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016100f4565b61023a82826102e3565b5050565b60008181527f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d9a16020908152604080832080546001600160a01b0319166001600160a01b038781169182179092557f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d99f909352818420549151859492909116917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a45050565b3360008181527f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d9a2602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b80356001600160a01b038116811461038557600080fd5b919050565b6000806040838503121561039c578182fd5b6103a58361036e565b9150602083013580151581146103b9578182fd5b809150509250929050565b600080604083850312156103d6578182fd5b6103df8361036e565b94602093909301359350505056fea26469706673582212201a5a9644ec42d6fd9bb21f75c63fe71d56be50956462d28b5d79505836456a5564736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063095ea7b31461003b578063a22cb46514610050575b600080fd5b61004e6100493660046103c4565b610063565b005b61004e61005e36600461038a565b6101d7565b60008181527f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d99f60205260409020546001600160a01b039081169083168114156100fd5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061015657506001600160a01b03811660009081527f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d9a26020908152604080832033845290915290205460ff165b6101c85760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016100f4565b6101d2838361023e565b505050565b6001600160a01b0382163314156102305760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016100f4565b61023a82826102e3565b5050565b60008181527f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d9a16020908152604080832080546001600160a01b0319166001600160a01b038781169182179092557f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d99f909352818420549151859492909116917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a45050565b3360008181527f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d9a2602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b80356001600160a01b038116811461038557600080fd5b919050565b6000806040838503121561039c578182fd5b6103a58361036e565b9150602083013580151581146103b9578182fd5b809150509250929050565b600080604083850312156103d6578182fd5b6103df8361036e565b94602093909301359350505056fea26469706673582212201a5a9644ec42d6fd9bb21f75c63fe71d56be50956462d28b5d79505836456a5564736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}

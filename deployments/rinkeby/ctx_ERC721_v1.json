{
  "address": "0x6cE10B2FFd73a8384Cdc072f14097E1746Bb93f4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4b85149066bdfe9259dc412b98b16d6d7ad1fab8fc3b8c8af5c8766d7b22389c",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0x6cE10B2FFd73a8384Cdc072f14097E1746Bb93f4",
    "transactionIndex": 2,
    "gasUsed": "1097128",
    "logsBloom": "0x
    "blockHash": "0x06bc5e2dbe71dffda26c73e6a067a02eeda8b2baeca2bb7e735035324f80eae8",
    "transactionHash": "0x4b85149066bdfe9259dc412b98b16d6d7ad1fab8fc3b8c8af5c8766d7b22389c",
    "logs": [],
    "blockNumber": 8361868,
    "cumulativeGasUsed": "1186789",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7e129727dcb3b47e20291ca868c9b416",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"diamonds/contexts/ERC721/context.sol\":\"ctx_ERC721_v1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./storage/ERC721.sol\\\";\\nimport \\\"./internal/ERC721.sol\\\";\\nimport \\\"./data.sol\\\";\\n\\ncontract ctx_ERC721_v1 is dat_ERC721, sto_ERC721, int_ERC721_v1 {\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) external view virtual returns (uint256) {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n        return erc721Store().balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) external view virtual returns (address) {\\n        address owner = erc721Store().owners[tokenId];\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: owner query for nonexistent token\\\"\\n        );\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() external view virtual returns (string memory) {\\n        return erc721Store().name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() external view virtual returns (string memory) {\\n        return erc721Store().symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        external\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, _tokenURI(tokenId)))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) external virtual {\\n        address owner = erc721Store().owners[tokenId];\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            msg.sender == owner || _isApprovedForAll(owner, msg.sender),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        virtual\\n        returns (address)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n\\n        return erc721Store().tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        external\\n        virtual\\n    {\\n        require(operator != msg.sender, \\\"ERC721: approve to caller\\\");\\n\\n        erc721Store().operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return _isApprovedForAll(owner, operator);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external virtual {\\n        require(\\n            _isApprovedOrOwner(msg.sender, tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external virtual {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) external virtual {\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n}\\n\",\"keccak256\":\"0x21e2cb7648b86d19ec4c85016ac5eafeba8f749bc5a262ecb9a0ab98e3142769\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract dat_ERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x126074a9affac448071cae1e2b8670af4eb67e45c3ba2beae00b9a8c613169ae\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/internal/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"../data.sol\\\";\\nimport \\\"../storage/ERC721.sol\\\";\\nimport { int_exists_ERC721_v1 } from \\\"./exists.sol\\\";\\nimport { int_checkOnReceived_ERC721_v1 } from \\\"./check-received.sol\\\";\\nimport { int_beforeTokenTransfer_ERC721_v1 } from \\\"./before-token-transfer.sol\\\";\\nimport { int_metadata_ERC721_v1 } from \\\"./metadata.sol\\\";\\nimport { int_approve_ERC721_v1 } from \\\"./approve.sol\\\";\\nimport { int_transfer_ERC721_v1 } from \\\"./transfer.sol\\\";\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract int_ERC721_v1 is\\n    dat_ERC721,\\n    sto_ERC721,\\n    int_exists_ERC721_v1,\\n    int_checkOnReceived_ERC721_v1,\\n    int_beforeTokenTransfer_ERC721_v1,\\n    int_metadata_ERC721_v1,\\n    int_approve_ERC721_v1,\\n    int_transfer_ERC721_v1\\n{\\n    using Address for address;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        require(\\n            _isApprovedOrOwner(msg.sender, tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = erc721Store().owners[tokenId];\\n        return (spender == owner ||\\n            erc721Store().tokenApprovals[tokenId] == spender ||\\n            erc721Store().operatorApprovals[owner][spender]);\\n    }\\n\\n    /**\\n     * @dev Returns whether `operator` is allowed to manage all of `owner` tokens.\\n     */\\n    function _isApprovedForAll(address owner, address operator)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return erc721Store().operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = erc721Store().owners[tokenId];\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        erc721Store().balances[owner] -= 1;\\n        delete erc721Store().owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual override {\\n        erc721Store().tokenApprovals[tokenId] = to;\\n        emit Approval(erc721Store().owners[tokenId], to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xd7178a314dfb9fedfedc71257d92b96a338e2be9bf6b13e297853362f81c05c9\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/internal/approve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contrcats\\nimport \\\"../data.sol\\\";\\nimport \\\"../storage/ERC721.sol\\\";\\n\\nabstract contract int_approve_ERC721_v1 is dat_ERC721, sto_ERC721 {\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        erc721Store().tokenApprovals[tokenId] = to;\\n        emit Approval(erc721Store().owners[tokenId], to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xf64bdafa16a3e151430958cf7ed4177d3b90099ab19de815fc89712c5a85075e\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/internal/before-token-transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract int_beforeTokenTransfer_ERC721_v1 {\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x2a73815dd8cc4529f5c34b3ce7a8a5bc8e702621d0ade832734b38e18fdd833f\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/internal/check-received.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Interfaces\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract int_checkOnReceived_ERC721_v1 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    msg.sender,\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x95e25cf008d625c41cd94d0aa3000653671126f0cf0176f6ab9370ebc4fb1192\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/internal/exists.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"../storage/ERC721.sol\\\";\\n\\nabstract contract int_exists_ERC721_v1 is sto_ERC721 {\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return erc721Store().owners[tokenId] != address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x5290c03ebf2f1acdc8416f3bdcc640537d636020a5960e11375f6ace8051653d\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/internal/metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nabstract contract int_metadata_ERC721_v1 {\\n    using Strings for uint256;\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Token URI for computing {tokenURI}. Will be appended to {_baseURI}.\\n     */\\n    function _tokenURI(uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        return tokenId.toString();\\n    }\\n}\\n\",\"keccak256\":\"0x07a558006b6d756ecd87d9993e65d33b8a332fe5175002c0fbeb0c2b352e5fbb\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/internal/transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"../storage/ERC721.sol\\\";\\nimport \\\"../data.sol\\\";\\nimport { int_beforeTokenTransfer_ERC721_v1 } from \\\"./before-token-transfer.sol\\\";\\nimport { int_approve_ERC721_v1 } from \\\"./approve.sol\\\";\\n\\nabstract contract int_transfer_ERC721_v1 is\\n    sto_ERC721,\\n    int_beforeTokenTransfer_ERC721_v1,\\n    int_approve_ERC721_v1\\n{\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            erc721Store().owners[tokenId] == from,\\n            \\\"ERC721: transfer of token that is not own\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        erc721Store().balances[from] -= 1;\\n        erc721Store().balances[to] += 1;\\n        erc721Store().owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n}\\n\\nabstract contract int_transfer_ERC721 is int_transfer_ERC721_v1 {}\\n\",\"keccak256\":\"0x81c940e9ae6490a965215f5e1e2c90101db72fa6cc1c7e6903cabf4658c9cff6\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/storage/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract sto_ERC721 {\\n    struct ERC721Storage {\\n        // Token name\\n        string name;\\n        // Token symbol\\n        string symbol;\\n        // Mapping from token ID to owner address\\n        mapping(uint256 => address) owners;\\n        // Mapping owner address to token count\\n        mapping(address => uint256) balances;\\n        // Mapping from token ID to approved address\\n        mapping(uint256 => address) tokenApprovals;\\n        // Mapping from owner to operator approvals\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    function erc721Store() internal pure returns (ERC721Storage storage s) {\\n        bytes32 position = keccak256(\\\"teller_protocol.ERC721_token\\\");\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0d241ffafab867a1d0de6b7f2fbbf2c4cef4bd9e4c6f245748b63840502dd5e2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506112e2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a082311461015057806395d89b4114610171578063a22cb46514610179578063b88d4fde1461018c578063c87b56dd1461019f578063e985e9c5146101b2576100b4565b806306fdde03146100b9578063081812fc146100d7578063095ea7b31461010257806323b872dd1461011757806342842e0e1461012a5780636352211e1461013d575b600080fd5b6100c16101d5565b6040516100ce91906110db565b60405180910390f35b6100ea6100e536600461102b565b61026d565b6040516001600160a01b0390911681526020016100ce565b610115610110366004610fda565b61030a565b005b610115610125366004610e90565b61042c565b610115610138366004610e90565b61045d565b6100ea61014b36600461102b565b610478565b61016361015e366004610e44565b610506565b6040519081526020016100ce565b6100c161059b565b610115610187366004610fa0565b6105b3565b61011561019a366004610ecb565b61068f565b6100c16101ad36600461102b565b6106a1565b6101c56101c0366004610e5e565b610779565b60405190151581526020016100ce565b60606101df610785565b80546101ea90611200565b80601f016020809104026020016040519081016040528092919081815260200182805461021690611200565b80156102635780601f1061023857610100808354040283529160200191610263565b820191906000526020600020905b81548152906001019060200180831161024657829003601f168201915b5050505050905090565b6000610278826107a9565b6102de5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b6102e6610785565b600083815260049190910160205260409020546001600160a01b031690505b919050565b6000610314610785565b600083815260029190910160205260409020546001600160a01b039081169150831681141561038f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016102d5565b336001600160a01b03821614806103ab57506103ab81336107d7565b61041d5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016102d5565b6104278383610814565b505050565b610436338261089e565b6104525760405162461bcd60e51b81526004016102d590611140565b6104278383836109b3565b61042783838360405180602001604052806000815250610ba1565b600080610483610785565b600084815260029190910160205260409020546001600160a01b03169050806105005760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016102d5565b92915050565b60006001600160a01b0382166105715760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016102d5565b610579610785565b6001600160a01b03929092166000908152600390920160205250604090205490565b60606105a5610785565b60010180546101ea90611200565b6001600160a01b03821633141561060c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016102d5565b80610615610785565b336000818152600592909201602090815260408084206001600160a01b038816808652925292839020805494151560ff199095169490941790935590517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319061068390851515815260200190565b60405180910390a35050565b61069b84848484610ba1565b50505050565b60606106ac826107a9565b6107105760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016102d5565b600061072760408051602081019091526000815290565b905060008151116107475760405180602001604052806000815250610772565b8061075184610bfa565b60405160200161076292919061106f565b6040516020818303038152906040525b9392505050565b600061077283836107d7565b7f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d99d90565b6000806107b4610785565b60009384526002016020526040909220546001600160a01b031690911415919050565b60006107e1610785565b6001600160a01b039384166000908152600591909101602090815260408083209490951682529290925250205460ff1690565b8161081d610785565b60008381526004919091016020526040902080546001600160a01b0319166001600160a01b0392831617905581908316610855610785565b600084815260029190910160205260408082205490516001600160a01b03909116917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a45050565b60006108a9826107a9565b61090a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016102d5565b6000610914610785565b600084815260029190910160205260409020546001600160a01b039081169150841681148061096e5750836001600160a01b0316610950610785565b600085815260049190910160205260409020546001600160a01b0316145b806109ab575061097c610785565b6001600160a01b03808316600090815260059290920160209081526040808420928816845291905290205460ff165b949350505050565b826001600160a01b03166109c5610785565b600083815260029190910160205260409020546001600160a01b031614610a405760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016102d5565b6001600160a01b038216610aa25760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016102d5565b610aad600082610814565b6001610ab7610785565b6003016000856001600160a01b03166001600160a01b031681526020019081526020016000206000828254610aec91906111bd565b9091555060019050610afc610785565b6003016000846001600160a01b03166001600160a01b031681526020019081526020016000206000828254610b319190611191565b90915550829050610b40610785565b6000838152600291909101602052604080822080546001600160a01b0319166001600160a01b0394851617905551839285811692908716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4505050565b610bab338361089e565b610bc75760405162461bcd60e51b81526004016102d590611140565b610bd28484846109b3565b610bde84848484610c05565b61069b5760405162461bcd60e51b81526004016102d5906110ee565b606061050082610d12565b60006001600160a01b0384163b15610d0757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610c4990339089908890889060040161109e565b602060405180830381600087803b158015610c6357600080fd5b505af1925050508015610c93575060408051601f3d908101601f19168201909252610c9091810190611003565b60015b610ced573d808015610cc1576040519150601f19603f3d011682016040523d82523d6000602084013e610cc6565b606091505b508051610ce55760405162461bcd60e51b81526004016102d5906110ee565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506109ab565b506001949350505050565b606081610d3757506040805180820190915260018152600360fc1b6020820152610305565b8160005b8115610d615780610d4b8161123b565b9150610d5a9050600a836111a9565b9150610d3b565b60008167ffffffffffffffff811115610d8a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610db4576020820181803683370190505b5090505b84156109ab57610dc96001836111bd565b9150610dd6600a86611256565b610de1906030611191565b60f81b818381518110610e0457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610e26600a866111a9565b9450610db8565b80356001600160a01b038116811461030557600080fd5b600060208284031215610e55578081fd5b61077282610e2d565b60008060408385031215610e70578081fd5b610e7983610e2d565b9150610e8760208401610e2d565b90509250929050565b600080600060608486031215610ea4578081fd5b610ead84610e2d565b9250610ebb60208501610e2d565b9150604084013590509250925092565b60008060008060808587031215610ee0578081fd5b610ee985610e2d565b9350610ef760208601610e2d565b925060408501359150606085013567ffffffffffffffff80821115610f1a578283fd5b818701915087601f830112610f2d578283fd5b813581811115610f3f57610f3f611296565b604051601f8201601f19908116603f01168101908382118183101715610f6757610f67611296565b816040528281528a6020848701011115610f7f578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215610fb2578182fd5b610fbb83610e2d565b915060208301358015158114610fcf578182fd5b809150509250929050565b60008060408385031215610fec578182fd5b610ff583610e2d565b946020939093013593505050565b600060208284031215611014578081fd5b81516001600160e01b031981168114610772578182fd5b60006020828403121561103c578081fd5b5035919050565b6000815180845261105b8160208601602086016111d4565b601f01601f19169290920160200192915050565b600083516110818184602088016111d4565b8351908301906110958183602088016111d4565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906110d190830184611043565b9695505050505050565b6000602082526107726020830184611043565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156111a4576111a461126a565b500190565b6000826111b8576111b8611280565b500490565b6000828210156111cf576111cf61126a565b500390565b60005b838110156111ef5781810151838201526020016111d7565b8381111561069b5750506000910152565b600181811c9082168061121457607f821691505b6020821081141561123557634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561124f5761124f61126a565b5060010190565b60008261126557611265611280565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122025d32e15b72888ade250738cfff9f2e82ae92cca3ff8a9f1eb6bb8fa98f255fe64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a082311461015057806395d89b4114610171578063a22cb46514610179578063b88d4fde1461018c578063c87b56dd1461019f578063e985e9c5146101b2576100b4565b806306fdde03146100b9578063081812fc146100d7578063095ea7b31461010257806323b872dd1461011757806342842e0e1461012a5780636352211e1461013d575b600080fd5b6100c16101d5565b6040516100ce91906110db565b60405180910390f35b6100ea6100e536600461102b565b61026d565b6040516001600160a01b0390911681526020016100ce565b610115610110366004610fda565b61030a565b005b610115610125366004610e90565b61042c565b610115610138366004610e90565b61045d565b6100ea61014b36600461102b565b610478565b61016361015e366004610e44565b610506565b6040519081526020016100ce565b6100c161059b565b610115610187366004610fa0565b6105b3565b61011561019a366004610ecb565b61068f565b6100c16101ad36600461102b565b6106a1565b6101c56101c0366004610e5e565b610779565b60405190151581526020016100ce565b60606101df610785565b80546101ea90611200565b80601f016020809104026020016040519081016040528092919081815260200182805461021690611200565b80156102635780601f1061023857610100808354040283529160200191610263565b820191906000526020600020905b81548152906001019060200180831161024657829003601f168201915b5050505050905090565b6000610278826107a9565b6102de5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b6102e6610785565b600083815260049190910160205260409020546001600160a01b031690505b919050565b6000610314610785565b600083815260029190910160205260409020546001600160a01b039081169150831681141561038f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016102d5565b336001600160a01b03821614806103ab57506103ab81336107d7565b61041d5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016102d5565b6104278383610814565b505050565b610436338261089e565b6104525760405162461bcd60e51b81526004016102d590611140565b6104278383836109b3565b61042783838360405180602001604052806000815250610ba1565b600080610483610785565b600084815260029190910160205260409020546001600160a01b03169050806105005760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016102d5565b92915050565b60006001600160a01b0382166105715760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016102d5565b610579610785565b6001600160a01b03929092166000908152600390920160205250604090205490565b60606105a5610785565b60010180546101ea90611200565b6001600160a01b03821633141561060c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016102d5565b80610615610785565b336000818152600592909201602090815260408084206001600160a01b038816808652925292839020805494151560ff199095169490941790935590517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319061068390851515815260200190565b60405180910390a35050565b61069b84848484610ba1565b50505050565b60606106ac826107a9565b6107105760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016102d5565b600061072760408051602081019091526000815290565b905060008151116107475760405180602001604052806000815250610772565b8061075184610bfa565b60405160200161076292919061106f565b6040516020818303038152906040525b9392505050565b600061077283836107d7565b7f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d99d90565b6000806107b4610785565b60009384526002016020526040909220546001600160a01b031690911415919050565b60006107e1610785565b6001600160a01b039384166000908152600591909101602090815260408083209490951682529290925250205460ff1690565b8161081d610785565b60008381526004919091016020526040902080546001600160a01b0319166001600160a01b0392831617905581908316610855610785565b600084815260029190910160205260408082205490516001600160a01b03909116917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a45050565b60006108a9826107a9565b61090a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016102d5565b6000610914610785565b600084815260029190910160205260409020546001600160a01b039081169150841681148061096e5750836001600160a01b0316610950610785565b600085815260049190910160205260409020546001600160a01b0316145b806109ab575061097c610785565b6001600160a01b03808316600090815260059290920160209081526040808420928816845291905290205460ff165b949350505050565b826001600160a01b03166109c5610785565b600083815260029190910160205260409020546001600160a01b031614610a405760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016102d5565b6001600160a01b038216610aa25760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016102d5565b610aad600082610814565b6001610ab7610785565b6003016000856001600160a01b03166001600160a01b031681526020019081526020016000206000828254610aec91906111bd565b9091555060019050610afc610785565b6003016000846001600160a01b03166001600160a01b031681526020019081526020016000206000828254610b319190611191565b90915550829050610b40610785565b6000838152600291909101602052604080822080546001600160a01b0319166001600160a01b0394851617905551839285811692908716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a4505050565b610bab338361089e565b610bc75760405162461bcd60e51b81526004016102d590611140565b610bd28484846109b3565b610bde84848484610c05565b61069b5760405162461bcd60e51b81526004016102d5906110ee565b606061050082610d12565b60006001600160a01b0384163b15610d0757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610c4990339089908890889060040161109e565b602060405180830381600087803b158015610c6357600080fd5b505af1925050508015610c93575060408051601f3d908101601f19168201909252610c9091810190611003565b60015b610ced573d808015610cc1576040519150601f19603f3d011682016040523d82523d6000602084013e610cc6565b606091505b508051610ce55760405162461bcd60e51b81526004016102d5906110ee565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506109ab565b506001949350505050565b606081610d3757506040805180820190915260018152600360fc1b6020820152610305565b8160005b8115610d615780610d4b8161123b565b9150610d5a9050600a836111a9565b9150610d3b565b60008167ffffffffffffffff811115610d8a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610db4576020820181803683370190505b5090505b84156109ab57610dc96001836111bd565b9150610dd6600a86611256565b610de1906030611191565b60f81b818381518110610e0457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610e26600a866111a9565b9450610db8565b80356001600160a01b038116811461030557600080fd5b600060208284031215610e55578081fd5b61077282610e2d565b60008060408385031215610e70578081fd5b610e7983610e2d565b9150610e8760208401610e2d565b90509250929050565b600080600060608486031215610ea4578081fd5b610ead84610e2d565b9250610ebb60208501610e2d565b9150604084013590509250925092565b60008060008060808587031215610ee0578081fd5b610ee985610e2d565b9350610ef760208601610e2d565b925060408501359150606085013567ffffffffffffffff80821115610f1a578283fd5b818701915087601f830112610f2d578283fd5b813581811115610f3f57610f3f611296565b604051601f8201601f19908116603f01168101908382118183101715610f6757610f67611296565b816040528281528a6020848701011115610f7f578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215610fb2578182fd5b610fbb83610e2d565b915060208301358015158114610fcf578182fd5b809150509250929050565b60008060408385031215610fec578182fd5b610ff583610e2d565b946020939093013593505050565b600060208284031215611014578081fd5b81516001600160e01b031981168114610772578182fd5b60006020828403121561103c578081fd5b5035919050565b6000815180845261105b8160208601602086016111d4565b601f01601f19169290920160200192915050565b600083516110818184602088016111d4565b8351908301906110958183602088016111d4565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906110d190830184611043565b9695505050505050565b6000602082526107726020830184611043565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156111a4576111a461126a565b500190565b6000826111b8576111b8611280565b500490565b6000828210156111cf576111cf61126a565b500390565b60005b838110156111ef5781810151838201526020016111d7565b8381111561069b5750506000910152565b600181811c9082168061121457607f821691505b6020821081141561123557634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561124f5761124f61126a565b5060010190565b60008261126557611265611280565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122025d32e15b72888ade250738cfff9f2e82ae92cca3ff8a9f1eb6bb8fa98f255fe64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}

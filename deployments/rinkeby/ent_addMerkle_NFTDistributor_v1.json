{
  "address": "0x5CAd32eDE0C85315E4B40567D0e070a8bf82d1D3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "addTier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xebabba392df97b3742ea5b6860b4f239769fec5122346538c01339875daf5064",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0x5CAd32eDE0C85315E4B40567D0e070a8bf82d1D3",
    "transactionIndex": 0,
    "gasUsed": "168241",
    "logsBloom": "0x
    "blockHash": "0x622b2a62d4ed94843a09fd63b9443dbf5abc8730771ae84d2708b8e784946d31",
    "transactionHash": "0xebabba392df97b3742ea5b6860b4f239769fec5122346538c01339875daf5064",
    "logs": [],
    "blockNumber": 8366878,
    "cumulativeGasUsed": "168241",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4d710f7f8d3b1eb4b82dcadd299b0e8f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"addTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addTier(bytes32)\":{\"params\":{\"newMerkleRoot\":\"The merkle root to assign to the new tier. Requirements:  - Caller must be an admin  - Tier must already be added to TellerNFT\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addTier(bytes32)\":{\"notice\":\"Adds a new tier to be able to claim NFTs.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nft/distributor/entry/add-merkle.sol\":\"ent_addMerkle_NFTDistributor_v1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/contexts/access-control/data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n}\\n\\nlibrary AccessControlEvents {\\n    event OwnerSet(address indexed owner);\\n\\n    event OwnerTransferred(address indexed owner, address indexed prevOwner);\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0xe810f81cc2c393f9f7df19841cae3cb78ac914c5501238713d6c62192ac026a9\",\"license\":\"MIT\"},\"contracts/contexts/access-control/internal/has-role.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../storage/roles.sol\\\";\\n\\nabstract contract int_hasRole_AccessControl_v1 is sto_AccessControl_Roles {\\n    function _hasRole(bytes32 role, address account)\\n        internal\\n        view\\n        returns (bool hasRole_)\\n    {\\n        hasRole_ = accessControlRolesStore().roles[role].members[account];\\n    }\\n}\\n\",\"keccak256\":\"0x631c0c260f7de64c32a205405e3ec424a6b34aec27987ced91a0254fdabfb1a7\",\"license\":\"MIT\"},\"contracts/contexts/access-control/internal/require-authorization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./has-role.sol\\\";\\n\\nabstract contract int_requireAuthorization_AccessControl_v1 is\\n    int_hasRole_AccessControl_v1\\n{\\n    function _requireAuthorization(bytes32 role, address account)\\n        internal\\n        view\\n    {\\n        require(_hasRole(role, account), \\\"AccessControl: unauthorized\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5c3bc56480df5bf9e9d37962f00dc46ddd4df10e8eddcb45a8ad6c9538c86d67\",\"license\":\"MIT\"},\"contracts/contexts/access-control/modifiers/authorized.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {\\n    int_requireAuthorization_AccessControl_v1\\n} from \\\"../internal/require-authorization.sol\\\";\\n\\nabstract contract mod_authorized_AccessControl_v1 is\\n    int_requireAuthorization_AccessControl_v1\\n{\\n    modifier authorized(bytes32 role, address account) {\\n        _requireAuthorization(role, account);\\n        _;\\n    }\\n}\\n\\nabstract contract mod_authorized_AccessControl is\\n    mod_authorized_AccessControl_v1\\n{}\\n\",\"keccak256\":\"0x07b59ca25af7579afacf46fd29c611a89928dc3df8381f6a3dd5ba8ded407d61\",\"license\":\"MIT\"},\"contracts/contexts/access-control/storage/roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { RoleData } from \\\"../data.sol\\\";\\n\\ncontract sto_AccessControl_Roles {\\n    bytes32 internal constant POS =\\n        keccak256(\\\"teller_protocol.storage.access_control.roles\\\");\\n\\n    struct AccessControlRolesStorage {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    function accessControlRolesStore()\\n        internal\\n        pure\\n        returns (AccessControlRolesStorage storage s)\\n    {\\n        bytes32 position = POS;\\n\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd3173b189dddc069a22ac5a5f2d411305846c9de523f8ce279b7219f2ee51470\",\"license\":\"MIT\"},\"contracts/nft/ITellerNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n// Interfaces\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface ITellerNFT {\\n    struct Tier {\\n        uint256 baseLoanSize;\\n        string[] hashes;\\n        address contributionAsset;\\n        uint256 contributionSize;\\n        uint8 contributionMultiplier;\\n    }\\n\\n    /**\\n     * @notice The contract metadata URI.\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice It returns information about a Tier for a token ID.\\n     * @param index Tier index to get info.\\n     */\\n    function getTier(uint256 index)\\n        external\\n        view\\n        returns (Tier memory tier_);\\n\\n    /**\\n     * @notice It returns information about a Tier for a token ID.\\n     * @param tokenId ID of the token to get Tier info.\\n     */\\n    function getTokenTier(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256 index_, Tier memory tier_);\\n\\n    /**\\n     * @notice It returns an array of token IDs owned by an address.\\n     * @dev It uses a EnumerableSet to store values and loops over each element to add to the array.\\n     * @dev Can be costly if calling within a contract for address with many tokens.\\n     */\\n    function getTierHashes(uint256 tierIndex)\\n        external\\n        view\\n        returns (string[] memory hashes_);\\n\\n    /**\\n     * @notice It returns an array of token IDs owned by an address.\\n     * @dev It uses a EnumerableSet to store values and loops over each element to add to the array.\\n     * @dev Can be costly if calling within a contract for address with many tokens.\\n     */\\n    function getOwnedTokens(address owner)\\n        external\\n        view\\n        returns (uint256[] memory owned);\\n\\n    /**\\n     * @notice It mints a new token for a Tier index.\\n     *\\n     * Requirements:\\n     *  - Caller must be an authorized minter\\n     */\\n    function mint(uint256 tierIndex, address owner) external;\\n\\n    /**\\n     * @notice Adds a new Tier to be minted with the given information.\\n     * @dev It auto increments the index of the next tier to add.\\n     * @param newTier Information about the new tier to add.\\n     *\\n     * Requirements:\\n     *  - Caller must have the {MINTER} role\\n     */\\n    function addTier(Tier memory newTier) external;\\n\\n    /**\\n     * @notice Sets the contract level metadata URI hash.\\n     * @param contractURIHash The hash to the initial contract level metadata.\\n     */\\n    function setContractURIHash(string memory contractURIHash) external;\\n\\n    /**\\n     * @notice Initializes the TellerNFT.\\n     * @param minters The addresses that should allowed to mint tokens.\\n     */\\n    function initialize(address[] calldata minters)\\n        external;\\n}\\n\",\"keccak256\":\"0x4298d02a747b46a3c98db6ad9a4c618bb49f374843e5d4aceb0423a922efa5fc\",\"license\":\"MIT\"},\"contracts/nft/distributor/data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nbytes32 constant ADMIN = keccak256(\\\"ADMIN\\\");\\nbytes32 constant MINTER = keccak256(\\\"MINTER\\\");\\n\\nstruct ClaimNFTRequest {\\n    uint256 merkleIndex;\\n    uint256 nodeIndex;\\n    uint256 amount;\\n    bytes32[] merkleProof;\\n}\\n\\nlibrary DistributorEvents {\\n    event Claimed(address indexed account);\\n\\n    event TierAdded(uint256 index);\\n}\\n\",\"keccak256\":\"0x1a34ad7b717998a44928d86b461850c1562773332deadecf80b91fa406ff5806\",\"license\":\"MIT\"},\"contracts/nft/distributor/entry/add-merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"../store.sol\\\";\\nimport \\\"../../../contexts/access-control/modifiers/authorized.sol\\\";\\n\\n// Utils\\nimport { DistributorEvents, ADMIN } from \\\"../data.sol\\\";\\n\\ncontract ent_addMerkle_NFTDistributor_v1 is\\n    sto_NFTDistributor,\\n    mod_authorized_AccessControl_v1\\n{\\n    /**\\n     * @notice Adds a new tier to be able to claim NFTs.\\n     * @param newMerkleRoot The merkle root to assign to the new tier.\\n     *\\n     * Requirements:\\n     *  - Caller must be an admin\\n     *  - Tier must already be added to TellerNFT\\n     */\\n    function addTier(bytes32 newMerkleRoot)\\n        external\\n        authorized(ADMIN, msg.sender)\\n    {\\n        distributorStore().merkleRoots.push(newMerkleRoot);\\n\\n        emit DistributorEvents.TierAdded(\\n            distributorStore().merkleRoots.length - 1\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7d774898793e5e8dad53acde575257f1ec3cf4114845c5dff33e8067a5823903\",\"license\":\"MIT\"},\"contracts/nft/distributor/store.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Interfaces\\nimport \\\"../ITellerNFT.sol\\\";\\n\\nabstract contract sto_NFTDistributor {\\n    struct DistributorStorage {\\n        ITellerNFT nft;\\n        bytes32[] merkleRoots;\\n        mapping(uint256 => mapping(uint256 => uint256)) claimedBitMap;\\n    }\\n\\n    bytes32 constant POSITION = keccak256(\\\"teller_nft.distributor\\\");\\n\\n    function distributorStore()\\n        internal\\n        pure\\n        returns (DistributorStorage storage s)\\n    {\\n        bytes32 P = POSITION;\\n        assembly {\\n            s.slot := P\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x460ce65658931fe104bf7c8242c28cd1a5713a03ab72804519a3f9551dac4870\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610214806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063307e72e414610030575b600080fd5b61004361003e3660046101a3565b610045565b005b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4233610071828261010a565b7fcf1e960f2172c22b0a7308b10d2fa40d0d089ee0367c8e6cb72a5803f164c36180546001818101835560008390527fb9fa352bc973ec2d8453aa141171c316a3808e25ed4edf76f3674c4a7b18977790910185905590547f8a72996af74d1009e0d3b3895936b7ad9b9447c124a9e2e36b6553ceb1cc6d0f916100f4916101bb565b60405190815260200160405180910390a1505050565b60008281527f337c29a31b05a860fb532911919dbe85ab303a7465176333f1deb496e9fdd19e602090815260408083206001600160a01b038516845290915290205460ff1661019f5760405162461bcd60e51b815260206004820152601b60248201527f416363657373436f6e74726f6c3a20756e617574686f72697a65640000000000604482015260640160405180910390fd5b5050565b6000602082840312156101b4578081fd5b5035919050565b6000828210156101d957634e487b7160e01b81526011600452602481fd5b50039056fea2646970667358221220a501413a04f55812260469825f794bcb31678d864c608718d63db047e9a4026964736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063307e72e414610030575b600080fd5b61004361003e3660046101a3565b610045565b005b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4233610071828261010a565b7fcf1e960f2172c22b0a7308b10d2fa40d0d089ee0367c8e6cb72a5803f164c36180546001818101835560008390527fb9fa352bc973ec2d8453aa141171c316a3808e25ed4edf76f3674c4a7b18977790910185905590547f8a72996af74d1009e0d3b3895936b7ad9b9447c124a9e2e36b6553ceb1cc6d0f916100f4916101bb565b60405190815260200160405180910390a1505050565b60008281527f337c29a31b05a860fb532911919dbe85ab303a7465176333f1deb496e9fdd19e602090815260408083206001600160a01b038516845290915290205460ff1661019f5760405162461bcd60e51b815260206004820152601b60248201527f416363657373436f6e74726f6c3a20756e617574686f72697a65640000000000604482015260640160405180910390fd5b5050565b6000602082840312156101b4578081fd5b5035919050565b6000828210156101d957634e487b7160e01b81526011600452602481fd5b50039056fea2646970667358221220a501413a04f55812260469825f794bcb31678d864c608718d63db047e9a4026964736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addTier(bytes32)": {
        "params": {
          "newMerkleRoot": "The merkle root to assign to the new tier. Requirements:  - Caller must be an admin  - Tier must already be added to TellerNFT"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addTier(bytes32)": {
        "notice": "Adds a new tier to be able to claim NFTs."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}

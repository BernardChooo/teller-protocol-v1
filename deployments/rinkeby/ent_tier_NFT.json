{
  "address": "0xC9683628eD46B35f23fE534d27dcE3d8297d0225",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseLoanSize",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "hashes",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "contributionAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "contributionSize",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "contributionMultiplier",
              "type": "uint8"
            }
          ],
          "internalType": "struct Tier",
          "name": "newTier",
          "type": "tuple"
        }
      ],
      "name": "addTier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdc9b3e842d7ea30ea9b9fb520c6510747b9b1a416899a09bc80753332a06d49e",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0xC9683628eD46B35f23fE534d27dcE3d8297d0225",
    "transactionIndex": 1,
    "gasUsed": "359140",
    "logsBloom": "0x
    "blockHash": "0xd40f7a0e83c23324a786e54f719fdcf2945bddd92e0046276ed55c280e13e72f",
    "transactionHash": "0xdc9b3e842d7ea30ea9b9fb520c6510747b9b1a416899a09bc80753332a06d49e",
    "logs": [],
    "blockNumber": 8363121,
    "cumulativeGasUsed": "2033365",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5c6a9058c46611581868a70d5eba78f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseLoanSize\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"hashes\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"contributionAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contributionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"contributionMultiplier\",\"type\":\"uint8\"}],\"internalType\":\"struct Tier\",\"name\":\"newTier\",\"type\":\"tuple\"}],\"name\":\"addTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addTier((uint256,string[],address,uint256,uint8))\":{\"details\":\"It auto increments the index of the next tier to add.\",\"params\":{\"newTier\":\"Information about the new tier to add. Requirements:  - Caller must have the {MINTER} role\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addTier((uint256,string[],address,uint256,uint8))\":{\"notice\":\"Adds a new Tier to be minted with the given information.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"diamonds/domains/nft/entry/tier.sol\":\"ent_tier_NFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"diamonds/contexts/access-control/data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n}\\n\\nabstract contract dat_AccessControl_v1 {\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    event OwnerSet(address indexed owner);\\n\\n    event OwnerTransferred(address indexed owner, address indexed prevOwner);\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\\ncontract dat_AccessControl is dat_AccessControl_v1 {}\\n\",\"keccak256\":\"0x92884af2aa6b648a6e8d1ad5a1a2b35e5593607e88d62cbe9e6510c2b96fc7a7\",\"license\":\"MIT\"},\"diamonds/contexts/access-control/internal/has-role.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../storage/roles.sol\\\";\\n\\nabstract contract int_hasRole_AccessControl_v1 is sto_AccessControl_Roles {\\n    function _hasRole(bytes32 role, address account)\\n        internal\\n        view\\n        returns (bool hasRole_)\\n    {\\n        hasRole_ = accessControlRolesStore().roles[role].members[account];\\n    }\\n}\\n\",\"keccak256\":\"0x631c0c260f7de64c32a205405e3ec424a6b34aec27987ced91a0254fdabfb1a7\",\"license\":\"MIT\"},\"diamonds/contexts/access-control/internal/require-authorization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./has-role.sol\\\";\\n\\nabstract contract int_requireAuthorization_AccessControl_v1 is\\n    int_hasRole_AccessControl_v1\\n{\\n    function _requireAuthorization(bytes32 role, address account)\\n        internal\\n        view\\n    {\\n        require(_hasRole(role, account), \\\"AccessControl: unauthorized\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5c3bc56480df5bf9e9d37962f00dc46ddd4df10e8eddcb45a8ad6c9538c86d67\",\"license\":\"MIT\"},\"diamonds/contexts/access-control/modifiers/authorized.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {\\n    int_requireAuthorization_AccessControl_v1\\n} from \\\"../internal/require-authorization.sol\\\";\\n\\nabstract contract mod_authorized_AccessControl_v1 is\\n    int_requireAuthorization_AccessControl_v1\\n{\\n    modifier authorized(bytes32 role, address account) {\\n        _requireAuthorization(role, account);\\n        _;\\n    }\\n}\\n\\nabstract contract mod_authorized_AccessControl is\\n    mod_authorized_AccessControl_v1\\n{}\\n\",\"keccak256\":\"0x07b59ca25af7579afacf46fd29c611a89928dc3df8381f6a3dd5ba8ded407d61\",\"license\":\"MIT\"},\"diamonds/contexts/access-control/storage/roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { RoleData } from \\\"../data.sol\\\";\\n\\ncontract sto_AccessControl_Roles {\\n    bytes32 internal constant POS =\\n        keccak256(\\\"teller_protocol.storage.access_control.roles\\\");\\n\\n    struct AccessControlRolesStorage {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    function accessControlRolesStore()\\n        internal\\n        pure\\n        returns (AccessControlRolesStorage storage s)\\n    {\\n        bytes32 position = POS;\\n\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd3173b189dddc069a22ac5a5f2d411305846c9de523f8ce279b7219f2ee51470\",\"license\":\"MIT\"},\"diamonds/domains/nft/data/tier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct Tier {\\n    uint256 baseLoanSize;\\n    string[] hashes;\\n    address contributionAsset;\\n    uint256 contributionSize;\\n    uint8 contributionMultiplier;\\n}\\n\",\"keccak256\":\"0x20ae7b004b8ab4b7b31b62265c4cee1e8851223c333c2e603d8d3f90a43c1f70\",\"license\":\"MIT\"},\"diamonds/domains/nft/entry/tier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"../../../contexts/access-control/modifiers/authorized.sol\\\";\\nimport \\\"../storage/tier.sol\\\";\\n\\n// Utils\\nimport { Tier } from \\\"../data/tier.sol\\\";\\nimport { MINTER } from \\\"../roles.sol\\\";\\n\\ncontract ent_tier_NFT_v1 is sto_Tier, mod_authorized_AccessControl_v1 {\\n    using Counters for Counters.Counter;\\n\\n    /**\\n     * @notice Adds a new Tier to be minted with the given information.\\n     * @dev It auto increments the index of the next tier to add.\\n     * @param newTier Information about the new tier to add.\\n     *\\n     * Requirements:\\n     *  - Caller must have the {MINTER} role\\n     */\\n    function addTier(Tier memory newTier)\\n        external\\n        authorized(MINTER, msg.sender)\\n    {\\n        Tier storage tier =\\n            tierStore().tiers[tierStore().tierCounter.current()];\\n\\n        tier.baseLoanSize = newTier.baseLoanSize;\\n        tier.hashes = newTier.hashes;\\n        tier.contributionAsset = newTier.contributionAsset;\\n        tier.contributionSize = newTier.contributionSize;\\n        tier.contributionMultiplier = newTier.contributionMultiplier;\\n\\n        tierStore().tierCounter.increment();\\n    }\\n}\\n\\ncontract ent_tier_NFT is ent_tier_NFT_v1 {}\\n\",\"keccak256\":\"0x28ac021044f5bcdc05538c8498e0abf17a152d43e0aeb286e1bd0a7142ba69fc\",\"license\":\"MIT\"},\"diamonds/domains/nft/roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nbytes32 constant ADMIN = keccak256(\\\"ADMIN\\\");\\nbytes32 constant MINTER = keccak256(\\\"MINTER\\\");\\n\",\"keccak256\":\"0xa5fecccb2dd77a6b8af8615bc5ef2bfdd19492c67ad72dcc38bec4ceff07905c\",\"license\":\"MIT\"},\"diamonds/domains/nft/storage/tier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport { Tier } from \\\"../data/tier.sol\\\";\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract sto_Tier {\\n    struct TierStorage {\\n        // It holds the total number of tiers.\\n        Counters.Counter tierCounter;\\n        // It holds the total number of tokens minted.\\n        Counters.Counter tokenCounter;\\n        // It holds the information about a tier.\\n        mapping(uint256 => Tier) tiers;\\n        // It holds which tier a token ID is in.\\n        mapping(uint256 => uint256) tokenTierMap;\\n    }\\n\\n    function tierStore() internal pure returns (TierStorage storage s) {\\n        bytes32 POSITION = keccak256(\\\"teller_nft.tier\\\");\\n\\n        assembly {\\n            s.slot := POSITION\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0bd9fa6301739e952131db77bd7c8114df6ece29286ff4e69957d92bbf46ba97\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610588806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cf932b7c14610030575b600080fd5b61004361003e366004610382565b610045565b005b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc933610071828261016b565b60007f0a84207e1143ff19b71979feb4ec3b9e9ab20a9f584206f464503fa07b113fc3816100be7f0a84207e1143ff19b71979feb4ec3b9e9ab20a9f584206f464503fa07b113fc1610204565b8152602080820192909252604001600020855181558582015180519193506100ed92600185019291019061020c565b5060408401516002820180546001600160a01b0319166001600160a01b0390921691909117905560608401516003820155608084015160048201805460ff191660ff9092169190911790556101657f0a84207e1143ff19b71979feb4ec3b9e9ab20a9f584206f464503fa07b113fc180546001019055565b50505050565b60008281527f337c29a31b05a860fb532911919dbe85ab303a7465176333f1deb496e9fdd19e602090815260408083206001600160a01b038516845290915290205460ff166102005760405162461bcd60e51b815260206004820152601b60248201527f416363657373436f6e74726f6c3a20756e617574686f72697a65640000000000604482015260640160405180910390fd5b5050565b80545b919050565b828054828255906000526020600020908101928215610259579160200282015b828111156102595782518051610249918491602090910190610269565b509160200191906001019061022c565b506102659291506102e9565b5090565b82805461027590610501565b90600052602060002090601f01602090048101928261029757600085556102dd565b82601f106102b057805160ff19168380011785556102dd565b828001600101855582156102dd579182015b828111156102dd5782518255916020019190600101906102c2565b50610265929150610306565b808211156102655760006102fd828261031b565b506001016102e9565b5b808211156102655760008155600101610307565b50805461032790610501565b6000825580601f106103395750610357565b601f0160209004906000526020600020908101906103579190610306565b50565b80356001600160a01b038116811461020757600080fd5b803560ff8116811461020757600080fd5b60006020808385031215610394578182fd5b823567ffffffffffffffff808211156103ab578384fd5b9084019060a082870312156103be578384fd5b6103c860a06104d0565b8235815283830135828111156103dc578586fd5b8301601f810188136103ec578586fd5b8035838111156103fe576103fe61053c565b61040c868260051b016104d0565b81815286810190838801895b8481101561049057813586018d603f820112610432578b8cfd5b8a810135898111156104465761044661053c565b610458601f8201601f19168d016104d0565b8181528f604083850101111561046c578d8efd5b81604084018e8301379081018c018d90528552509289019290890190600101610418565b505084880152506104a69150506040840161035a565b6040820152606083013560608201526104c160808401610371565b60808201529695505050505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156104f9576104f961053c565b604052919050565b600181811c9082168061051557607f821691505b6020821081141561053657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea26469706673582212204ec9ec9cfc42634c3cd01d246aa0db7c4e41cc9310234e01e59790ce8f2b70d564736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cf932b7c14610030575b600080fd5b61004361003e366004610382565b610045565b005b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc933610071828261016b565b60007f0a84207e1143ff19b71979feb4ec3b9e9ab20a9f584206f464503fa07b113fc3816100be7f0a84207e1143ff19b71979feb4ec3b9e9ab20a9f584206f464503fa07b113fc1610204565b8152602080820192909252604001600020855181558582015180519193506100ed92600185019291019061020c565b5060408401516002820180546001600160a01b0319166001600160a01b0390921691909117905560608401516003820155608084015160048201805460ff191660ff9092169190911790556101657f0a84207e1143ff19b71979feb4ec3b9e9ab20a9f584206f464503fa07b113fc180546001019055565b50505050565b60008281527f337c29a31b05a860fb532911919dbe85ab303a7465176333f1deb496e9fdd19e602090815260408083206001600160a01b038516845290915290205460ff166102005760405162461bcd60e51b815260206004820152601b60248201527f416363657373436f6e74726f6c3a20756e617574686f72697a65640000000000604482015260640160405180910390fd5b5050565b80545b919050565b828054828255906000526020600020908101928215610259579160200282015b828111156102595782518051610249918491602090910190610269565b509160200191906001019061022c565b506102659291506102e9565b5090565b82805461027590610501565b90600052602060002090601f01602090048101928261029757600085556102dd565b82601f106102b057805160ff19168380011785556102dd565b828001600101855582156102dd579182015b828111156102dd5782518255916020019190600101906102c2565b50610265929150610306565b808211156102655760006102fd828261031b565b506001016102e9565b5b808211156102655760008155600101610307565b50805461032790610501565b6000825580601f106103395750610357565b601f0160209004906000526020600020908101906103579190610306565b50565b80356001600160a01b038116811461020757600080fd5b803560ff8116811461020757600080fd5b60006020808385031215610394578182fd5b823567ffffffffffffffff808211156103ab578384fd5b9084019060a082870312156103be578384fd5b6103c860a06104d0565b8235815283830135828111156103dc578586fd5b8301601f810188136103ec578586fd5b8035838111156103fe576103fe61053c565b61040c868260051b016104d0565b81815286810190838801895b8481101561049057813586018d603f820112610432578b8cfd5b8a810135898111156104465761044661053c565b610458601f8201601f19168d016104d0565b8181528f604083850101111561046c578d8efd5b81604084018e8301379081018c018d90528552509289019290890190600101610418565b505084880152506104a69150506040840161035a565b6040820152606083013560608201526104c160808401610371565b60808201529695505050505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156104f9576104f961053c565b604052919050565b600181811c9082168061051557607f821691505b6020821081141561053657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea26469706673582212204ec9ec9cfc42634c3cd01d246aa0db7c4e41cc9310234e01e59790ce8f2b70d564736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addTier((uint256,string[],address,uint256,uint8))": {
        "details": "It auto increments the index of the next tier to add.",
        "params": {
          "newTier": "Information about the new tier to add. Requirements:  - Caller must have the {MINTER} role"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addTier((uint256,string[],address,uint256,uint8))": {
        "notice": "Adds a new Tier to be minted with the given information."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}

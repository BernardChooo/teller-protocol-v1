{
  "address": "0x72b7c8b01184c8B8f1F9630B2276A96a9b8A6Ee2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        }
      ],
      "name": "addChainlinkAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        }
      ],
      "name": "getChainlinkAggregatorFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "agg",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "found",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "inverse",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        }
      ],
      "name": "removeChainlinkAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x61363c15287cf1ab0ff4dd82a5a4629e3197261099c8ada95e1bf37e15349381",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0x72b7c8b01184c8B8f1F9630B2276A96a9b8A6Ee2",
    "transactionIndex": 1,
    "gasUsed": "387221",
    "logsBloom": "0x
    "blockHash": "0xe8d7ab021c4197df3decf0fac42f0b800a1d17fbf9475ff7e2abab98892d683a",
    "transactionHash": "0x61363c15287cf1ab0ff4dd82a5a4629e3197261099c8ada95e1bf37e15349381",
    "logs": [],
    "blockNumber": 8453223,
    "cumulativeGasUsed": "509455",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3c3e5b2c786bda25b38603e2b551c6d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"addChainlinkAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"getChainlinkAggregatorFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agg\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"found\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"inverse\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"removeChainlinkAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addChainlinkAggregator(address,address,address)\":{\"params\":{\"aggregator\":\"Price aggregator address.\",\"dst\":\"Destination token address.\",\"src\":\"Source token address.\"}},\"getChainlinkAggregatorFor(address,address)\":{\"params\":{\"dst\":\"Destination token address.\",\"src\":\"Source token address.\"},\"returns\":{\"agg\":\"The Chainlink Aggregator address.\",\"found\":\"whether or not the ChainlinkAggregator exists.\",\"inverse\":\"whether or not the values from the Aggregator should be considered inverted.\"}},\"removeChainlinkAggregator(address,address)\":{\"params\":{\"dst\":\"Destination token address.\",\"src\":\"Source token address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addChainlinkAggregator(address,address,address)\":{\"notice\":\"It allows for additional Chainlink Aggregators to be supported.\"},\"getChainlinkAggregatorFor(address,address)\":{\"notice\":\"It grabs the Chainlink Aggregator contract address for the token pair if it is supported.\"},\"removeChainlinkAggregator(address,address)\":{\"notice\":\"It removes support for a Chainlink Aggregator pair.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/price-aggregator/chainlink/ChainlinkAggFacet.sol\":\"ChainlinkAggFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/contexts2/access-control/roles/RolesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { AccessControlStorageLib, AccessControlStorage } from \\\"../storage.sol\\\";\\n\\nlibrary RolesLib {\\n    function s() private pure returns (AccessControlStorage storage) {\\n        return AccessControlStorageLib.store();\\n    }\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @notice Checks if an account has a specific role.\\n     */\\n    function hasRole(bytes32 role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return s().roles[role][account];\\n    }\\n\\n    /**\\n     * @dev Gives an account a new role.\\n     * @dev Should only use when circumventing admin checking.\\n     * @dev If account already has the role, no event is emitted.\\n     * @param role Encoding of the role to give.\\n     * @param account Address to give the {role} to.\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) return;\\n        s().roles[role][account] = true;\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Removes a role from an account.\\n     * @dev Should only use when circumventing admin checking.\\n     * @dev If account does not already have the role, no event is emitted.\\n     * @param role Encoding of the role to remove.\\n     * @param account Address to remove the {role} from.\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) return;\\n        s().roles[role][account] = false;\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x36d0f5db441d2c3db7ee04d84c88ce9b14251cff4387702e96965c51acd1bc84\",\"license\":\"MIT\"},\"contracts/contexts2/access-control/roles/RolesMods.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { RolesLib } from \\\"./RolesLib.sol\\\";\\n\\nabstract contract RolesMods {\\n    /**\\n     * @notice Requires that the {account} has {role}\\n     * @param role Encoding of the role to check.\\n     * @param account Address to check the {role} for.\\n     */\\n    modifier authorized(bytes32 role, address account) {\\n        require(\\n            RolesLib.hasRole(role, account),\\n            \\\"AccessControl: not authorized\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x25eeaba823d4fc9c52d82a77cfdb409550ad985fc49b30a5560c1f313c1ca905\",\"license\":\"MIT\"},\"contracts/contexts2/access-control/storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct AccessControlStorage {\\n    mapping(bytes32 => mapping(address => bool)) roles;\\n    mapping(address => address) owners;\\n    mapping(bytes32 => bool) entered;\\n}\\n\\nbytes32 constant ACCESS_CONTROL_POS = keccak256(\\n    \\\"teller.access_control.storage\\\"\\n);\\n\\nlibrary AccessControlStorageLib {\\n    function store() internal pure returns (AccessControlStorage storage s) {\\n        bytes32 pos = ACCESS_CONTROL_POS;\\n        assembly {\\n            s.slot := pos\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf667fb8d6beb59fc6f37d60ada6b811b5861512fedc661c483b9eca042e96112\",\"license\":\"MIT\"},\"contracts/price-aggregator/chainlink/ChainlinkAggFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport { RolesMods } from \\\"../../contexts2/access-control/roles/RolesMods.sol\\\";\\nimport { ADMIN } from \\\"../../shared/roles.sol\\\";\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { ChainlinkLib } from \\\"./ChainlinkLib.sol\\\";\\n\\n// Storage\\nimport {\\n    PriceAggStorageLib,\\n    PriceAggStorage\\n} from \\\"../../storage/price-aggregator.sol\\\";\\n\\ncontract ChainlinkAggFacet is RolesMods {\\n    /**\\n     * @notice It grabs the Chainlink Aggregator contract address for the token pair if it is supported.\\n     * @param src Source token address.\\n     * @param dst Destination token address.\\n     * @return agg The Chainlink Aggregator address.\\n     * @return found whether or not the ChainlinkAggregator exists.\\n     * @return inverse whether or not the values from the Aggregator should be considered inverted.\\n     */\\n    function getChainlinkAggregatorFor(address src, address dst)\\n        external\\n        view\\n        returns (\\n            address agg,\\n            bool found,\\n            bool inverse\\n        )\\n    {\\n        (agg, found, inverse) = ChainlinkLib.aggregatorFor(src, dst);\\n    }\\n\\n    /**\\n     * @notice It allows for additional Chainlink Aggregators to be supported.\\n     * @param src Source token address.\\n     * @param dst Destination token address.\\n     * @param aggregator Price aggregator address.\\n     */\\n    function addChainlinkAggregator(\\n        address src,\\n        address dst,\\n        address aggregator\\n    ) external authorized(ADMIN, msg.sender) {\\n        (, bool found, ) = ChainlinkLib.aggregatorFor(src, dst);\\n        require(!found, \\\"Teller: chainlink aggregator already exists\\\");\\n        require(Address.isContract(src), \\\"Teller: source token not contract\\\");\\n        require(\\n            Address.isContract(dst),\\n            \\\"Teller: destination token not contract\\\"\\n        );\\n        require(\\n            Address.isContract(aggregator),\\n            \\\"Teller: chainlink aggregator not contract\\\"\\n        );\\n\\n        PriceAggStorageLib.store().chainlinkAggregators[src][dst] = aggregator;\\n    }\\n\\n    /**\\n     * @notice It removes support for a Chainlink Aggregator pair.\\n     * @param src Source token address.\\n     * @param dst Destination token address.\\n     */\\n    function removeChainlinkAggregator(address src, address dst)\\n        external\\n        authorized(ADMIN, msg.sender)\\n    {\\n        (, bool found, ) = ChainlinkLib.aggregatorFor(src, dst);\\n        if (!found) {\\n            return;\\n        }\\n\\n        delete PriceAggStorageLib.store().chainlinkAggregators[src][dst];\\n    }\\n}\\n\",\"keccak256\":\"0x958cd76fe97b1678b5a5d220753957c395a4a4c40bb694dacdad34ed4e11f7bc\",\"license\":\"MIT\"},\"contracts/price-aggregator/chainlink/ChainlinkLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Storage\\nimport {\\n    PriceAggStorageLib,\\n    PriceAggStorage\\n} from \\\"../../storage/price-aggregator.sol\\\";\\n\\nlibrary ChainlinkLib {\\n    function s() internal pure returns (PriceAggStorage storage) {\\n        return PriceAggStorageLib.store();\\n    }\\n\\n    /**\\n     * @notice It grabs the Chainlink Aggregator contract address for the token pair if it is supported.\\n     * @param src Source token address.\\n     * @param dst Destination token address.\\n     * @return aggregator The Chainlink Aggregator address.\\n     * @return found whether or not the ChainlinkAggregator exists.\\n     * @return inverse whether or not the values from the Aggregator should be considered inverted.\\n     */\\n    function aggregatorFor(address src, address dst)\\n        internal\\n        view\\n        returns (\\n            address aggregator,\\n            bool found,\\n            bool inverse\\n        )\\n    {\\n        aggregator = s().chainlinkAggregators[src][dst];\\n        if (aggregator != address(0)) {\\n            found = true;\\n        } else {\\n            aggregator = s().chainlinkAggregators[dst][src];\\n            if (aggregator != address(0)) {\\n                found = true;\\n                inverse = true;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8bf16370bbbf619f838f62a5a6f2056ff08641e4ce5d4f9343f55dbc30594766\",\"license\":\"MIT\"},\"contracts/shared/roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nbytes32 constant ADMIN = keccak256(\\\"ADMIN\\\");\\nbytes32 constant AUTHORIZED = keccak256(\\\"AUTHORIZED\\\");\\n\",\"keccak256\":\"0x4c5a35301d6c4023f682c4d607e5f4d8bf1b1bb65430e6306a13d0e5573aedca\",\"license\":\"MIT\"},\"contracts/storage/price-aggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct PriceAggStorage {\\n    mapping(address => mapping(address => address)) chainlinkAggregators;\\n}\\n\\nbytes32 constant PRICE_AGG_STORAGE_POS = keccak256(\\n    \\\"teller.price.aggregator.storage\\\"\\n);\\n\\nlibrary PriceAggStorageLib {\\n    function store() internal pure returns (PriceAggStorage storage s) {\\n        bytes32 pos = PRICE_AGG_STORAGE_POS;\\n        assembly {\\n            s.slot := pos\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x11503db782c9072228e2acac1eddbc233c1da9a51cfb86961b93614c3aa64ae6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061060a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063020ce3a61461004657806310d940061461005b578063961113df14610099575b600080fd5b610059610054366004610560565b6100ac565b005b61006e610069366004610560565b61019e565b604080516001600160a01b039094168452911515602084015215159082015260600160405180910390f35b6100596100a7366004610592565b6101bb565b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42336100d8828261042e565b6101295760405162461bcd60e51b815260206004820152601d60248201527f416363657373436f6e74726f6c3a206e6f7420617574686f72697a656400000060448201526064015b60405180910390fd5b60006101358585610462565b50915050806101445750610198565b506001600160a01b0384811660009081527f6e580dd31681e426edb2ee1b0c0ecdc390e3129c3a61bf056e0b2c13818dbc0b6020908152604080832093871683529290522080546001600160a01b03191690555b50505050565b60008060006101ad8585610462565b919790965090945092505050565b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42336101e7828261042e565b6102335760405162461bcd60e51b815260206004820152601d60248201527f416363657373436f6e74726f6c3a206e6f7420617574686f72697a65640000006044820152606401610120565b600061023f8686610462565b5091505080156102a55760405162461bcd60e51b815260206004820152602b60248201527f54656c6c65723a20636861696e6c696e6b2061676772656761746f7220616c7260448201526a656164792065786973747360a81b6064820152608401610120565b6102ae866104ee565b6103045760405162461bcd60e51b815260206004820152602160248201527f54656c6c65723a20736f7572636520746f6b656e206e6f7420636f6e747261636044820152601d60fa1b6064820152608401610120565b61030d856104ee565b6103685760405162461bcd60e51b815260206004820152602660248201527f54656c6c65723a2064657374696e6174696f6e20746f6b656e206e6f7420636f6044820152651b9d1c9858dd60d21b6064820152608401610120565b610371846104ee565b6103cf5760405162461bcd60e51b815260206004820152602960248201527f54656c6c65723a20636861696e6c696e6b2061676772656761746f72206e6f746044820152680818dbdb9d1c9858dd60ba1b6064820152608401610120565b5050506001600160a01b0392831660009081527f6e580dd31681e426edb2ee1b0c0ecdc390e3129c3a61bf056e0b2c13818dbc0b6020908152604080832094861683529390529190912080546001600160a01b03191691909216179055565b60006104386104f8565b6000938452602090815260408085206001600160a01b039490941685529290525090205460ff1690565b600080600061046f610521565b6001600160a01b038087166000908152602092835260408082208884168352909352919091205416925082156104a857600191506104e7565b6104b0610521565b6001600160a01b038086166000908152602092835260408082208984168352909352919091205416925082156104e7575060019050805b9250925092565b803b15155b919050565b60007f7b305b6be5f275f648d05716597c483d754c2a242bd605feba3c64fb853605345b905090565b60007f6e580dd31681e426edb2ee1b0c0ecdc390e3129c3a61bf056e0b2c13818dbc0b61051c565b80356001600160a01b03811681146104f357600080fd5b60008060408385031215610572578182fd5b61057b83610549565b915061058960208401610549565b90509250929050565b6000806000606084860312156105a6578081fd5b6105af84610549565b92506105bd60208501610549565b91506105cb60408501610549565b9050925092509256fea26469706673582212209ec12d8eb678fa8e571eda2584560affbfccf803a9062a09099fd47bfed6a36f64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063020ce3a61461004657806310d940061461005b578063961113df14610099575b600080fd5b610059610054366004610560565b6100ac565b005b61006e610069366004610560565b61019e565b604080516001600160a01b039094168452911515602084015215159082015260600160405180910390f35b6100596100a7366004610592565b6101bb565b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42336100d8828261042e565b6101295760405162461bcd60e51b815260206004820152601d60248201527f416363657373436f6e74726f6c3a206e6f7420617574686f72697a656400000060448201526064015b60405180910390fd5b60006101358585610462565b50915050806101445750610198565b506001600160a01b0384811660009081527f6e580dd31681e426edb2ee1b0c0ecdc390e3129c3a61bf056e0b2c13818dbc0b6020908152604080832093871683529290522080546001600160a01b03191690555b50505050565b60008060006101ad8585610462565b919790965090945092505050565b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42336101e7828261042e565b6102335760405162461bcd60e51b815260206004820152601d60248201527f416363657373436f6e74726f6c3a206e6f7420617574686f72697a65640000006044820152606401610120565b600061023f8686610462565b5091505080156102a55760405162461bcd60e51b815260206004820152602b60248201527f54656c6c65723a20636861696e6c696e6b2061676772656761746f7220616c7260448201526a656164792065786973747360a81b6064820152608401610120565b6102ae866104ee565b6103045760405162461bcd60e51b815260206004820152602160248201527f54656c6c65723a20736f7572636520746f6b656e206e6f7420636f6e747261636044820152601d60fa1b6064820152608401610120565b61030d856104ee565b6103685760405162461bcd60e51b815260206004820152602660248201527f54656c6c65723a2064657374696e6174696f6e20746f6b656e206e6f7420636f6044820152651b9d1c9858dd60d21b6064820152608401610120565b610371846104ee565b6103cf5760405162461bcd60e51b815260206004820152602960248201527f54656c6c65723a20636861696e6c696e6b2061676772656761746f72206e6f746044820152680818dbdb9d1c9858dd60ba1b6064820152608401610120565b5050506001600160a01b0392831660009081527f6e580dd31681e426edb2ee1b0c0ecdc390e3129c3a61bf056e0b2c13818dbc0b6020908152604080832094861683529390529190912080546001600160a01b03191691909216179055565b60006104386104f8565b6000938452602090815260408085206001600160a01b039490941685529290525090205460ff1690565b600080600061046f610521565b6001600160a01b038087166000908152602092835260408082208884168352909352919091205416925082156104a857600191506104e7565b6104b0610521565b6001600160a01b038086166000908152602092835260408082208984168352909352919091205416925082156104e7575060019050805b9250925092565b803b15155b919050565b60007f7b305b6be5f275f648d05716597c483d754c2a242bd605feba3c64fb853605345b905090565b60007f6e580dd31681e426edb2ee1b0c0ecdc390e3129c3a61bf056e0b2c13818dbc0b61051c565b80356001600160a01b03811681146104f357600080fd5b60008060408385031215610572578182fd5b61057b83610549565b915061058960208401610549565b90509250929050565b6000806000606084860312156105a6578081fd5b6105af84610549565b92506105bd60208501610549565b91506105cb60408501610549565b9050925092509256fea26469706673582212209ec12d8eb678fa8e571eda2584560affbfccf803a9062a09099fd47bfed6a36f64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addChainlinkAggregator(address,address,address)": {
        "params": {
          "aggregator": "Price aggregator address.",
          "dst": "Destination token address.",
          "src": "Source token address."
        }
      },
      "getChainlinkAggregatorFor(address,address)": {
        "params": {
          "dst": "Destination token address.",
          "src": "Source token address."
        },
        "returns": {
          "agg": "The Chainlink Aggregator address.",
          "found": "whether or not the ChainlinkAggregator exists.",
          "inverse": "whether or not the values from the Aggregator should be considered inverted."
        }
      },
      "removeChainlinkAggregator(address,address)": {
        "params": {
          "dst": "Destination token address.",
          "src": "Source token address."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addChainlinkAggregator(address,address,address)": {
        "notice": "It allows for additional Chainlink Aggregators to be supported."
      },
      "getChainlinkAggregatorFor(address,address)": {
        "notice": "It grabs the Chainlink Aggregator contract address for the token pair if it is supported."
      },
      "removeChainlinkAggregator(address,address)": {
        "notice": "It removes support for a Chainlink Aggregator pair."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}

{
  "language": "Solidity",
  "sources": {
    "diamonds/contexts/access-control/context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./internal/grant-role.sol\";\nimport \"./internal/revoke-role.sol\";\nimport \"./internal/renounce-role.sol\";\n\nabstract contract ctx_AccessControl_v1 is\n    int_grantRole_AccessControl_v1,\n    int_revokeRole_AccessControl_v1,\n    int_renounceRole_AccessControl_v1\n{}\n"
    },
    "diamonds/contexts/access-control/internal/grant-role.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../data.sol\";\nimport \"./has-role.sol\";\n\nabstract contract int_grantRole_AccessControl_v1 is\n    dat_AccessControl_v1,\n    int_hasRole_AccessControl_v1\n{\n    /**\n     * @dev Should only use when circumventing admin checking. See {../entry/grant-role.sol}\n     */\n    function _grantRole(bytes32 role, address account) internal {\n        if (_hasRole(role, account)) return;\n        accessControlRolesStore().roles[role].members[account] = true;\n        emit RoleGranted(role, account, msg.sender);\n    }\n}\n\nabstract contract int_grantRole_AccessControl is\n    int_grantRole_AccessControl_v1\n{}\n"
    },
    "diamonds/contexts/access-control/internal/revoke-role.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../data.sol\";\nimport \"./has-role.sol\";\n\nabstract contract int_revokeRole_AccessControl_v1 is\n    dat_AccessControl_v1,\n    int_hasRole_AccessControl_v1\n{\n    function _revokeRole(bytes32 role, address account) internal {\n        if (!_hasRole(role, account)) return;\n        accessControlRolesStore().roles[role].members[account] = false;\n        emit RoleRevoked(role, account, msg.sender);\n    }\n}\n\nabstract contract int_revokeRole_AccessControl is\n    int_revokeRole_AccessControl_v1\n{}\n"
    },
    "diamonds/contexts/access-control/internal/renounce-role.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../data.sol\";\nimport \"./has-role.sol\";\n\nabstract contract int_renounceRole_AccessControl_v1 is\n    dat_AccessControl_v1,\n    int_hasRole_AccessControl_v1\n{\n    function _renounceRole(bytes32 role, address account) internal {\n        require(_hasRole(role, msg.sender), \"CAN'T RENOUNCE\");\n        accessControlRolesStore().roles[role].members[account] = false;\n        emit RoleRevoked(role, account, msg.sender);\n    }\n}\n\nabstract contract int_renounceRole_AccessControl is\n    int_renounceRole_AccessControl_v1\n{}\n"
    },
    "diamonds/contexts/access-control/data.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nstruct RoleData {\n    mapping(address => bool) members;\n    bytes32 adminRole;\n}\n\nabstract contract dat_AccessControl_v1 {\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    event OwnerSet(address indexed owner);\n\n    event OwnerTransferred(address indexed owner, address indexed prevOwner);\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(\n        bytes32 indexed role,\n        bytes32 indexed previousAdminRole,\n        bytes32 indexed newAdminRole\n    );\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(\n        bytes32 indexed role,\n        address indexed account,\n        address indexed sender\n    );\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(\n        bytes32 indexed role,\n        address indexed account,\n        address indexed sender\n    );\n}\n\nabstract contract dat_AccessControl is dat_AccessControl_v1 {}\n"
    },
    "diamonds/contexts/access-control/internal/has-role.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../storage/roles.sol\";\n\nabstract contract int_hasRole_AccessControl_v1 is sto_AccessControl_Roles {\n    function _hasRole(bytes32 role, address account)\n        internal\n        view\n        returns (bool hasRole_)\n    {\n        hasRole_ = accessControlRolesStore().roles[role].members[account];\n    }\n}\n"
    },
    "diamonds/contexts/access-control/storage/roles.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { RoleData } from \"../data.sol\";\n\nabstract contract sto_AccessControl_Roles {\n    bytes32 internal constant POS =\n        keccak256(\"teller_protocol.storage.access_control.roles\");\n\n    struct AccessControlRolesStorage {\n        mapping(bytes32 => RoleData) roles;\n    }\n\n    function accessControlRolesStore()\n        internal\n        pure\n        returns (AccessControlRolesStorage storage s)\n    {\n        bytes32 position = POS;\n\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "diamonds/contexts/initializable/context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../access-control/internal/grant-role.sol\";\nimport \"../access-control/internal/revoke-role.sol\";\nimport \"../access-control/internal/renounce-role.sol\";\n\ncontract ctx_Initializable_v1 is\n    int_grantRole_AccessControl_v1,\n    int_revokeRole_AccessControl_v1,\n    int_renounceRole_AccessControl_v1\n{}\n"
    },
    "diamonds/contexts/access-control/entry/revoke-role.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../data.sol\";\nimport \"../internal/revoke-role.sol\";\nimport \"../internal/is-admin-for-role.sol\";\n\nabstract contract ent_revokeRole_AccessControl_v1 is\n    int_revokeRole_AccessControl,\n    int_isAdminForRole_AccessControl_v1\n{\n    /**\n     * @notice Removes a role from an address.\n     *\n     * Requirements:\n     *  - Sender must be role admin.\n     */\n    function revokeRole(bytes32 role, address account) external {\n        require(_isAdminForRole(role, msg.sender), \"AccessControl: not admin\");\n        _revokeRole(role, account);\n    }\n}\n\nabstract contract ent_revokeRole_AccessControl is\n    ent_revokeRole_AccessControl_v1\n{}\n"
    },
    "diamonds/contexts/access-control/internal/is-admin-for-role.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../storage/roles.sol\";\n\nabstract contract int_isAdminForRole_AccessControl_v1 is\n    sto_AccessControl_Roles\n{\n    function _isAdminForRole(bytes32 role, address account)\n        internal\n        view\n        returns (bool isAdminForRole_)\n    {\n        isAdminForRole_ = accessControlRolesStore().roles[\n            accessControlRolesStore().roles[role].adminRole\n        ]\n            .members[account];\n    }\n}\n\nabstract contract int_isAdminForRole_AccessControl is\n    int_isAdminForRole_AccessControl_v1\n{}\n"
    },
    "diamonds/domains/nft/entry/distributor/distributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../../storage/distributor.sol\";\nimport \"../../../../contexts/initializable/modifiers/initializer.sol\";\nimport \"../../../../contexts/access-control/modifiers/authorized.sol\";\nimport \"../../../../contexts/access-control/entry/grant-role.sol\";\nimport \"../../../../contexts/access-control/entry/revoke-role.sol\";\nimport \"../../../../contexts/access-control/entry/renounce-role.sol\";\nimport \"../../internal/distributor.sol\";\n\n// Utils\nimport { ADMIN } from \"../../roles.sol\";\nimport {\n    ClaimNFTTierRequest,\n    DistributorEvents\n} from \"../../data/distributor.sol\";\n\n// Interfaces\nimport \"../../interfaces/ITellerNFT.sol\";\n\nimport \"hardhat/console.sol\";\n\ncontract ent_distributor_NFT_v1 is\n    sto_Distributor,\n    mod_initializer_Initializable_v1,\n    mod_authorized_AccessControl_v1,\n    ent_grantRole_AccessControl,\n    ent_revokeRole_AccessControl,\n    ent_renounceRole_AccessControl,\n    int_distributor_NFT_v1\n{\n    /**\n     * @notice Claims TellerNFTs for a given verifiable merkle proofs for each tier.\n     * @param account The address to claim NFTs on behalf.\n     * @param requests An array requests data generated from the merkle tree.\n     *\n     * Requirements:\n     *  - Node in the merkle root must not be claimed already\n     *  - Proof of the node must match the merkle tree\n     */\n    function claim(address account, ClaimNFTTierRequest[] calldata requests)\n        external\n    {\n        for (uint256 i; i < requests.length; i++) {\n            console.log(i, requests[i].tierIndex, requests[i].nodeIndex);\n            console.log(\n                _isClaimed(requests[i].tierIndex, requests[i].nodeIndex)\n            );\n            require(\n                !_isClaimed(requests[i].tierIndex, requests[i].nodeIndex),\n                \"Distributor: already claimed\"\n            );\n            require(\n                _verifyProof(account, requests[i]),\n                \"Distributor: invalid proof\"\n            );\n\n            // Mark it claimed and send the token.\n            _setClaimed(requests[i].tierIndex, requests[i].nodeIndex);\n            for (uint256 j; j < requests[i].amount; j++) {\n                distributorStore().nft.mint(requests[i].tierIndex, account);\n            }\n        }\n\n        emit DistributorEvents.Claimed(account);\n    }\n\n    /**\n     * @notice Adds a new tier to be able to claim NFTs.\n     * @param newMerkleRoot The merkle root to assign to the new tier.\n     *\n     * Requirements:\n     *  - Caller must be an admin\n     *  - Tier must already be added to TellerNFT\n     */\n    function addTier(bytes32 newMerkleRoot)\n        external\n        authorized(ADMIN, msg.sender)\n    {\n        bytes32[] storage merkleRoots = distributorStore().tierMerkleRoots;\n        require(\n            distributorStore()\n                .nft\n                .getTier(merkleRoots.length)\n                .contributionAsset != address(0),\n            \"Distributor: tier does not exist on NFT\"\n        );\n        merkleRoots.push(newMerkleRoot);\n\n        emit DistributorEvents.TierAdded(\n            distributorStore().tierMerkleRoots.length - 1\n        );\n    }\n\n    /**\n     * @notice Initializes the Distributor contract with the TellerNFT\n     * @param _nft The address of the TellerNFT.\n     * @param admin The address of an admin.\n     */\n    function initialize(address _nft, address admin) external initializer {\n        distributorStore().nft = ITellerNFT(_nft);\n\n        _grantRole(ADMIN, admin);\n    }\n}\n\ncontract ent_distributor_NFT is ent_distributor_NFT_v1 {}\n"
    },
    "diamonds/domains/nft/storage/distributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Interfaces\nimport \"../interfaces/ITellerNFT.sol\";\n\nabstract contract sto_Distributor {\n    struct DistributorStorage {\n        ITellerNFT nft;\n        bytes32[] tierMerkleRoots;\n        mapping(uint256 => mapping(uint256 => uint256)) claimedBitMap;\n    }\n\n    function distributorStore()\n        internal\n        pure\n        returns (DistributorStorage storage s)\n    {\n        bytes32 POSITION = keccak256(\"teller_nft.distributor\");\n        assembly {\n            s.slot := POSITION\n        }\n    }\n}\n"
    },
    "diamonds/contexts/initializable/modifiers/initializer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../storage.sol\";\n\nabstract contract mod_initializer_Initializable_v1 is sto_Initializable {\n    modifier initializer {\n        require(\n            !initializableStorage().initialized,\n            \"Teller: already initialized\"\n        );\n        _;\n    }\n}\n\nabstract contract mod_initializer_Initializable is\n    mod_initializer_Initializable_v1\n{}\n"
    },
    "diamonds/contexts/access-control/modifiers/authorized.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {\n    int_requireAuthorization_AccessControl_v1\n} from \"../internal/require-authorization.sol\";\n\nabstract contract mod_authorized_AccessControl_v1 is\n    int_requireAuthorization_AccessControl_v1\n{\n    modifier authorized(bytes32 role, address account) {\n        _requireAuthorization(role, account);\n        _;\n    }\n}\n\nabstract contract mod_authorized_AccessControl is\n    mod_authorized_AccessControl_v1\n{}\n"
    },
    "diamonds/contexts/access-control/entry/grant-role.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../data.sol\";\nimport \"../internal/grant-role.sol\";\nimport \"../internal/is-admin-for-role.sol\";\n\nabstract contract ent_grantRole_AccessControl_v1 is\n    int_grantRole_AccessControl,\n    int_isAdminForRole_AccessControl_v1\n{\n    /**\n     * @notice Grants an address a new role.\n     *\n     * Requirements:\n     *  - Sender must be role admin.\n     */\n    function grantRole(bytes32 role, address account) external {\n        require(_isAdminForRole(role, msg.sender), \"AccessControl: not admin\");\n        _grantRole(role, account);\n    }\n}\n\nabstract contract ent_grantRole_AccessControl is\n    ent_grantRole_AccessControl_v1\n{}\n"
    },
    "diamonds/contexts/access-control/entry/renounce-role.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../data.sol\";\nimport \"../internal/revoke-role.sol\";\nimport \"../internal/is-admin-for-role.sol\";\n\nabstract contract ent_renounceRole_AccessControl_v1 is\n    int_revokeRole_AccessControl,\n    int_isAdminForRole_AccessControl_v1\n{\n    /**\n     * @notice Grants an address a new role.\n     *\n     * Requirements:\n     *  - Sender must be role admin.\n     */\n    function renounceRole(bytes32 role, address account) external {\n        require(\n            account == msg.sender,\n            \"AccessControl: can only renounce roles for self\"\n        );\n        _revokeRole(role, account);\n    }\n}\n\nabstract contract ent_renounceRole_AccessControl is\n    ent_renounceRole_AccessControl_v1\n{}\n"
    },
    "diamonds/domains/nft/internal/distributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/distributor.sol\";\n\n// Libraries\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\n// Utils\nimport { ClaimNFTTierRequest } from \"../data/distributor.sol\";\n\ncontract int_distributor_NFT_v1 is sto_Distributor {\n    /**\n     * @notice It checks the merkle root for a tier if it has already been claimed.\n     * @param tierIndex Index of the tier.\n     * @param nodeIndex Index of the node in the merkle root.\n     */\n    function _setClaimed(uint256 tierIndex, uint256 nodeIndex) internal {\n        uint256 claimedWordIndex = nodeIndex / 256;\n        uint256 claimedBitIndex = nodeIndex % 256;\n        distributorStore().claimedBitMap[tierIndex][claimedWordIndex] =\n            distributorStore().claimedBitMap[tierIndex][claimedWordIndex] |\n            (1 << claimedBitIndex);\n    }\n\n    /**\n     * @notice It checks the merkle root for a tier if it has already been claimed.\n     * @param tierIndex Index of the tier.\n     * @param nodeIndex Index of the node in the merkle root.\n     */\n    function _isClaimed(uint256 tierIndex, uint256 nodeIndex)\n        internal\n        view\n        returns (bool)\n    {\n        uint256 claimedWordIndex = nodeIndex / 256;\n        uint256 claimedBitIndex = nodeIndex % 256;\n        uint256 claimedWord =\n            distributorStore().claimedBitMap[tierIndex][claimedWordIndex];\n        uint256 mask = (1 << claimedBitIndex);\n        return claimedWord & mask == mask;\n    }\n\n    function _verifyProof(address account, ClaimNFTTierRequest memory request)\n        internal\n        view\n        returns (bool verified)\n    {\n        verified = MerkleProof.verify(\n            request.merkleProof,\n            distributorStore().tierMerkleRoots[request.tierIndex],\n            keccak256(\n                abi.encodePacked(request.nodeIndex, account, request.amount)\n            )\n        );\n    }\n}\n"
    },
    "diamonds/domains/nft/roles.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nbytes32 constant ADMIN = keccak256(\"ADMIN\");\nbytes32 constant MINTER = keccak256(\"MINTER\");\n"
    },
    "diamonds/domains/nft/data/distributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nstruct ClaimNFTTierRequest {\n    uint256 tierIndex;\n    uint256 nodeIndex;\n    uint256 amount;\n    bytes32[] merkleProof;\n}\n\nlibrary DistributorEvents {\n    event Claimed(address indexed account);\n\n    event TierAdded(uint256 index);\n}\n"
    },
    "diamonds/domains/nft/interfaces/ITellerNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\n// Contracts\nimport { Tier } from \"../data/tier.sol\";\n\n// Interfaces\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface ITellerNFT is IERC721 {\n    /**\n     * @notice The contract metadata URI.\n     */\n    function contractURI() external view returns (string memory);\n\n    /**\n     * @notice The token metadata URI.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    /**\n     * @notice It returns information about a Tier for an index.\n     */\n    function getTier(uint256 tierIndex)\n        external\n        view\n        returns (Tier memory tier_);\n\n    /**\n     * @notice It returns information about a Tier for a token ID.\n     */\n    function getTokenTier(uint256 tokenId)\n        external\n        view\n        returns (uint256 index_, Tier memory tier_);\n\n    /**\n     * @notice It returns an array of token IDs owned by an address.\n     * @dev It uses a EnumerableSet to store values and loops over each element to add to the array.\n     * @dev Can be costly if calling within a contract for address with many tokens.\n     */\n    function getTierHashes(uint256 tierIndex)\n        external\n        view\n        returns (string[] memory hashes_);\n\n    /**\n     * @notice It returns an array of token IDs owned by an address.\n     * @dev It uses a EnumerableSet to store values and loops over each element to add to the array.\n     * @dev Can be costly if calling within a contract for address with many tokens.\n     */\n    function ownedTokens(address owner)\n        external\n        view\n        returns (uint256[] memory owned);\n\n    /**\n     * @notice It mints a new token for a Tier index.\n     *\n     * Requirements:\n     *  - Caller must be an authorized minter\n     */\n    function mint(uint256 tierIndex, address owner) external;\n\n    /**\n     * @notice Adds a new Tier to be minted with the given information.\n     * @dev It auto increments the index of the next tier to add.\n     * @param newTier Information about the new tier to add.\n     *\n     * Requirements:\n     *  - Caller must have the {MINTER} role\n     */\n    function addTier(Tier memory newTier) external;\n\n    /**\n     * @notice Initializes the TellerNFT.\n     * @param minters The addresses that should allowed to mint tokens.\n     * @param _contractURI The link to the initial contract level metadata.\n     */\n    function initialize(address[] calldata minters, string memory _contractURI)\n        external;\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "diamonds/domains/nft/data/tier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nstruct Tier {\n    uint256 baseLoanSize;\n    string[] hashes;\n    address contributionAsset;\n    uint256 contributionSize;\n    uint8 contributionMultiplier;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "diamonds/contexts/initializable/storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract sto_Initializable {\n    struct InitializableLayout {\n        bool initialized;\n    }\n\n    bytes32 internal constant INITIALIZABLE_STORAGE_POSITION =\n        keccak256(abi.encode(\"teller_protocol.context.initializable.v1\"));\n\n    function initializableStorage()\n        internal\n        pure\n        returns (InitializableLayout storage l_)\n    {\n        bytes32 position = INITIALIZABLE_STORAGE_POSITION;\n\n        assembly {\n            l_.slot := position\n        }\n    }\n}\n"
    },
    "diamonds/contexts/access-control/internal/require-authorization.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./has-role.sol\";\n\nabstract contract int_requireAuthorization_AccessControl_v1 is\n    int_hasRole_AccessControl_v1\n{\n    function _requireAuthorization(bytes32 role, address account)\n        internal\n        view\n    {\n        require(_hasRole(role, account), \"AccessControl: unauthorized\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle trees (hash trees),\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n"
    },
    "diamonds/domains/nft/interfaces/ITellerNFTDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Interfaces\nimport \"./ITellerNFT.sol\";\n\n// Utils\nimport { ClaimNFTTierRequest } from \"../data/distributor.sol\";\n\ninterface ITellerNFTDistributor {\n    /**\n     * @notice It gets the TellerNFT diamond instance used to mint.\n     */\n    function nft() external view returns (ITellerNFT _nft);\n\n    /**\n     * @notice It gets the merkle roots for each tier it can distribute NFTs.\n     */\n    function getTierMerkleRoots()\n        external\n        view\n        returns (bytes32[] memory _roots);\n\n    /**\n     * @notice It checks the merkle root for a tier if it has already been claimed.\n     * @param tierIndex Index of the tier.\n     * @param nodeIndex Index of the node in the merkle root.\n     */\n    function isClaimed(uint256 tierIndex, uint256 nodeIndex)\n        external\n        view\n        returns (bool _claimed);\n\n    /**\n     * @notice Claims TellerNFTs for a given verifiable merkle proofs for each tier.\n     * @param account The address to claim NFTs on behalf.\n     * @param requests An array requests data generated from the merkle tree.\n     *\n     * Requirements:\n     *  - Node in the merkle root must not be claimed already\n     *  - Proof of the node must match the merkle tree\n     */\n    function claim(address account, ClaimNFTTierRequest[] calldata requests)\n        external;\n\n    /**\n     * @notice Adds a new tier to be able to claim NFTs.\n     * @param newMerkleRoot The merkle root to assign to the new tier.\n     *\n     * Requirements:\n     *  - Caller must be an admin\n     *  - Tier must already be added to TellerNFT\n     */\n    function addTier(bytes32 newMerkleRoot) external;\n\n    function grantRole(bytes32 role, address account) external;\n\n    function revokeRole(bytes32 role, address account) external;\n\n    function renounceRole(bytes32 role, address account) external;\n\n    /**\n     * @notice Initializes the Distributor contract with the TellerNFT\n     * @param _nft The address of the TellerNFT.\n     * @param admin The address of an admin.\n     */\n    function initialize(address _nft, address admin) external;\n}\n"
    },
    "diamonds/domains/nft/external/distributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/distributor.sol\";\nimport \"../internal/distributor.sol\";\n\ncontract ext_distributor_NFT_v1 is sto_Distributor, int_distributor_NFT_v1 {\n    /**\n     * @notice It gets the TellerNFT diamond instance used to mint.\n     */\n    function nft() external view returns (ITellerNFT nft_) {\n        nft_ = distributorStore().nft;\n    }\n\n    /**\n     * @notice It gets the merkle roots for each tier it can distribute NFTs.\n     */\n    function getTierMerkleRoots()\n        external\n        view\n        returns (bytes32[] memory roots_)\n    {\n        roots_ = distributorStore().tierMerkleRoots;\n    }\n\n    /**\n     * @notice It checks the merkle root for a tier if it has already been claimed.\n     * @param tierIndex Index of the tier.\n     * @param nodeIndex Index of the node in the merkle root.\n     */\n    function isClaimed(uint256 tierIndex, uint256 nodeIndex)\n        external\n        view\n        returns (bool claimed_)\n    {\n        claimed_ = _isClaimed(tierIndex, nodeIndex);\n    }\n}\n\ncontract ext_distributor_NFT is ext_distributor_NFT_v1 {}\n"
    },
    "diamonds/domains/nft/entry/tier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../../../contexts/access-control/modifiers/authorized.sol\";\nimport \"../storage/tier.sol\";\n\n// Utils\nimport { Tier } from \"../data/tier.sol\";\nimport { MINTER } from \"../roles.sol\";\n\ncontract ent_tier_NFT_v1 is sto_Tier, mod_authorized_AccessControl_v1 {\n    using Counters for Counters.Counter;\n\n    /**\n     * @notice Adds a new Tier to be minted with the given information.\n     * @dev It auto increments the index of the next tier to add.\n     * @param newTier Information about the new tier to add.\n     *\n     * Requirements:\n     *  - Caller must have the {MINTER} role\n     */\n    function addTier(Tier memory newTier)\n        external\n        authorized(MINTER, msg.sender)\n    {\n        Tier storage tier =\n            tierStore().tiers[tierStore().tierCounter.current()];\n\n        tier.baseLoanSize = newTier.baseLoanSize;\n        tier.hashes = newTier.hashes;\n        tier.contributionAsset = newTier.contributionAsset;\n        tier.contributionSize = newTier.contributionSize;\n        tier.contributionMultiplier = newTier.contributionMultiplier;\n\n        tierStore().tierCounter.increment();\n    }\n}\n\ncontract ent_tier_NFT is ent_tier_NFT_v1 {}\n"
    },
    "diamonds/domains/nft/storage/tier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport { Tier } from \"../data/tier.sol\";\n\n// Libraries\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nabstract contract sto_Tier {\n    struct TierStorage {\n        // It holds the total number of tiers.\n        Counters.Counter tierCounter;\n        // It holds the total number of tokens minted.\n        Counters.Counter tokenCounter;\n        // It holds the information about a tier.\n        mapping(uint256 => Tier) tiers;\n        // It holds which tier a token ID is in.\n        mapping(uint256 => uint256) tokenTierMap;\n    }\n\n    function tierStore() internal pure returns (TierStorage storage s) {\n        bytes32 POSITION = keccak256(\"teller_nft.tier\");\n\n        assembly {\n            s.slot := POSITION\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n}\n"
    },
    "diamonds/domains/nft/entry/set-contract-uri.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/tier.sol\";\nimport {\n    mod_authorized_AccessControl\n} from \"../../../contexts/access-control/modifiers/authorized.sol\";\nimport { ADMIN } from \"../roles.sol\";\n\n// Libraries\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"../internal/set-contract-uri.sol\";\n\ncontract ent_setContractURI_NFT_v1 is\n    sto_Tier,\n    mod_authorized_AccessControl,\n    int_setContractURI_NFT\n{\n    /**\n     * @notice Sets the contract level metadata URI.\n     * @param contractURI The link to the initial contract level metadata.\n     */\n    function setContractURI(string memory contractURI)\n        external\n        authorized(ADMIN, msg.sender)\n    {\n        _setContractURI(contractURI);\n    }\n}\n\ncontract ent_setContractURI_NFT is ent_setContractURI_NFT_v1 {}\n"
    },
    "diamonds/domains/nft/internal/set-contract-uri.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/token.sol\";\n\nabstract contract int_setContractURI_NFT_v1 is sto_Token {\n    /**\n     * @notice Sets the contract level metadata URI.\n     * @param contractURI The link to the initial contract level metadata.\n     */\n    function _setContractURI(string memory contractURI) internal {\n        tokenStore().contractURI = contractURI;\n    }\n}\n\nabstract contract int_setContractURI_NFT is int_setContractURI_NFT_v1 {}\n"
    },
    "diamonds/domains/nft/storage/token.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Libraries\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nabstract contract sto_Token {\n    bytes32 internal constant POSITION = keccak256(\"teller_nft.token\");\n\n    struct TokenStorage {\n        // It holds a set of token IDs for an owner address.\n        mapping(address => EnumerableSet.UintSet) ownerTokenIDs;\n        // Link to the contract metadata\n        string contractURI;\n    }\n\n    function tokenStore() internal pure returns (TokenStorage storage s) {\n        bytes32 position = POSITION;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "diamonds/domains/nft/external/token.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/token.sol\";\n\n// Libraries\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract ext_token_NFT_v1 is sto_Token {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /**\n     * @notice It returns an array of token IDs owned by an address.\n     * @dev It uses a EnumerableSet to store values and loops over each element to add to the array.\n     * @dev Can be costly if calling within a contract for address with many tokens.\n     */\n    function ownedTokens(address owner)\n        external\n        view\n        returns (uint256[] memory owned)\n    {\n        EnumerableSet.UintSet storage set = tokenStore().ownerTokenIDs[owner];\n        owned = new uint256[](set.length());\n        for (uint256 i; i < owned.length; i++) {\n            owned[i] = set.at(i);\n        }\n    }\n}\n\ncontract ext_token_NFT is ext_token_NFT_v1 {}\n"
    },
    "diamonds/domains/nft/internal/set-owner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/tier.sol\";\nimport \"../../../contexts/ERC721/storage/ERC721.sol\";\nimport \"../storage/token.sol\";\n\n// Libraries\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nabstract contract int_setOwner_NFT_v1 is sto_ERC721, sto_Token {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /**\n     * @notice It removes the token from the current owner set and adds to new owner.\n     */\n    function _setOwner(address newOwner, uint256 tokenId) internal {\n        address currentOwner = erc721Store().owners[tokenId];\n        if (currentOwner != address(0)) {\n            tokenStore().ownerTokenIDs[currentOwner].remove(tokenId);\n        }\n        tokenStore().ownerTokenIDs[newOwner].add(tokenId);\n    }\n}\n\nabstract contract int_setOwner_NFT is int_setOwner_NFT_v1 {}\n"
    },
    "diamonds/contexts/ERC721/storage/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract sto_ERC721 {\n    struct ERC721Storage {\n        // Token name\n        string name;\n        // Token symbol\n        string symbol;\n        // Mapping from token ID to owner address\n        mapping(uint256 => address) owners;\n        // Mapping owner address to token count\n        mapping(address => uint256) balances;\n        // Mapping from token ID to approved address\n        mapping(uint256 => address) tokenApprovals;\n        // Mapping from owner to operator approvals\n        mapping(address => mapping(address => bool)) operatorApprovals;\n    }\n\n    function erc721Store() internal pure returns (ERC721Storage storage s) {\n        bytes32 position = keccak256(\"teller_protocol.ERC721_token\");\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "diamonds/domains/nft/internal/transfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../../../contexts/ERC721/storage/ERC721.sol\";\nimport {\n    int_transfer_ERC721_v1\n} from \"../../../contexts/ERC721/internal/transfer.sol\";\nimport { int_setOwner_NFT } from \"./set-owner.sol\";\n\nabstract contract int_Transfer_v1 is\n    sto_ERC721,\n    int_transfer_ERC721_v1,\n    int_setOwner_NFT\n{\n    /**\n     * @dev It updates the list of user owned tokens and then calls ERC721 internal transfer.\n     * @dev See {ERC721-_transfer}.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal override {\n        _setOwner(to, tokenId);\n        super._transfer(from, to, tokenId);\n    }\n}\n"
    },
    "diamonds/contexts/ERC721/internal/transfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/ERC721.sol\";\nimport { int_beforeTokenTransfer_ERC721_v1 } from \"./before-token-transfer.sol\";\nimport { int_checkOnReceived_ERC721_v1 } from \"./check-received.sol\";\nimport { int_approve_ERC721_v1 } from \"./approve.sol\";\n\n// Utils\nimport { ERC721EventsLib } from \"../data.sol\";\n\nabstract contract int_transfer_ERC721_v1 is\n    sto_ERC721,\n    int_beforeTokenTransfer_ERC721_v1,\n    int_checkOnReceived_ERC721_v1,\n    int_approve_ERC721_v1\n{\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(\n            erc721Store().owners[tokenId] == from,\n            \"ERC721: transfer of token that is not own\"\n        );\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        erc721Store().balances[from] -= 1;\n        erc721Store().balances[to] += 1;\n        erc721Store().owners[tokenId] = to;\n\n        emit ERC721EventsLib.Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        require(\n            _isApprovedOrOwner(msg.sender, tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n        _transfer(from, to, tokenId);\n        require(\n            _checkOnERC721Received(from, to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n}\n"
    },
    "diamonds/contexts/ERC721/internal/before-token-transfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract int_beforeTokenTransfer_ERC721_v1 {\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "diamonds/contexts/ERC721/internal/check-received.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Interfaces\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\n// Libraries\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nabstract contract int_checkOnReceived_ERC721_v1 {\n    using Address for address;\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual returns (bool) {\n        if (to.isContract()) {\n            try\n                IERC721Receiver(to).onERC721Received(\n                    msg.sender,\n                    from,\n                    tokenId,\n                    _data\n                )\n            returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\n                        \"ERC721: transfer to non ERC721Receiver implementer\"\n                    );\n                } else {\n                    // solhint-disable-next-line no-inline-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n}\n"
    },
    "diamonds/contexts/ERC721/internal/approve.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/ERC721.sol\";\nimport { int_exists_ERC721_v1 } from \"./exists.sol\";\n\n// Utils\nimport { ERC721EventsLib } from \"../data.sol\";\n\nabstract contract int_approve_ERC721_v1 is sto_ERC721, int_exists_ERC721_v1 {\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        erc721Store().tokenApprovals[tokenId] = to;\n        emit ERC721EventsLib.Approval(\n            erc721Store().owners[tokenId],\n            to,\n            tokenId\n        );\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address operator, bool approved)\n        internal\n        virtual\n    {\n        erc721Store().operatorApprovals[msg.sender][operator] = approved;\n        emit ERC721EventsLib.ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721: operator query for nonexistent token\"\n        );\n        address owner = erc721Store().owners[tokenId];\n        return (spender == owner ||\n            erc721Store().tokenApprovals[tokenId] == spender ||\n            erc721Store().operatorApprovals[owner][spender]);\n    }\n\n    /**\n     * @dev Returns whether `operator` is allowed to manage all of `owner` tokens.\n     */\n    function _isApprovedForAll(address owner, address operator)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        return erc721Store().operatorApprovals[owner][operator];\n    }\n}\n"
    },
    "diamonds/contexts/ERC721/data.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary ERC721EventsLib {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed approved,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "diamonds/contexts/ERC721/internal/exists.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/ERC721.sol\";\n\nabstract contract int_exists_ERC721_v1 is sto_ERC721 {\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return erc721Store().owners[tokenId] != address(0);\n    }\n}\n"
    },
    "diamonds/contexts/ERC721/internal/mint.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/ERC721.sol\";\nimport { int_exists_ERC721_v1 } from \"./exists.sol\";\nimport { int_checkOnReceived_ERC721_v1 } from \"./check-received.sol\";\nimport { int_beforeTokenTransfer_ERC721_v1 } from \"./before-token-transfer.sol\";\n\n// Utils\nimport { ERC721EventsLib } from \"../data.sol\";\n\nabstract contract int_mint_ERC721_v1 is\n    sto_ERC721,\n    int_exists_ERC721_v1,\n    int_checkOnReceived_ERC721_v1,\n    int_beforeTokenTransfer_ERC721_v1\n{\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        erc721Store().balances[to] += 1;\n        erc721Store().owners[tokenId] = to;\n\n        emit ERC721EventsLib.Transfer(address(0), to, tokenId);\n    }\n}\n"
    },
    "diamonds/domains/nft/entry/mint.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/tier.sol\";\nimport \"../../../contexts/access-control/modifiers/authorized.sol\";\nimport { int_setOwner_NFT } from \"../internal/set-owner.sol\";\nimport { int_mint_ERC721_v1 } from \"../../../contexts/ERC721/internal/mint.sol\";\nimport { MINTER } from \"../roles.sol\";\n\n// Libraries\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract ent_mint_NFT_v1 is\n    mod_authorized_AccessControl_v1,\n    sto_Tier,\n    int_setOwner_NFT,\n    int_mint_ERC721_v1\n{\n    using Counters for Counters.Counter;\n\n    /**\n     * @notice It mints a new token for a Tier index.\n     *\n     * Requirements:\n     *  - Caller must be an authorized minter\n     */\n    function mint(uint256 tierIndex, address owner)\n        external\n        authorized(MINTER, msg.sender)\n    {\n        // Get the new token ID\n        uint256 tokenId = tierStore().tokenCounter.current();\n        tierStore().tokenCounter.increment();\n\n        // Mint and set the token to the tier index\n        _safeMint(owner, tokenId);\n        tierStore().tokenTierMap[tokenId] = tierIndex;\n\n        // Set owner\n        _setOwner(owner, tokenId);\n    }\n}\n\ncontract ent_mint_NFT is ent_mint_NFT_v1 {}\n"
    },
    "diamonds/domains/nft/external/tier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/tier.sol\";\n\ncontract ext_tier_NFT_v1 is sto_Tier {\n    /**\n     * @notice It returns information about a Tier for an index.\n     */\n    function getTier(uint256 tierIndex)\n        external\n        view\n        returns (Tier memory tier_)\n    {\n        tier_ = tierStore().tiers[tierIndex];\n    }\n\n    /**\n     * @notice It returns information about a Tier for a token ID.\n     */\n    function getTokenTier(uint256 tokenId)\n        external\n        view\n        returns (uint256 index_, Tier memory tier_)\n    {\n        index_ = tierStore().tokenTierMap[tokenId];\n        tier_ = tierStore().tiers[index_];\n    }\n\n    /**\n     * @notice It returns an array of token IDs owned by an address.\n     * @dev It uses a EnumerableSet to store values and loops over each element to add to the array.\n     * @dev Can be costly if calling within a contract for address with many tokens.\n     */\n    function getTierHashes(uint256 tierIndex)\n        external\n        view\n        returns (string[] memory hashes_)\n    {\n        hashes_ = tierStore().tiers[tierIndex].hashes;\n    }\n}\n\ncontract ext_tier_NFT is ext_tier_NFT_v1 {}\n"
    },
    "diamonds/domains/nft/internal/metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/token.sol\";\nimport \"../storage/tier.sol\";\n\n// Libraries\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nabstract contract int_metadata_NFT_v1 is sto_Token, sto_Tier {\n    using SafeMath for uint256;\n\n    /**\n     * @notice The base URI path where the token media is hosted.\n     * @dev Base URI for computing {tokenURI}.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"https://gateway.pinata.cloud/ipfs/\";\n    }\n\n    /**\n     * @notice It returns the hash to use for the token URI.\n     */\n    function _tokenURI(uint256 tokenId)\n        internal\n        view\n        virtual\n        returns (string memory)\n    {\n        string[] storage tierImageHashes =\n            tierStore().tiers[tierStore().tokenTierMap[tokenId]].hashes;\n        return tierImageHashes[tokenId.mod(tierImageHashes.length)];\n    }\n\n    /**\n     * @dev Sets the URI for the contract metadata.\n     */\n    function _setContractURI(string memory uri) internal {\n        tokenStore().contractURI = uri;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "diamonds/libraries/NumbersList.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./NumbersLib.sol\";\n\n/**\n * @dev Utility library of inline functions on NumbersList.Values\n *\n * @author develop@teller.finance\n */\nlibrary NumbersList {\n    using NumbersLib for uint256;\n\n    // Holds values to calculate the threshold of a list of numbers\n    struct Values {\n        uint256 count; // The total number of numbers added\n        uint256 max; // The maximum number that was added\n        uint256 min; // The minimum number that was added\n        uint256 sum; // The total sum of the numbers that were added\n    }\n\n    /**\n     * @dev Add to the sum while keeping track of min and max values\n     * @param self The Value this function was called on\n     * @param newValue Number to increment sum by\n     */\n    function addValue(Values memory self, uint256 newValue) internal pure {\n        if (self.max < newValue) {\n            self.max = newValue;\n        }\n        if (self.min > newValue || self.count == 0) {\n            self.min = newValue;\n        }\n        self.sum = self.sum + (newValue);\n        self.count = self.count + 1;\n    }\n\n    /**\n     * @param self The Value this function was called on\n     * @return the number of times the sum has updated\n     */\n    function valuesCount(Values memory self) internal pure returns (uint256) {\n        return self.count;\n    }\n\n    /**\n     * @dev Checks if the sum has been changed\n     * @param self The Value this function was called on\n     * @return boolean\n     */\n    function isEmpty(Values memory self) internal pure returns (bool) {\n        return valuesCount(self) == 0;\n    }\n\n    /**\n     * @param self The Value this function was called on\n     * @return the average number that was used to calculate the sum\n     */\n    function getAverage(Values memory self) internal pure returns (uint256) {\n        return isEmpty(self) ? 0 : self.sum / (valuesCount(self));\n    }\n\n    /**\n     * @dev Checks if the min and max numbers are within the acceptable tolerance\n     * @param self The Value this function was called on\n     * @param tolerancePercentage Acceptable tolerance percentage as a whole number\n     * The percentage should be entered with 2 decimal places. e.g. 2.5% should be entered as 250.\n     * @return boolean\n     */\n    function isWithinTolerance(Values memory self, uint256 tolerancePercentage)\n        internal\n        pure\n        returns (bool)\n    {\n        if (isEmpty(self)) {\n            return false;\n        }\n        uint256 average = getAverage(self);\n        uint256 toleranceAmount = average.percent(tolerancePercentage);\n\n        uint256 minTolerance = average - toleranceAmount;\n        if (self.min < minTolerance) {\n            return false;\n        }\n\n        uint256 maxTolerance = average + toleranceAmount;\n        if (self.max > maxTolerance) {\n            return false;\n        }\n        return true;\n    }\n}\n"
    },
    "diamonds/libraries/NumbersLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev Utility library for uint256 numbers\n *\n * @author develop@teller.finance\n */\nlibrary NumbersLib {\n    /**\n        @dev It represents 100% with 2 decimal places.\n     */\n    function ONE_HUNDRED_PERCENT() internal pure returns (uint256) {\n        return 10000;\n    }\n\n    /**\n        @notice Returns the positive difference value of a number to another number\n        @param self The number to return the difference value for\n        @param other The other number to calucualte the difference against\n        @return uint256 The difference value\n     */\n    function diff(uint256 self, uint256 other) internal pure returns (uint256) {\n        return other > self ? other - self : self - other;\n    }\n\n    /**\n        @notice Returns the positive percentage difference of a value to 100%\n        @param self The number to return the percentage difference for\n        @return uint256 The percentage difference value\n     */\n    function diffOneHundredPercent(uint256 self)\n        internal\n        pure\n        returns (uint256)\n    {\n        return diff(self, ONE_HUNDRED_PERCENT());\n    }\n\n    /**\n     * @notice Returns a percentage value of a number.\n     * @param self The number to get a percentage of.\n     * @param percentage The percentage value to calculate with 2 decimal places (10000 = 100%).\n     */\n    function percent(uint256 self, uint256 percentage)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (self * percentage) / ONE_HUNDRED_PERCENT();\n    }\n\n    function percent(int256 self, uint256 percentage)\n        internal\n        pure\n        returns (int256)\n    {\n        return (self * int256(percentage)) / int256(ONE_HUNDRED_PERCENT());\n    }\n\n    function abs(int256 self) internal pure returns (uint256) {\n        return self >= 0 ? uint256(self) : uint256(-1 * self);\n    }\n\n    /**\n     * @notice Returns a ratio of 2 numbers.\n     * @param self The number to get a ratio of.\n     * @param num The number to calculate the ratio for.\n     * @return Ratio of 2 numbers with 2 decimal places (10000 = 100%).\n     */\n    function ratioOf(uint256 self, uint256 num)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (self * ONE_HUNDRED_PERCENT()) / num;\n    }\n}\n"
    },
    "diamonds/libraries/TellerCommon.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./NumbersList.sol\";\n\n/**\n * @dev Library of structs common across the Teller protocol\n *\n * @author develop@teller.finance\n */\nlibrary TellerCommon {\n    enum LoanStatus { NonExistent, TermsSet, Active, Closed }\n\n    /**\n        @notice Represents a user signature\n        @param v The recovery identifier represented by the last byte of a ECDSA signature as an int\n        @param r The random point x-coordinate of the signature respresented by the first 32 bytes of the generated ECDSA signature\n        @param s The signature proof represented by the second 32 bytes of the generated ECDSA signature\n     */\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    /**\n        @notice Borrower request object to take out a loan\n        @param borrower The wallet address of the borrower\n        @param recipient The address where funds will be sent, only applicable in over collateralized loans\n        @param consensusAddress The address of the Teller loan consensus contract to which the request should be sent\n        @param requestNonce The nonce of the borrower wallet address required for authentication\n        @param amount The amount of tokens requested by the borrower for the loan\n        @param duration The length of time in seconds that the loan has been requested for\n        @param requestTime The timestamp at which the loan was requested\n     */\n    struct LoanRequest {\n        address payable borrower;\n        address recipient;\n        address consensusAddress;\n        uint256 requestNonce;\n        uint256 amount;\n        uint256 duration;\n        uint256 requestTime;\n    }\n\n    /**\n        @notice Borrower response object to take out a loan\n        @param signer The wallet address of the signer validating the interest request of the lender\n        @param consensusAddress The address of the Teller loan consensus contract to which the request should be sent\n        @param responseTime The timestamp at which the response was sent\n        @param interestRate The signed interest rate generated by the signer's Credit Risk Algorithm (CRA)\n        @param collateralRatio The ratio of collateral to loan amount that is generated by the signer's Credit Risk Algorithm (CRA)\n        @param maxLoanAmount The largest amount of tokens that can be taken out in the loan by the borrower\n        @param signature The signature generated by the signer in the format of the above Signature struct\n     */\n    struct LoanResponse {\n        address signer;\n        address consensusAddress;\n        uint256 responseTime;\n        uint256 interestRate;\n        uint256 collateralRatio;\n        uint256 maxLoanAmount;\n        Signature signature;\n    }\n\n    /**\n        @notice Represents loan terms based on consensus values\n        @param interestRate The consensus value for the interest rate based on all the loan responses from the signers\n        @param collateralRatio The consensus value for the ratio of collateral to loan amount required for the loan, based on all the loan responses from the signers\n        @param maxLoanAmount The consensus value for the largest amount of tokens that can be taken out in the loan, based on all the loan responses from the signers\n     */\n    struct AccruedLoanTerms {\n        NumbersList.Values interestRate;\n        NumbersList.Values collateralRatio;\n        NumbersList.Values maxLoanAmount;\n    }\n\n    /**\n        @notice Represents the terms of a loan based on the consensus of a LoanRequest\n        @param borrower The wallet address of the borrower\n        @param recipient The address where funds will be sent, only applicable in over collateralized loans\n        @param interestRate The consensus interest rate calculated based on all signer loan responses\n        @param collateralRatio The consensus ratio of collateral to loan amount calculated based on all signer loan responses\n        @param maxLoanAmount The consensus largest amount of tokens that can be taken out in the loan by the borrower, calculated based on all signer loan responses\n        @param duration The consensus length of loan time, calculated based on all signer loan responses\n     */\n    struct LoanTerms {\n        address payable borrower;\n        address recipient;\n        uint256 interestRate;\n        uint256 collateralRatio;\n        uint256 maxLoanAmount;\n        uint256 duration;\n    }\n\n    /**\n        @notice Data per borrow as struct\n        @param id The id of the loan for internal tracking\n        @param loanTerms The loan terms returned by the signers\n        @param termsExpiry The timestamp at which the loan terms expire, after which if the loan is not yet active, cannot be taken out\n        @param loanStartTime The timestamp at which the loan became active\n        @param collateral The total amount of collateral deposited by the borrower to secure the loan\n        @param lastCollateralIn The amount of collateral that was last deposited by the borrower to keep the loan active\n        @param principalOwed The total amount of the loan taken out by the borrower, reduces on loan repayments\n        @param interestOwed The total interest owed by the borrower for the loan, reduces on loan repayments\n        @param borrowedAmount The total amount of the loan size taken out\n        @param escrow The address of the escrow contract that holds the funds taken out in the loan on behalf of the borrower\n        @param status The status of the loan currently based on the LoanStatus enum - NonExistent, TermsSet, Active, Closed\n        @param liquidated Flag marking if the loan has been liquidated or not\n     */\n    struct Loan {\n        uint256 id;\n        LoanTerms loanTerms;\n        uint256 termsExpiry;\n        uint256 loanStartTime;\n        uint256 collateral;\n        uint256 lastCollateralIn;\n        uint256 principalOwed;\n        uint256 interestOwed;\n        uint256 borrowedAmount;\n        address escrow;\n        LoanStatus status;\n        bool liquidated;\n    }\n\n    /**\n        @notice This struct defines a market in the platform.\n        @dev It is used by the MarketFactory contract.\n        @param loans The address for the Teller LoanManager contract that is being used for a market\n        @param lendingPool The address for the Teller Lending Pool contract that is being used for a market\n        @param loanTermsConsensus The address for the Teller Loan Terms Consensus contract that is being used for a market\n        @param exists Flag marking if the market is defined on the platform or not\n     */\n    struct Market {\n        address loans;\n        address lendingPool;\n        address loanTermsConsensus;\n        bool exists;\n    }\n\n    /**\n        @notice This struct is used to register new logic versions.\n        @param logic The address for the new contract holding the logic.\n        @param logicName The name for the logic to be stored as.\n     */\n    struct CreateLogicVersionRequest {\n        address logic;\n        bytes32 logicName;\n    }\n\n    /**\n        @notice This struct is used to upgrade logic versions.\n        @param logic The new logic address to upgrade proxy to.\n        @param logicName The name for the logic to be stored as.\n        @param proxy The (optional) DynamicUpgradeable proxy address to attempt to directly upgrade.\n     */\n    struct UpgradeLogicVersionRequest {\n        address logic;\n        bytes32 logicName;\n        address proxy;\n    }\n\n    /**\n     * @notice This struct defines the dapp address and data to execute in the callDapp function.\n     * @dev It is executed using a delegatecall in the Escrow contract.\n     * @param exists Flag marking whether the dapp is a Teller registered address\n     * @param unsecured Flag marking if the loan allowed to be used in the dapp is a secured, or unsecured loan\n     */\n    struct Dapp {\n        bool exists;\n        bool unsecured;\n    }\n\n    /**\n     * @notice This struct defines the dapp address and data to execute in the callDapp function.\n     * @dev It is executed using a delegatecall in the Escrow contract.\n     * @param location The proxy contract address for the dapp that will be used by the Escrow contract delegatecall\n     * @param data The encoded function signature with parameters for the dapp method in bytes that will be sent in the Escrow delegatecall\n     */\n    struct DappData {\n        address location;\n        bytes data;\n    }\n}\n"
    },
    "diamonds/domains/nft/external/metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/token.sol\";\nimport \"../storage/tier.sol\";\nimport \"../../../contexts/ERC721/storage/ERC721.sol\";\nimport {\n    ext_metadata_ERC721_v1,\n    int_metadata_ERC721_v1\n} from \"../../../contexts/ERC721/external/metadata.sol\";\nimport { int_metadata_NFT_v1 } from \"../internal/metadata.sol\";\n\n// Libraries\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/**\n * @notice NFT contract inherits this instead of the ERC721 one so the internal methods get overridden.\n */\ncontract ext_metadata_NFT_v1 is\n    sto_Token,\n    sto_Tier,\n    sto_ERC721,\n    ext_metadata_ERC721_v1,\n    int_metadata_NFT_v1\n{\n    using SafeMath for uint256;\n\n    function contractURI() external view returns (string memory) {\n        return tokenStore().contractURI;\n    }\n\n    /**\n     * @notice The base URI path where the token media is hosted.\n     * @dev Base URI for computing {tokenURI}.\n     */\n    function _baseURI()\n        internal\n        view\n        override(int_metadata_ERC721_v1, int_metadata_NFT_v1)\n        returns (string memory)\n    {\n        return int_metadata_NFT_v1._baseURI();\n    }\n\n    /**\n     * @notice It returns the hash to use for the token URI.\n     */\n    function _tokenURI(uint256 tokenId)\n        internal\n        view\n        override(int_metadata_ERC721_v1, int_metadata_NFT_v1)\n        returns (string memory)\n    {\n        return int_metadata_NFT_v1._tokenURI(tokenId);\n    }\n}\n\ncontract ext_metadata_NFT is ext_metadata_NFT_v1 {}\n"
    },
    "diamonds/contexts/ERC721/external/metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/ERC721.sol\";\nimport { int_exists_ERC721_v1 } from \"../internal/exists.sol\";\nimport { int_metadata_ERC721_v1 } from \"../internal/metadata.sol\";\n\ncontract ext_metadata_ERC721_v1 is\n    sto_ERC721,\n    int_exists_ERC721_v1,\n    int_metadata_ERC721_v1\n{\n    /**\n     * @notice Base URI for computing {tokenURI}. See {IERC721Metadata-_baseURI}\n     */\n    function baseURI() external view virtual returns (string memory) {\n        return _baseURI();\n    }\n\n    /**\n     * @notice See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId)\n        external\n        view\n        virtual\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721Metadata: URI query for nonexistent token\"\n        );\n\n        string memory base = _baseURI();\n        return\n            bytes(base).length > 0\n                ? string(abi.encodePacked(base, _tokenURI(tokenId)))\n                : \"\";\n    }\n}\n"
    },
    "diamonds/contexts/ERC721/internal/metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"../storage/ERC721.sol\";\n\nabstract contract int_metadata_ERC721_v1 is sto_ERC721 {\n    using Strings for uint256;\n\n    /**\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\n     * in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev Token URI for computing {tokenURI}. Will be appended to {_baseURI}.\n     */\n    function _tokenURI(uint256 tokenId)\n        internal\n        view\n        virtual\n        returns (string memory)\n    {\n        return tokenId.toString();\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant alphabet = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = alphabet[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n}\n"
    },
    "diamonds/domains/nft/entry/initialize.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../../../contexts/ERC721/storage/ERC721.sol\";\nimport {\n    mod_initializer_Initializable\n} from \"../../../contexts/initializable/modifiers/initializer.sol\";\nimport {\n    int_grantRole_AccessControl\n} from \"../../../contexts/access-control/internal/grant-role.sol\";\nimport { int_setContractURI_NFT } from \"../internal/set-contract-uri.sol\";\nimport { MINTER } from \"../roles.sol\";\n\ncontract ent_initialize_NFT_v1 is\n    sto_ERC721,\n    mod_initializer_Initializable,\n    int_grantRole_AccessControl,\n    int_setContractURI_NFT\n{\n    /**\n     * @notice Initializes the TellerNFT.\n     * @param minters The addresses that should allowed to mint tokens.\n     * @param _contractURI The link to the initial contract level metadata.\n     */\n    function initialize(address[] calldata minters, string memory _contractURI)\n        external\n        initializer\n    {\n        erc721Store().name = \"Teller NFT\";\n        erc721Store().symbol = \"TNFT\";\n\n        for (uint256 i; i < minters.length; i++) {\n            _grantRole(MINTER, minters[i]);\n        }\n\n        _setContractURI(_contractURI);\n    }\n}\n\ncontract ent_initialize_NFT is ent_initialize_NFT_v1 {}\n"
    },
    "diamonds/contexts/access-control/storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./data.sol\";\n\nabstract contract sto_AccessControl {\n    struct AccessControlLayout {\n        mapping(bytes32 => RoleData) roles;\n        bool notEntered;\n    }\n\n    function accessControl()\n        internal\n        pure\n        returns (AccessControlLayout storage l_)\n    {\n        bytes32 position = keccak256(\"teller_protocol.storage.access_control\");\n\n        assembly {\n            l_.slot := position\n        }\n    }\n}\n"
    },
    "diamonds/contexts/access-control/modifiers/entry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { sto_AccessControl } from \"../storage.sol\";\n\nabstract contract mod_entry_AccessControl_v1 is sto_AccessControl {\n    modifier entry {\n        AccessControlLayout storage layout = accessControl();\n        require(layout.notEntered, \"RE_ENTRANCY\");\n        layout.notEntered = false;\n        _;\n        layout.notEntered = true;\n    }\n}\n"
    },
    "diamonds/contexts/access-control/internal/transfer-owner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../data.sol\";\nimport \"../storage/owner.sol\";\n\nabstract contract int_transferOwner_AccessControl_v1 is\n    dat_AccessControl,\n    sto_AccessControl_Owner\n{\n    function _transferOwner(address owner) internal {\n        require(\n            accessControlOwnerStore().owner == msg.sender,\n            \"AccessControl: cannot transfer; not owner\"\n        );\n        accessControlOwnerStore().owner = owner;\n        emit OwnerTransferred(owner, msg.sender);\n    }\n}\n\nabstract contract int_transferOwner_AccessControl is\n    int_transferOwner_AccessControl_v1\n{}\n"
    },
    "diamonds/contexts/access-control/storage/owner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract sto_AccessControl_Owner {\n    bytes32 internal constant POS =\n        keccak256(\"teller_protocol.storage.access_control.owner\");\n\n    struct AccessControlOwnerStorage {\n        address owner;\n    }\n\n    function accessControlOwnerStore()\n        internal\n        pure\n        returns (AccessControlOwnerStorage storage s)\n    {\n        bytes32 position = POS;\n\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
    },
    "diamonds/contexts/access-control/modifiers/only-owner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../storage/owner.sol\";\n\nabstract contract mod_onlyOwner_AccessControl_v1 is sto_AccessControl_Owner {\n    modifier onlyOwner() {\n        require(\n            accessControlOwnerStore().owner == msg.sender,\n            \"AccessControl: not owner\"\n        );\n        _;\n    }\n}\n\nabstract contract mod_onlyOwner_AccessControl is\n    mod_onlyOwner_AccessControl_v1\n{}\n"
    },
    "diamonds/contexts/access-control/internal/set-owner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../data.sol\";\nimport \"../storage/owner.sol\";\n\nabstract contract int_setOwner_AccessControl_v1 is\n    dat_AccessControl,\n    sto_AccessControl_Owner\n{\n    function _setOwner(address owner) internal {\n        require(\n            accessControlOwnerStore().owner == address(0),\n            \"AccessControl: owner already set\"\n        );\n        accessControlOwnerStore().owner = owner;\n        emit OwnerSet(owner);\n    }\n}\n\nabstract contract int_setOwner_AccessControl is int_setOwner_AccessControl_v1 {}\n"
    },
    "diamonds/contexts/access-control/internal/set-role-admin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../data.sol\";\nimport \"./admin-role-for.sol\";\n\nabstract contract int_setRoleAdmin_AccessControl_v1 is\n    dat_AccessControl_v1,\n    int_adminRoleFor_AccessControl_v1\n{\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\n        emit RoleAdminChanged(role, _adminRoleFor(role), adminRole);\n        accessControlRolesStore().roles[role].adminRole = adminRole;\n    }\n}\n\nabstract contract int_setRoleAdmin_AccessControl is\n    int_setRoleAdmin_AccessControl_v1\n{}\n"
    },
    "diamonds/contexts/access-control/internal/admin-role-for.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/roles.sol\";\n\nabstract contract int_adminRoleFor_AccessControl_v1 is sto_AccessControl_Roles {\n    function _adminRoleFor(bytes32 role)\n        internal\n        view\n        returns (bytes32 adminRoleFor_)\n    {\n        adminRoleFor_ = accessControlRolesStore().roles[role].adminRole;\n    }\n}\n\nabstract contract int_adminRoleFor_AccessControl is\n    int_adminRoleFor_AccessControl_v1\n{}\n"
    },
    "diamonds/contexts/access-control/internal/authorize.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./has-role.sol\";\n\nabstract contract int_authorize_AccessControl_v1 is\n    int_hasRole_AccessControl_v1\n{\n    function authorize(bytes32 role, address account) internal view {\n        require(_hasRole(role, account), \"UNAUTHORIZED\");\n    }\n}\n"
    },
    "diamonds/contexts/access-control/external/has-role.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { int_hasRole_AccessControl_v1 } from \"../internal/has-role.sol\";\n\nabstract contract ext_hasRole_AccessControl_V1 is int_hasRole_AccessControl_v1 {\n    function hasRole(bytes32 role, address account)\n        external\n        view\n        returns (bool hasRole_)\n    {\n        hasRole_ = _hasRole(role, account);\n    }\n}\n\nabstract contract ext_hasRole_AccessControl is ext_hasRole_AccessControl_V1 {}\n"
    },
    "diamonds/contexts/access-control/external/index.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./has-role.sol\";\n"
    },
    "diamonds/contexts/access-control/external/admin-role-for.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {\n    int_adminRoleFor_AccessControl_v1\n} from \"../internal/admin-role-for.sol\";\n\nabstract contract ext_adminRoleFor_AccessControl_V1 is\n    int_adminRoleFor_AccessControl_v1\n{\n    function adminRoleFor(bytes32 role)\n        external\n        view\n        returns (bytes32 adminRoleFor_)\n    {\n        adminRoleFor_ = _adminRoleFor(role);\n    }\n}\n\nabstract contract ext_adminRoleFor_AccessControl is\n    int_adminRoleFor_AccessControl_v1\n{}\n"
    },
    "diamonds/contexts/ERC721/internal/burn.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/ERC721.sol\";\nimport { int_beforeTokenTransfer_ERC721_v1 } from \"./before-token-transfer.sol\";\nimport { int_approve_ERC721_v1 } from \"./approve.sol\";\n\n// Utils\nimport { ERC721EventsLib } from \"../data.sol\";\n\nabstract contract int_burn_ERC721_v1 is\n    sto_ERC721,\n    int_approve_ERC721_v1,\n    int_beforeTokenTransfer_ERC721_v1\n{\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = erc721Store().owners[tokenId];\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        erc721Store().balances[owner] -= 1;\n        delete erc721Store().owners[tokenId];\n\n        emit ERC721EventsLib.Transfer(owner, address(0), tokenId);\n    }\n}\n"
    },
    "diamonds/contexts/ERC721/external/approve.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/ERC721.sol\";\nimport { int_approve_ERC721_v1 } from \"../internal/approve.sol\";\nimport { int_exists_ERC721_v1 } from \"../internal/exists.sol\";\n\ncontract ext_approve_ERC721_v1 is\n    sto_ERC721,\n    int_exists_ERC721_v1,\n    int_approve_ERC721_v1\n{\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId)\n        external\n        view\n        virtual\n        returns (address)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721: approved query for nonexistent token\"\n        );\n\n        return erc721Store().tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        virtual\n        returns (bool)\n    {\n        return _isApprovedForAll(owner, operator);\n    }\n}\n"
    },
    "diamonds/contexts/ERC721/entry/approve.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/ERC721.sol\";\nimport \"../internal/approve.sol\";\n\ncontract ent_approve_ERC721_v1 is sto_ERC721, int_approve_ERC721_v1 {\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) external virtual {\n        address owner = erc721Store().owners[tokenId];\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            msg.sender == owner || _isApprovedForAll(owner, msg.sender),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved)\n        external\n        virtual\n    {\n        require(operator != msg.sender, \"ERC721: approve to caller\");\n\n        _setApprovalForAll(operator, approved);\n    }\n}\n"
    },
    "diamonds/contexts/ERC721/external/owner-of.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/ERC721.sol\";\n\ncontract ext_ownerOf_ERC721_v1 is sto_ERC721 {\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) external view virtual returns (address) {\n        address owner = erc721Store().owners[tokenId];\n        require(\n            owner != address(0),\n            \"ERC721: owner query for nonexistent token\"\n        );\n        return owner;\n    }\n}\n"
    },
    "diamonds/contexts/ERC721/external/details.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/ERC721.sol\";\n\ncontract ext_details_ERC721_v1 is sto_ERC721 {\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() external view returns (string memory) {\n        return erc721Store().name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function _symbol() external view returns (string memory) {\n        return erc721Store().symbol;\n    }\n}\n"
    },
    "diamonds/contexts/ERC721/external/balance-of.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/ERC721.sol\";\n\ncontract ext_balanceOf_ERC721_v1 is sto_ERC721 {\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) external view virtual returns (uint256) {\n        require(\n            owner != address(0),\n            \"ERC721: balance query for the zero address\"\n        );\n        return erc721Store().balances[owner];\n    }\n}\n"
    },
    "diamonds/contexts/ERC721/entry/transfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Contracts\nimport \"../storage/ERC721.sol\";\nimport { int_transfer_ERC721_v1 } from \"../internal/transfer.sol\";\n\ncontract ent_transfer_ERC721_v1 is sto_ERC721, int_transfer_ERC721_v1 {\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external virtual {\n        require(\n            _isApprovedOrOwner(msg.sender, tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external virtual {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata _data\n    ) external virtual {\n        _safeTransfer(from, to, tokenId, _data);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}

{
  "address": "0x1E688028319B5D82B5D6270DB16cF7B7B7661e80",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseLoanSize",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "hashes",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "contributionAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "contributionSize",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "contributionMultiplier",
              "type": "uint8"
            }
          ],
          "internalType": "struct ITellerNFT.Tier",
          "name": "newTier",
          "type": "tuple"
        }
      ],
      "name": "addTier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierIndex",
          "type": "uint256"
        }
      ],
      "name": "getTierHashes",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "minters",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ownedTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "owned",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseLoanSize",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contributionAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "contributionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "contributionMultiplier",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenTierMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa49c2b0503dd0b247f6c617c33e174e05553148a2bb00dadc42677f3c9c1a28d",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0x1E688028319B5D82B5D6270DB16cF7B7B7661e80",
    "transactionIndex": 0,
    "gasUsed": "2167821",
    "logsBloom": "0x
    "blockHash": "0x124901d7ab437bfed87b7e082006afbfdabcd052587367c834025ba1fe852508",
    "transactionHash": "0xa49c2b0503dd0b247f6c617c33e174e05553148a2bb00dadc42677f3c9c1a28d",
    "logs": [],
    "blockNumber": 8357162,
    "cumulativeGasUsed": "2167821",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a4ea15d4540f28fad2092d4efd84510d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseLoanSize\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"hashes\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"contributionAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contributionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"contributionMultiplier\",\"type\":\"uint8\"}],\"internalType\":\"struct ITellerNFT.Tier\",\"name\":\"newTier\",\"type\":\"tuple\"}],\"name\":\"addTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierIndex\",\"type\":\"uint256\"}],\"name\":\"getTierHashes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"minters\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ownedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"owned\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseLoanSize\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contributionAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contributionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"contributionMultiplier\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenTierMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"develop@teller.finance\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTierHashes(uint256)\":{\"details\":\"It uses a EnumerableSet to store values and loops over each element to add to the array.Can be costly if calling within a contract for address with many tokens.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownedTokens(address)\":{\"details\":\"It uses a EnumerableSet to store values and loops over each element to add to the array.Can be costly if calling within a contract for address with many tokens.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTierHashes(uint256)\":{\"notice\":\"It returns an array of token IDs owned by an address.\"},\"ownedTokens(address)\":{\"notice\":\"It returns an array of token IDs owned by an address.\"},\"tokenURI(uint256)\":{\"notice\":\"The token URI is based on the token ID.\"}},\"notice\":\"This contract is used by borrowers to call Dapp functions (using delegate calls).This contract should only be constructed using it's upgradeable Proxy contract.In order to call a Dapp function, the Dapp must be added in the DappRegistry instance.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/nft/TellerNFT.sol\":\"TellerNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x03715be1098d3c552dfa96634ceb4c512965d312ab7c57141e6c63f0e4417dc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60aac6a853246704b017e55f9d3b456debfd0a7f49dd9a99e7113bed03ef0696\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721Upgradeable).interfaceId\\n            || interfaceId == type(IERC721MetadataUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721Upgradeable.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721Upgradeable.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xa0ebb4a22e77b476065176ffbd8dbac451c7af3c35fe04ece51b578eaad6a784\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x33620beff0655c5e728a72fff76fb6ce2dc32fc6b61eb8e435b12ed1adf31525\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x9ef7f2874f4a491f253a81eb4c5b9a7b6467a287aa0c32ac3dd684260a3cd7ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb16ff89dbc7c288e670fabe2aaf59bd6eeb7869febec09eccc248d584ca0d89f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x64581a092c059ab0cb74f473545e379b8a88f36a6a57f805515ef8c6ae061847\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x6964377da5c19ade6b3e96bae0c0e82494d518af70cf12d2cdb3276f78fb3d85\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x71e0d1cc75b67306382e055b789b6d3ffe34a9e2e55380d3c9895a36a42229e1\",\"license\":\"MIT\"},\"contracts/base/nft/NFTStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n// Contracts\\n\\n// Interfaces\\n\\n/*****************************************************************************************************/\\n/**                                             WARNING                                             **/\\n/**                        THIS CONTRACT IS AN UPGRADEABLE STORAGE CONTRACT!                        **/\\n/**  ---------------------------------------------------------------------------------------------  **/\\n/**  Do NOT change the order of or PREPEND any storage variables to this or new versions            **/\\n/**  of this contract as this will cause a ripple affect to the storage slots of all child          **/\\n/**  contracts that inherit from this contract to be overwritten on the deployed proxy contract!!   **/\\n/**                                                                                                 **/\\n/**  Visit https://docs.openzeppelin.com/upgrades/2.6/proxies#upgrading-via-the-proxy-pattern for   **/\\n/**  more information.                                                                              **/\\n/*****************************************************************************************************/\\n/**\\n * @notice\\n *\\n * @author develop@teller.finance\\n */\\ncontract NFTStorage {\\n\\n}\\n\",\"keccak256\":\"0x75fa0c3cd6605e536bdf76bc42c8b7009c02abd41ec3396f2838e886cf916c3f\",\"license\":\"MIT\"},\"contracts/base/nft/TellerNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n// Contracts\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"../upgradeable/DynamicUpgradeable.sol\\\";\\nimport \\\"./NFTStorage.sol\\\";\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Interfaces\\nimport \\\"../../interfaces/nft/ITellerNFT.sol\\\";\\n\\n/*****************************************************************************************************/\\n/**                                             WARNING                                             **/\\n/**                                  THIS CONTRACT IS UPGRADEABLE!                                  **/\\n/**  ---------------------------------------------------------------------------------------------  **/\\n/**  Do NOT change the order of or PREPEND any storage variables to this or new versions of this    **/\\n/**  contract as this will cause the the storage slots to be overwritten on the proxy contract!!    **/\\n/**                                                                                                 **/\\n/**  Visit https://docs.openzeppelin.com/upgrades/2.6/proxies#upgrading-via-the-proxy-pattern for   **/\\n/**  more information.                                                                              **/\\n/*****************************************************************************************************/\\n/**\\n * @notice This contract is used by borrowers to call Dapp functions (using delegate calls).\\n * @notice This contract should only be constructed using it's upgradeable Proxy contract.\\n * @notice In order to call a Dapp function, the Dapp must be added in the DappRegistry instance.\\n *\\n * @author develop@teller.finance\\n */\\ncontract TellerNFT is\\n    ITellerNFT,\\n    ERC721Upgradeable,\\n    AccessControlUpgradeable,\\n    NFTStorage\\n{\\n    using Counters for Counters.Counter;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    // It holds the total number of tiers.\\n    Counters.Counter internal tierCounter;\\n\\n    // It holds the total number of tokens minted for a tier.\\n    mapping(uint256 => Counters.Counter) internal tierTokenCounter;\\n\\n    // It holds the information about a tier.\\n    mapping(uint256 => Tier) public tiers;\\n\\n    // It holds which tier a token ID is in.\\n    mapping(uint256 => uint256) public tokenTierMap;\\n\\n    // It holds a set of token IDs for an owner address.\\n    mapping(address => EnumerableSet.UintSet) internal ownerTokenIDs;\\n\\n    modifier onlyMinter() {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"Teller: not minter\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice It returns an array of token IDs owned by an address.\\n     * @dev It uses a EnumerableSet to store values and loops over each element to add to the array.\\n     * @dev Can be costly if calling within a contract for address with many tokens.\\n     */\\n    function getTierHashes(uint256 tierIndex)\\n        external\\n        view\\n        returns (string[] memory)\\n    {\\n        return tiers[tierIndex].hashes;\\n    }\\n\\n    /**\\n     * @notice It returns an array of token IDs owned by an address.\\n     * @dev It uses a EnumerableSet to store values and loops over each element to add to the array.\\n     * @dev Can be costly if calling within a contract for address with many tokens.\\n     */\\n    function ownedTokens(address owner)\\n        external\\n        view\\n        returns (uint256[] memory owned)\\n    {\\n        EnumerableSet.UintSet storage set = ownerTokenIDs[owner];\\n        owned = new uint256[](set.length());\\n        for (uint256 i; i < owned.length; i++) {\\n            owned[i] = set.at(i);\\n        }\\n    }\\n\\n    function mint(uint256 tierIndex, address owner) external override onlyMinter {\\n        // Get the new token ID\\n        Counters.Counter storage counter = tierTokenCounter[tierIndex];\\n        uint256 tokenId = counter.current();\\n        counter.increment();\\n\\n        // Mint and set the token to the tier index\\n        _safeMint(owner, tokenId);\\n        tokenTierMap[tokenId] = tierIndex;\\n\\n        // Set\\n        _setOwner(owner, tokenId);\\n    }\\n\\n    function addTier(Tier memory newTier) external override onlyMinter {\\n        Tier storage tier = tiers[tierCounter.current()];\\n        require(\\n            tier.contributionAsset == address(0),\\n            \\\"Teller: tier already exists\\\"\\n        );\\n\\n        tier.baseLoanSize = newTier.baseLoanSize;\\n        tier.hashes = newTier.hashes;\\n        tier.contributionAsset = newTier.contributionAsset;\\n        tier.contributionSize = newTier.contributionSize;\\n        tier.contributionMultiplier = newTier.contributionMultiplier;\\n\\n        tierCounter.increment();\\n    }\\n\\n    function removeMinter(address minter) external onlyMinter {\\n        revokeRole(MINTER_ROLE, minter);\\n    }\\n\\n    function addMinter(address minter) public onlyMinter {\\n        _setupRole(MINTER_ROLE, minter);\\n    }\\n\\n    function initialize(address[] calldata minters) external {\\n        __ERC721_init(\\\"Teller NFT\\\", \\\"TNFT\\\");\\n\\n        for (uint i; i < minters.length; i++) {\\n            _setupRole(MINTER_ROLE, minters[i]);\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        pure\\n        override(AccessControlUpgradeable, ERC721Upgradeable)\\n        returns (bool)\\n    {\\n        return interfaceId == type(ITellerNFT).interfaceId;\\n    }\\n\\n    /**\\n     * @notice The token URI is based on the token ID.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, _tokenURIHash(tokenId)))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @notice It returns the hash to use for the token URI.\\n     */\\n    function _tokenURIHash(uint256 tokenId)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        string[] storage tierImageHashes = tiers[tokenTierMap[tokenId]].hashes;\\n        return tierImageHashes[tokenId.mod(tierImageHashes.length)];\\n    }\\n\\n    /**\\n     * @notice The base URI path where the token media is hosted.\\n     * @dev Base URI for computing {tokenURI}.\\n     */\\n    function _baseURI() internal view override returns (string memory) {\\n        return \\\"https://gateway.pinata.cloud/ipfs/\\\";\\n    }\\n\\n    /**\\n     * @notice Moves token to new owner set and then transfers.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n        _setOwner(to, tokenId);\\n        super._transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @notice It removes the token from the current owner set and adds to new owner.\\n     */\\n    function _setOwner(address newOwner, uint256 tokenId) internal {\\n        address currentOwner = ownerOf(tokenId);\\n        if (currentOwner != address(0)) {\\n            ownerTokenIDs[currentOwner].remove(tokenId);\\n        }\\n        ownerTokenIDs[newOwner].add(tokenId);\\n    }\\n\\n    function _msgData()\\n        internal\\n        pure\\n        override(ContextUpgradeable)\\n        returns (bytes calldata)\\n    {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x331c87a72439f33593f5f4c88058901e56ec00a0e16331cd4e93225b2abfe51b\",\"license\":\"MIT\"},\"contracts/base/upgradeable/DynamicUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"./DynamicUpgradeableStorage.sol\\\";\\n\\n/*****************************************************************************************************/\\n/**                                             WARNING                                             **/\\n/**                              THIS CONTRACT IS AN UPGRADEABLE FACET!                             **/\\n/**  ---------------------------------------------------------------------------------------------  **/\\n/**  Do NOT place ANY storage/state variables directly in this contract! If you wish to make        **/\\n/**  make changes to the state variables used by this contract, do so in its defined Storage        **/\\n/**  contract that this contract inherits from                                                      **/\\n/**                                                                                                 **/\\n/**  Visit https://docs.openzeppelin.com/upgrades/2.6/proxies#upgrading-via-the-proxy-pattern for   **/\\n/**  more information.                                                                              **/\\n/*****************************************************************************************************/\\n/**\\n * @notice This contract is used define the DynamicUpgradeable contracts logic.\\n *\\n * @author develop@teller.finance\\n */\\ncontract DynamicUpgradeable is DynamicUpgradeableStorage {\\n    /* Modifiers */\\n\\n    /**\\n     * @notice It checks if the proxy's implementation cache is invalidated and should be updated.\\n     * @dev Any external, non-view function should use this modifier.\\n     * @dev This modifier should be the very FIRST modifier for functions.\\n     */\\n    modifier updateImpIfNeeded() {\\n        if (_cacheInvalidated()) {\\n            _updateImplementationStored();\\n        }\\n        _;\\n    }\\n\\n    /* External Functions */\\n\\n    /**\\n     * @notice It updates a proxy's cached implementation address.\\n     * @notice It must only be called by the LogicVersionsRegistry for non strict DynamicProxy\\n     */\\n    function upgradeProxyTo(address newImplementation) public {\\n        require(msg.sender == address(logicRegistry), \\\"MUST_BE_LOGIC_REGISTRY\\\");\\n        implementationStored = newImplementation;\\n        _implementationBlockUpdated = block.number;\\n    }\\n\\n    /* Internal Functions **/\\n\\n    /**\\n     * @notice Returns the current implementation used by the proxy to delegate a call to.\\n     * @return address of the current implementation\\n     */\\n    function _implementation() internal view virtual returns (address) {\\n        if (_cacheInvalidated()) {\\n            (, , address currentLogic) =\\n                logicRegistry.getLogicVersion(logicName);\\n            return currentLogic;\\n        }\\n        return implementationStored;\\n    }\\n\\n    /**\\n     * @notice Updates the current implementation logic address for the stored logic name.\\n     * @dev It uses the LogicVersionsRegistry contract to get the logic address or the cached address if valid.\\n     * @dev It caches the current logic address for the proxy to reduce gas on subsequent calls within the same block.\\n     */\\n    function _updateImplementationStored() public {\\n        (, , address currentLogic) = logicRegistry.getLogicVersion(logicName);\\n\\n        if (implementationStored != currentLogic) {\\n            implementationStored = currentLogic;\\n        }\\n        _implementationBlockUpdated = block.number;\\n    }\\n\\n    /**\\n     * @notice It checks if the current cached address implementation is marked as invalidated.\\n     * @notice It is marked invalidated if the proxy is strict dynamic and last update was >= 50 blocks ago.\\n     * @return bool True if the cached implementation address is invalid.\\n     */\\n    function _cacheInvalidated() internal view returns (bool) {\\n        return strictDynamic && _implementationBlockUpdated + 1 <= block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x1f81daf5440455fdbf9b4396f9bbf30107cd4aa20bdff11ac1d4ed9c01ff4dee\",\"license\":\"MIT\"},\"contracts/base/upgradeable/DynamicUpgradeableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Interfaces\\nimport \\\"../../interfaces/LogicVersionsRegistryInterface.sol\\\";\\n\\n/*****************************************************************************************************/\\n/**                                             WARNING                                             **/\\n/**                        THIS CONTRACT IS A NON UPGRADEABLE STORAGE CONTRACT!                     **/\\n/**  ---------------------------------------------------------------------------------------------  **/\\n/**  Do NOT change the order of, PREPEND, or APPEND any storage variables to this or new versions   **/\\n/**  of this contract as this will cause a ripple affect to the storage slots of all child          **/\\n/**  contracts that inherit from this contract to be overwritten on the deployed proxy contract!!   **/\\n/**                                                                                                 **/\\n/**  Visit https://docs.openzeppelin.com/upgrades/2.6/proxies#upgrading-via-the-proxy-pattern for   **/\\n/**  more information.                                                                              **/\\n/*****************************************************************************************************/\\n/**\\n    @notice This contract is used define the storage variables for all DynamicUpgradeable contracts.\\n\\n    @author develop@teller.finance\\n */\\nabstract contract DynamicUpgradeableStorage {\\n    /**\\n     * @notice It returns the logic registry that is used to determine the implementation logic for this proxy.\\n     * @dev See LogicVersionsRegistry contract.\\n     * @return LogicVersionsRegistryInterface\\n     */\\n    LogicVersionsRegistryInterface public logicRegistry;\\n\\n    /**\\n     * @notice It represent the logic name (key) used for this proxy.\\n     * @dev It is used by LogicVersionsRegistry to get the logic address for the given logic name.\\n     * @dev It must NOT change over time.\\n     * @return bytes32 the logic name.\\n     */\\n    bytes32 public logicName;\\n\\n    /**\\n     * @notice Boolean indicating if the proxy must check the registry for a new implementation.\\n     */\\n    bool public strictDynamic;\\n\\n    /**\\n     * @notice It stores the last known logic address locally to reduce gas costs.\\n     */\\n    address public implementationStored;\\n\\n    /**\\n     * @dev It is the block number which the last time the proxy implementation was checked.\\n     */\\n    uint256 internal _implementationBlockUpdated;\\n}\\n\",\"keccak256\":\"0x9ec01157f5e16d63bff28a18fb5da1d103c307320ac3057eea7a9e7b68e5318c\",\"license\":\"MIT\"},\"contracts/interfaces/LogicVersionsRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Commons\\nimport \\\"../util/LogicVersionLib.sol\\\";\\nimport \\\"../util/TellerCommon.sol\\\";\\n\\n/**\\n    @notice It defines all the functions to manage the logic contract versions.\\n\\n    @author develop@teller.finance\\n */\\ninterface LogicVersionsRegistryInterface {\\n    /**\\n        @notice This event is emitted when a new logic version is created.\\n        @param logicName new logic name.\\n        @param logic address where the logic is.\\n        @param version initial version for the logic address.\\n     */\\n    event LogicVersionCreated(\\n        bytes32 indexed logicName,\\n        address indexed logic,\\n        uint256 version\\n    );\\n\\n    /**\\n        @notice This event is emitted when a logic version is rollbacked.\\n        @param logicName the logic name.\\n        @param oldLogic the old logic address.\\n        @param newLogic the new (or previous) logic address.\\n        @param oldVersion the old version.\\n        @param newVersion the new (previous) version.\\n     */\\n    event LogicVersionRollbacked(\\n        bytes32 indexed logicName,\\n        address oldLogic,\\n        address newLogic,\\n        uint256 oldVersion,\\n        uint256 newVersion\\n    );\\n\\n    /**\\n        @notice This event is emitted when a new logic version is upgraded.\\n        @param logicName new logic name.\\n        @param oldLogic the old logic address.\\n        @param newLogic the new logic address.\\n        @param oldVersion the old version.\\n        @param newVersion the new version.\\n     */\\n    event LogicVersionUpgraded(\\n        bytes32 indexed logicName,\\n        address oldLogic,\\n        address newLogic,\\n        uint256 oldVersion,\\n        uint256 newVersion\\n    );\\n\\n    /** External Functions */\\n\\n    /**\\n        @notice It creates multiple logic versions.\\n        @param newLogicVersions lists of the new logic versions to create.\\n     */\\n    function createLogicVersions(\\n        TellerCommon.CreateLogicVersionRequest[] calldata newLogicVersions\\n    ) external;\\n\\n    /**\\n        @notice It upgrades multiple logic addresses.\\n        @param newLogicVersions lists of the new logic versions to create.\\n     */\\n    function upgradeLogicVersions(\\n        TellerCommon.UpgradeLogicVersionRequest[] calldata newLogicVersions\\n    ) external;\\n\\n    /**\\n        @notice It upgrades a logic version given a logic name.\\n        @param logicName logic name to upgrade.\\n        @param newLogic the new logic address to set.\\n        @param proxy The (optional) DynamicUpgradeable proxy address to attempt to directly upgrade.\\n     */\\n    function upgradeLogicVersion(\\n        bytes32 logicName,\\n        address newLogic,\\n        address proxy\\n    ) external;\\n\\n    /**\\n        @notice It rollbacks a logic to a previous version.\\n        @param logicName logic name to rollback.\\n        @param previousVersion the previous version to be used.\\n     */\\n    function rollbackLogicVersion(bytes32 logicName, uint256 previousVersion)\\n        external;\\n\\n    /**\\n        @notice It gets the current logic version for a given logic name.\\n        @param logicName to get.\\n        @return currentVersion the current logic version number.\\n        @return latestVersion the latest version number (higher than current if rolled back).\\n        @return logic the address of the current logic version\\n     */\\n    function getLogicVersion(bytes32 logicName)\\n        external\\n        view\\n        returns (\\n            uint256 currentVersion,\\n            uint256 latestVersion,\\n            address logic\\n        );\\n\\n    /**\\n        @notice It tests whether a logic name is already configured.\\n        @param logicName logic name to test.\\n        @return true if the logic version is already configured. Otherwise it returns false.\\n     */\\n    function hasLogicVersion(bytes32 logicName) external view returns (bool);\\n\\n    /**\\n        @notice It initializes this logic versions registry contract instance.\\n        @param aOwner address of the owner of the registry.\\n        @param initialLogicVersions lists of the new logic versions to create.\\n     */\\n    function initialize(\\n        address aOwner,\\n        TellerCommon.CreateLogicVersionRequest[] calldata initialLogicVersions\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcc4e9941221f7142f8cd1b7d800e825be3f42192ea0e5044dd965366d49c58b2\",\"license\":\"MIT\"},\"contracts/interfaces/nft/ITellerNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface ITellerNFT {\\n    struct Tier {\\n        uint256 baseLoanSize;\\n        string[] hashes;\\n        address contributionAsset;\\n        uint256 contributionSize;\\n        uint8 contributionMultiplier;\\n    }\\n\\n    function mint(uint256 tierIndex, address owner) external virtual;\\n\\n    function addTier(Tier memory newTier) external virtual;\\n}\\n\",\"keccak256\":\"0x8f7527def63042d932bfb145ed2686d7a8beb7001a0b36518ae36eb462890183\",\"license\":\"MIT\"},\"contracts/util/LogicVersionLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n    @notice This library manages the functions for the logic version struct.\\n\\n    @author develop@teller.finance\\n */\\nlibrary LogicVersionLib {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    /**\\n        @notice It stores all the versions for a given logic.\\n        @param currentVersion the current version.\\n        @param latestVersion the latest version.\\n        @param versions mapping version to logic address.\\n        @param exists boolean to test whether this logic version exists or not.\\n     */\\n    struct LogicVersion {\\n        uint256 currentVersion;\\n        uint256 latestVersion;\\n        mapping(uint256 => address) versions;\\n        bool exists;\\n    }\\n\\n    /**\\n        @notice It creates a new logic version.\\n        @param self the current logic version instance.\\n        @param logic initial logic address.\\n     */\\n    function initialize(LogicVersion storage self, address logic) internal {\\n        requireNotExists(self);\\n        require(logic.isContract(), \\\"LOGIC_MUST_BE_CONTRACT\\\");\\n        self.currentVersion = 0;\\n        self.latestVersion = 0;\\n        self.versions[self.currentVersion] = logic;\\n        self.exists = true;\\n    }\\n\\n    /**\\n        @notice It rollbacks a logic to a previous version.\\n        @param self the current logic version instance.\\n        @param previousVersion the previous version to be used.\\n     */\\n    function rollback(LogicVersion storage self, uint256 previousVersion)\\n        internal\\n        returns (\\n            uint256 currentVersion,\\n            address previousLogic,\\n            address newLogic\\n        )\\n    {\\n        requireExists(self);\\n        require(\\n            self.currentVersion != previousVersion,\\n            \\\"CURRENT_VERSION_MUST_BE_DIFF\\\"\\n        );\\n        require(\\n            self.latestVersion >= previousVersion,\\n            \\\"VERSION_MUST_BE_LTE_LATEST\\\"\\n        );\\n        currentVersion = self.currentVersion;\\n        previousLogic = self.versions[self.currentVersion];\\n        newLogic = self.versions[previousVersion];\\n\\n        self.currentVersion = previousVersion;\\n    }\\n\\n    /**\\n        @notice Checks whether the current logic version exists or not.\\n        @dev It throws a require error if the logic version already exists.\\n        @param self the current logic version.\\n     */\\n    function requireNotExists(LogicVersion storage self) internal view {\\n        require(!self.exists, \\\"LOGIC_ALREADY_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice Checks whether the current logic version exists or not.\\n        @dev It throws a require error if the current logic version doesn't exist.\\n        @param self the current logic version.\\n     */\\n    function requireExists(LogicVersion storage self) internal view {\\n        require(self.exists, \\\"LOGIC_NOT_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice It upgrades a logic version.\\n        @dev It throws a require error if:\\n            - The new logic is equal to the current logic.\\n        @param self the current logic version.\\n        @param newLogic the new logic to set in the logic version.\\n        @return oldLogic the old logic address.\\n        @return oldVersion the old version.\\n        @return newVersion the new version.\\n     */\\n    function upgrade(LogicVersion storage self, address newLogic)\\n        internal\\n        returns (\\n            address oldLogic,\\n            uint256 oldVersion,\\n            uint256 newVersion\\n        )\\n    {\\n        requireExists(self);\\n        require(\\n            self.versions[self.currentVersion] != newLogic,\\n            \\\"NEW_LOGIC_REQUIRED\\\"\\n        );\\n        require(newLogic.isContract(), \\\"LOGIC_MUST_BE_CONTRACT\\\");\\n        oldLogic = self.versions[self.currentVersion];\\n        oldVersion = self.currentVersion;\\n        newVersion = self.latestVersion.add(1);\\n\\n        self.currentVersion = newVersion;\\n        self.latestVersion = newVersion;\\n        self.versions[newVersion] = newLogic;\\n    }\\n}\\n\",\"keccak256\":\"0x1d3ce95637a20616ce867dc76775063e12781aac5a00fd51a752b8621c36a167\",\"license\":\"MIT\"},\"contracts/util/NumbersLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Utility library for uint256 numbers\\n *\\n * @author develop@teller.finance\\n */\\nlibrary NumbersLib {\\n    using SafeMath for uint256;\\n\\n    /**\\n        @dev It represents 100% with 2 decimal places.\\n     */\\n    function ONE_HUNDRED_PERCENT() internal pure returns (uint256) {\\n        return 10000;\\n    }\\n\\n    /**\\n        @notice Returns the positive difference value of a number to another number\\n        @param self The number to return the difference value for\\n        @param other The other number to calucualte the difference against\\n        @return uint256 The difference value\\n     */\\n    function diff(uint256 self, uint256 other) internal pure returns (uint256) {\\n        return other > self ? other.sub(self) : self.sub(other);\\n    }\\n\\n    /**\\n        @notice Returns the positive percentage difference of a value to 100%\\n        @param self The number to return the percentage difference for\\n        @return uint256 The percentage difference value\\n     */\\n    function diffOneHundredPercent(uint256 self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return diff(self, ONE_HUNDRED_PERCENT());\\n    }\\n\\n    /**\\n     * @notice Returns a percentage value of a number.\\n     * @param self The number to get a percentage of.\\n     * @param percentage The percentage value to calculate with 2 decimal places (10000 = 100%).\\n     */\\n    function percent(uint256 self, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return self.mul(percentage).div(ONE_HUNDRED_PERCENT());\\n    }\\n\\n    function percent(int256 self, uint256 percentage)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        return (self * int256(percentage)) / int256(ONE_HUNDRED_PERCENT());\\n    }\\n\\n    function abs(int256 self) internal pure returns (uint256) {\\n        return self >= 0 ? uint256(self) : uint256(-1 * self);\\n    }\\n\\n    /**\\n     * @notice Returns a ratio of 2 numbers.\\n     * @param self The number to get a ratio of.\\n     * @param num The number to calculate the ratio for.\\n     * @return Ratio of 2 numbers with 2 decimal places (10000 = 100%).\\n     */\\n    function ratioOf(uint256 self, uint256 num)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return self.mul(ONE_HUNDRED_PERCENT()).div(num);\\n    }\\n}\\n\",\"keccak256\":\"0x310fd069f9f886c2f66bb134c98f2dee97c6c03d22f6468661e6d896a7fee4a4\",\"license\":\"MIT\"},\"contracts/util/NumbersList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./NumbersLib.sol\\\";\\n\\n/**\\n * @dev Utility library of inline functions on NumbersList.Values\\n *\\n * @author develop@teller.finance\\n */\\nlibrary NumbersList {\\n    using SafeMath for uint256;\\n    using NumbersLib for uint256;\\n\\n    // Holds values to calculate the threshold of a list of numbers\\n    struct Values {\\n        uint256 count; // The total number of numbers added\\n        uint256 max; // The maximum number that was added\\n        uint256 min; // The minimum number that was added\\n        uint256 sum; // The total sum of the numbers that were added\\n    }\\n\\n    /**\\n     * @dev Add to the sum while keeping track of min and max values\\n     * @param self The Value this function was called on\\n     * @param newValue Number to increment sum by\\n     */\\n    function addValue(Values memory self, uint256 newValue) internal pure {\\n        if (self.max < newValue) {\\n            self.max = newValue;\\n        }\\n        if (self.min > newValue || self.count == 0) {\\n            self.min = newValue;\\n        }\\n        self.sum = self.sum.add(newValue);\\n        self.count = self.count.add(1);\\n    }\\n\\n    /**\\n     * @param self The Value this function was called on\\n     * @return the number of times the sum has updated\\n     */\\n    function valuesCount(Values memory self) internal pure returns (uint256) {\\n        return self.count;\\n    }\\n\\n    /**\\n     * @dev Checks if the sum has been changed\\n     * @param self The Value this function was called on\\n     * @return boolean\\n     */\\n    function isEmpty(Values memory self) internal pure returns (bool) {\\n        return valuesCount(self) == 0;\\n    }\\n\\n    /**\\n     * @param self The Value this function was called on\\n     * @return the average number that was used to calculate the sum\\n     */\\n    function getAverage(Values memory self) internal pure returns (uint256) {\\n        return isEmpty(self) ? 0 : self.sum.div(valuesCount(self));\\n    }\\n\\n    /**\\n     * @dev Checks if the min and max numbers are within the acceptable tolerance\\n     * @param self The Value this function was called on\\n     * @param tolerancePercentage Acceptable tolerance percentage as a whole number\\n     * The percentage should be entered with 2 decimal places. e.g. 2.5% should be entered as 250.\\n     * @return boolean\\n     */\\n    function isWithinTolerance(Values memory self, uint256 tolerancePercentage)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (isEmpty(self)) {\\n            return false;\\n        }\\n        uint256 average = getAverage(self);\\n        uint256 toleranceAmount = average.percent(tolerancePercentage);\\n\\n        uint256 minTolerance = average.sub(toleranceAmount);\\n        if (self.min < minTolerance) {\\n            return false;\\n        }\\n\\n        uint256 maxTolerance = average.add(toleranceAmount);\\n        if (self.max > maxTolerance) {\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xb724bee2331e49b0b74ad98d05c37c043f39e7abfe72a31d905fb0b548eaff05\",\"license\":\"MIT\"},\"contracts/util/TellerCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./NumbersList.sol\\\";\\n\\n/**\\n * @dev Library of structs common across the Teller protocol\\n *\\n * @author develop@teller.finance\\n */\\nlibrary TellerCommon {\\n    enum LoanStatus { NonExistent, TermsSet, Active, Closed }\\n\\n    /**\\n        @notice Represents a user signature\\n        @param v The recovery identifier represented by the last byte of a ECDSA signature as an int\\n        @param r The random point x-coordinate of the signature respresented by the first 32 bytes of the generated ECDSA signature\\n        @param s The signature proof represented by the second 32 bytes of the generated ECDSA signature\\n     */\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /**\\n        @notice Borrower request object to take out a loan\\n        @param borrower The wallet address of the borrower\\n        @param recipient The address where funds will be sent, only applicable in over collateralized loans\\n        @param consensusAddress The address of the Teller loan consensus contract to which the request should be sent\\n        @param requestNonce The nonce of the borrower wallet address required for authentication\\n        @param amount The amount of tokens requested by the borrower for the loan\\n        @param duration The length of time in seconds that the loan has been requested for\\n        @param requestTime The timestamp at which the loan was requested\\n     */\\n    struct LoanRequest {\\n        address payable borrower;\\n        address recipient;\\n        address consensusAddress;\\n        uint256 requestNonce;\\n        uint256 amount;\\n        uint256 duration;\\n        uint256 requestTime;\\n    }\\n\\n    /**\\n        @notice Borrower response object to take out a loan\\n        @param signer The wallet address of the signer validating the interest request of the lender\\n        @param consensusAddress The address of the Teller loan consensus contract to which the request should be sent\\n        @param responseTime The timestamp at which the response was sent\\n        @param interestRate The signed interest rate generated by the signer's Credit Risk Algorithm (CRA)\\n        @param collateralRatio The ratio of collateral to loan amount that is generated by the signer's Credit Risk Algorithm (CRA)\\n        @param maxLoanAmount The largest amount of tokens that can be taken out in the loan by the borrower\\n        @param signature The signature generated by the signer in the format of the above Signature struct\\n     */\\n    struct LoanResponse {\\n        address signer;\\n        address consensusAddress;\\n        uint256 responseTime;\\n        uint256 interestRate;\\n        uint256 collateralRatio;\\n        uint256 maxLoanAmount;\\n        Signature signature;\\n    }\\n\\n    /**\\n        @notice Represents loan terms based on consensus values\\n        @param interestRate The consensus value for the interest rate based on all the loan responses from the signers\\n        @param collateralRatio The consensus value for the ratio of collateral to loan amount required for the loan, based on all the loan responses from the signers\\n        @param maxLoanAmount The consensus value for the largest amount of tokens that can be taken out in the loan, based on all the loan responses from the signers\\n     */\\n    struct AccruedLoanTerms {\\n        NumbersList.Values interestRate;\\n        NumbersList.Values collateralRatio;\\n        NumbersList.Values maxLoanAmount;\\n    }\\n\\n    /**\\n        @notice Represents the terms of a loan based on the consensus of a LoanRequest\\n        @param borrower The wallet address of the borrower\\n        @param recipient The address where funds will be sent, only applicable in over collateralized loans\\n        @param interestRate The consensus interest rate calculated based on all signer loan responses\\n        @param collateralRatio The consensus ratio of collateral to loan amount calculated based on all signer loan responses\\n        @param maxLoanAmount The consensus largest amount of tokens that can be taken out in the loan by the borrower, calculated based on all signer loan responses\\n        @param duration The consensus length of loan time, calculated based on all signer loan responses\\n     */\\n    struct LoanTerms {\\n        address payable borrower;\\n        address recipient;\\n        uint256 interestRate;\\n        uint256 collateralRatio;\\n        uint256 maxLoanAmount;\\n        uint256 duration;\\n    }\\n\\n    /**\\n        @notice Data per borrow as struct\\n        @param id The id of the loan for internal tracking\\n        @param loanTerms The loan terms returned by the signers\\n        @param termsExpiry The timestamp at which the loan terms expire, after which if the loan is not yet active, cannot be taken out\\n        @param loanStartTime The timestamp at which the loan became active\\n        @param collateral The total amount of collateral deposited by the borrower to secure the loan\\n        @param lastCollateralIn The amount of collateral that was last deposited by the borrower to keep the loan active\\n        @param principalOwed The total amount of the loan taken out by the borrower, reduces on loan repayments\\n        @param interestOwed The total interest owed by the borrower for the loan, reduces on loan repayments\\n        @param borrowedAmount The total amount of the loan size taken out\\n        @param escrow The address of the escrow contract that holds the funds taken out in the loan on behalf of the borrower\\n        @param status The status of the loan currently based on the LoanStatus enum - NonExistent, TermsSet, Active, Closed\\n        @param liquidated Flag marking if the loan has been liquidated or not\\n     */\\n    struct Loan {\\n        uint256 id;\\n        LoanTerms loanTerms;\\n        uint256 termsExpiry;\\n        uint256 loanStartTime;\\n        uint256 collateral;\\n        uint256 lastCollateralIn;\\n        uint256 principalOwed;\\n        uint256 interestOwed;\\n        uint256 borrowedAmount;\\n        address escrow;\\n        LoanStatus status;\\n        bool liquidated;\\n    }\\n\\n    /**\\n        @notice This struct defines the dapp address and data to execute in the callDapp function.\\n        @dev It is executed using a delegatecall in the Escrow contract.\\n        @param exists Flag marking whether the dapp is a Teller registered address\\n        @param unsecured Flag marking if the loan allowed to be used in the dapp is a secured, or unsecured loan\\n     */\\n    struct Dapp {\\n        bool exists;\\n        bool unsecured;\\n    }\\n\\n    /**\\n        @notice This struct defines the dapp address and data to execute in the callDapp function.\\n        @dev It is executed using a delegatecall in the Escrow contract.\\n        @param location The proxy contract address for the dapp that will be used by the Escrow contract delegatecall\\n        @param data The encoded function signature with parameters for the dapp method in bytes that will be sent in the Escrow delegatecall\\n     */\\n    struct DappData {\\n        address location;\\n        bytes data;\\n    }\\n\\n    /**\\n        @notice This struct defines a market in the platform.\\n        @dev It is used by the MarketFactory contract.\\n        @param loans The address for the Teller LoanManager contract that is being used for a market\\n        @param lendingPool The address for the Teller Lending Pool contract that is being used for a market\\n        @param loanTermsConsensus The address for the Teller Loan Terms Consensus contract that is being used for a market\\n        @param exists Flag marking if the market is defined on the platform or not\\n     */\\n    struct Market {\\n        address loans;\\n        address lendingPool;\\n        address loanTermsConsensus;\\n        bool exists;\\n    }\\n\\n    /**\\n        @notice This struct is used to register new logic versions.\\n        @param logic The address for the new contract holding the logic.\\n        @param logicName The name for the logic to be stored as.\\n     */\\n    struct CreateLogicVersionRequest {\\n        address logic;\\n        bytes32 logicName;\\n    }\\n\\n    /**\\n        @notice This struct is used to upgrade logic versions.\\n        @param logic The new logic address to upgrade proxy to.\\n        @param logicName The name for the logic to be stored as.\\n        @param proxy The (optional) DynamicUpgradeable proxy address to attempt to directly upgrade.\\n     */\\n    struct UpgradeLogicVersionRequest {\\n        address logic;\\n        bytes32 logicName;\\n        address proxy;\\n    }\\n}\\n\",\"keccak256\":\"0xa90e2a78f0d767c9cea8ce6b0f0a1a359fcaebb63e7fc6393c7dceb443ccc791\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612640806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806391d1485411610104578063b12ab40f116100a2578063cf932b7c11610071578063cf932b7c14610469578063d53913931461047c578063d547741f14610491578063e985e9c5146104a4576101cf565b8063b12ab40f14610403578063b88d4fde14610423578063c87b56dd14610436578063cbee53a314610449576101cf565b8063983b2d56116100de578063983b2d56146103c2578063a217fddf146103d5578063a224cee7146103dd578063a22cb465146103f0576101cf565b806391d148541461039457806394bf804d146103a757806395d89b41146103ba576101cf565b80632f2ff15d1161017157806342842e0e1161014b57806342842e0e1461033b5780636352211e1461034e5780636a47b8721461036157806370a0823114610381576101cf565b80632f2ff15d146103025780633092afd51461031557806336568abe14610328576101cf565b8063081812fc116101ad578063081812fc1461027e578063095ea7b3146102a957806323b872dd146102be578063248a9ca3146102d1576101cf565b806301ffc9a7146101d4578063039af9eb146101fc57806306fdde0314610269575b600080fd5b6101e76101e23660046120b9565b6104e0565b60405190151581526020015b60405180910390f35b61023e61020a36600461207f565b60cb60205260009081526040902080546002820154600383015460049093015491926001600160a01b039091169160ff1684565b604080519485526001600160a01b0390931660208501529183015260ff1660608201526080016101f3565b6102716104fa565b6040516101f39190612354565b61029161028c36600461207f565b61058c565b6040516001600160a01b0390911681526020016101f3565b6102bc6102b7366004611fe6565b610626565b005b6102bc6102cc366004611ef8565b61073c565b6102f46102df36600461207f565b60009081526097602052604090206001015490565b6040519081526020016101f3565b6102bc610310366004612097565b61076d565b6102bc610323366004611eac565b6107fc565b6102bc610336366004612097565b61084b565b6102bc610349366004611ef8565b6108c5565b61029161035c36600461207f565b6108e0565b6102f461036f36600461207f565b60cc6020526000908152604090205481565b6102f461038f366004611eac565b61095d565b6101e76103a2366004612097565b6109e4565b6102bc6103b5366004612205565b610a0f565b610271610a8e565b6102bc6103d0366004611eac565b610a9d565b6102f4600081565b6102bc6103eb36600461200f565b610ae9565b6102bc6103fe366004611fac565b610b9a565b610416610411366004611eac565b610c6c565b6040516101f39190612310565b6102bc610431366004611f33565b610d3c565b61027161044436600461207f565b610d6e565b61045c61045736600461207f565b610e49565b6040516101f391906122af565b6102bc6104773660046120f1565b610f38565b6102f46000805160206125eb83398151915281565b6102bc61049f366004612097565b61105e565b6101e76104b2366004611ec6565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6001600160e01b03198116635b2cab3160e01b145b919050565b60606065805461050990612510565b80601f016020809104026020016040519081016040528092919081815260200182805461053590612510565b80156105825780601f1061055757610100808354040283529160200191610582565b820191906000526020600020905b81548152906001019060200180831161056557829003601f168201915b5050505050905090565b6000818152606760205260408120546001600160a01b031661060a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b6000610631826108e0565b9050806001600160a01b0316836001600160a01b0316141561069f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610601565b336001600160a01b03821614806106bb57506106bb81336104b2565b61072d5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610601565b61073783836110de565b505050565b610746338261114c565b6107625760405162461bcd60e51b815260040161060190612433565b610737838383611243565b60008281526097602052604090206001015461078a905b336103a2565b6107ee5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526e0818591b5a5b881d1bc819dc985b9d608a1b6064820152608401610601565b6107f88282611258565b5050565b6108146000805160206125eb833981519152336103a2565b6108305760405162461bcd60e51b8152600401610601906123b9565b6108486000805160206125eb8339815191528261105e565b50565b6001600160a01b03811633146108bb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610601565b6107f882826112de565b61073783838360405180602001604052806000815250610d3c565b6000818152606760205260408120546001600160a01b0316806109575760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610601565b92915050565b60006001600160a01b0382166109c85760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610601565b506001600160a01b031660009081526068602052604090205490565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610a276000805160206125eb833981519152336103a2565b610a435760405162461bcd60e51b8152600401610601906123b9565b600082815260ca6020526040812090610a5a825490565b825460010183559050610a6d8382611345565b600081815260cc60205260409020849055610a88838261135f565b50505050565b60606066805461050990612510565b610ab56000805160206125eb833981519152336103a2565b610ad15760405162461bcd60e51b8152600401610601906123b9565b6108486000805160206125eb833981519152826107ee565b610b316040518060400160405280600a81526020016915195b1b195c8813919560b21b815250604051806040016040528060048152602001631513919560e21b8152506113c1565b60005b8181101561073757610b886000805160206125eb833981519152848484818110610b6e57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610b839190611eac565b6107ee565b80610b928161254b565b915050610b34565b6001600160a01b038216331415610bf35760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610601565b336000818152606a602090815260408083206001600160a01b0387168085529252909120805460ff1916841515179055906001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610c60911515815260200190565b60405180910390a35050565b6001600160a01b038116600090815260cd60205260409020606090610c9081611448565b67ffffffffffffffff811115610cb657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610cdf578160200160208202803683370190505b50915060005b8251811015610d3557610cf88282611452565b838281518110610d1857634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610d2d8161254b565b915050610ce5565b5050919050565b610d46338361114c565b610d625760405162461bcd60e51b815260040161060190612433565b610a888484848461145e565b6000818152606760205260409020546060906001600160a01b0316610ded5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610601565b6000610df7611491565b90506000815111610e175760405180602001604052806000815250610e42565b80610e21846114b1565b604051602001610e32929190612243565b6040516020818303038152906040525b9392505050565b606060cb6000838152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b82821015610f2d578382906000526020600020018054610ea090612510565b80601f0160208091040260200160405190810160405280929190818152602001828054610ecc90612510565b8015610f195780601f10610eee57610100808354040283529160200191610f19565b820191906000526020600020905b815481529060010190602001808311610efc57829003601f168201915b505050505081526020019060010190610e81565b505050509050919050565b610f506000805160206125eb833981519152336103a2565b610f6c5760405162461bcd60e51b8152600401610601906123b9565b600060cb6000610f7b60c95490565b8152602081019190915260400160002060028101549091506001600160a01b031615610fe95760405162461bcd60e51b815260206004820152601b60248201527f54656c6c65723a207469657220616c72656164792065786973747300000000006044820152606401610601565b8151815560208083015180516110059260018501920190611ce1565b5060408201516002820180546001600160a01b0319166001600160a01b0390921691909117905560608201516003820155608082015160048201805460ff191660ff90921691909117905560c9805460010190556107f8565b60008281526097602052604090206001015461107990610784565b6108bb5760405162461bcd60e51b815260206004820152603060248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526f2061646d696e20746f207265766f6b6560801b6064820152608401610601565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611113826108e0565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152606760205260408120546001600160a01b03166111c55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610601565b60006111d0836108e0565b9050806001600160a01b0316846001600160a01b0316148061120b5750836001600160a01b03166112008461058c565b6001600160a01b0316145b8061123b57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b949350505050565b61124d828261135f565b61073783838361159b565b61126282826109e4565b6107f85760008281526097602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561129a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6112e882826109e4565b156107f85760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6107f882826040518060200160405280600081525061173b565b600061136a826108e0565b90506001600160a01b0381161561139f576001600160a01b038116600090815260cd6020526040902061139d908361176e565b505b6001600160a01b038316600090815260cd60205260409020610a88908361177a565b600054610100900460ff16806113da575060005460ff16155b6113f65760405162461bcd60e51b8152600401610601906123e5565b600054610100900460ff16158015611418576000805461ffff19166101011790555b611420611786565b611428611786565b61143283836117f1565b8015610737576000805461ff0019169055505050565b6000610957825490565b6000610e428383611886565b611469848484611243565b6114758484848461191a565b610a885760405162461bcd60e51b815260040161060190612367565b60606040518060600160405280602281526020016125c960229139905090565b600081815260cc6020908152604080832054835260cb909152902060010180546060919081906114e2908590611a27565b8154811061150057634e487b7160e01b600052603260045260246000fd5b90600052602060002001805461151590612510565b80601f016020809104026020016040519081016040528092919081815260200182805461154190612510565b801561158e5780601f106115635761010080835404028352916020019161158e565b820191906000526020600020905b81548152906001019060200180831161157157829003601f168201915b5050505050915050919050565b826001600160a01b03166115ae826108e0565b6001600160a01b0316146116165760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610601565b6001600160a01b0382166116785760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610601565b6116836000826110de565b6001600160a01b03831660009081526068602052604081208054600192906116ac9084906124cd565b90915550506001600160a01b03821660009081526068602052604081208054600192906116da9084906124b5565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6117458383611a33565b611752600084848461191a565b6107375760405162461bcd60e51b815260040161060190612367565b6000610e428383611b75565b6000610e428383611c92565b600054610100900460ff168061179f575060005460ff16155b6117bb5760405162461bcd60e51b8152600401610601906123e5565b600054610100900460ff161580156117dd576000805461ffff19166101011790555b8015610848576000805461ff001916905550565b600054610100900460ff168061180a575060005460ff16155b6118265760405162461bcd60e51b8152600401610601906123e5565b600054610100900460ff16158015611848576000805461ffff19166101011790555b825161185b906065906020860190611d3e565b50815161186f906066906020850190611d3e565b508015610737576000805461ff0019169055505050565b815460009082106118e45760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610601565b82600001828154811061190757634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006001600160a01b0384163b15611a1c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061195e903390899088908890600401612272565b602060405180830381600087803b15801561197857600080fd5b505af19250505080156119a8575060408051601f3d908101601f191682019092526119a5918101906120d5565b60015b611a02573d8080156119d6576040519150601f19603f3d011682016040523d82523d6000602084013e6119db565b606091505b5080516119fa5760405162461bcd60e51b815260040161060190612367565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061123b565b506001949350505050565b6000610e428284612566565b6001600160a01b038216611a895760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610601565b6000818152606760205260409020546001600160a01b031615611aee5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610601565b6001600160a01b0382166000908152606860205260408120805460019290611b179084906124b5565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008181526001830160205260408120548015611c88576000611b996001836124cd565b8554909150600090611bad906001906124cd565b90506000866000018281548110611bd457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110611c0557634e487b7160e01b600052603260045260246000fd5b600091825260209091200155611c1c8360016124b5565b60008281526001890160205260409020558654879080611c4c57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610957565b6000915050610957565b6000818152600183016020526040812054611cd957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610957565b506000610957565b828054828255906000526020600020908101928215611d2e579160200282015b82811115611d2e5782518051611d1e918491602090910190611d3e565b5091602001919060010190611d01565b50611d3a929150611dbe565b5090565b828054611d4a90612510565b90600052602060002090601f016020900481019282611d6c5760008555611db2565b82601f10611d8557805160ff1916838001178555611db2565b82800160010185558215611db2579182015b82811115611db2578251825591602001919060010190611d97565b50611d3a929150611ddb565b80821115611d3a576000611dd28282611df0565b50600101611dbe565b5b80821115611d3a5760008155600101611ddc565b508054611dfc90612510565b6000825580601f10611e0e5750610848565b601f0160209004906000526020600020908101906108489190611ddb565b600067ffffffffffffffff831115611e4657611e4661259c565b611e59601f8401601f1916602001612484565b9050828152838383011115611e6d57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146104f557600080fd5b803560ff811681146104f557600080fd5b600060208284031215611ebd578081fd5b610e4282611e84565b60008060408385031215611ed8578081fd5b611ee183611e84565b9150611eef60208401611e84565b90509250929050565b600080600060608486031215611f0c578081fd5b611f1584611e84565b9250611f2360208501611e84565b9150604084013590509250925092565b60008060008060808587031215611f48578081fd5b611f5185611e84565b9350611f5f60208601611e84565b925060408501359150606085013567ffffffffffffffff811115611f81578182fd5b8501601f81018713611f91578182fd5b611fa087823560208401611e2c565b91505092959194509250565b60008060408385031215611fbe578182fd5b611fc783611e84565b915060208301358015158114611fdb578182fd5b809150509250929050565b60008060408385031215611ff8578182fd5b61200183611e84565b946020939093013593505050565b60008060208385031215612021578182fd5b823567ffffffffffffffff80821115612038578384fd5b818501915085601f83011261204b578384fd5b813581811115612059578485fd5b8660208260051b850101111561206d578485fd5b60209290920196919550909350505050565b600060208284031215612090578081fd5b5035919050565b600080604083850312156120a9578081fd5b82359150611eef60208401611e84565b6000602082840312156120ca578081fd5b8135610e42816125b2565b6000602082840312156120e6578081fd5b8151610e42816125b2565b60006020808385031215612103578182fd5b823567ffffffffffffffff8082111561211a578384fd5b9084019060a0828703121561212d578384fd5b61213760a0612484565b82358152838301358281111561214b578586fd5b8301601f8101881361215b578586fd5b80358381111561216d5761216d61259c565b61217b868260051b01612484565b8181528681019450828701885b838110156121c657813585018c603f8201126121a2578a8bfd5b6121b38d8b83013560408401611e2c565b8852509588019590880190600101612188565b505083870152506121db905060408401611e84565b6040820152606083013560608201526121f660808401611e9b565b60808201529695505050505050565b600080604083850312156120a9578182fd5b6000815180845261222f8160208601602086016124e4565b601f01601f19169290920160200192915050565b600083516122558184602088016124e4565b8351908301906122698183602088016124e4565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906122a590830184612217565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561230357603f198886030184526122f1858351612217565b945092850192908501906001016122d5565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156123485783518352928401929184019160010161232c565b50909695505050505050565b600060208252610e426020830184612217565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601290820152712a32b63632b91d103737ba1036b4b73a32b960711b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff811182821017156124ad576124ad61259c565b604052919050565b600082198211156124c8576124c8612586565b500190565b6000828210156124df576124df612586565b500390565b60005b838110156124ff5781810151838201526020016124e7565b83811115610a885750506000910152565b600181811c9082168061252457607f821691505b6020821081141561254557634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561255f5761255f612586565b5060010190565b60008261258157634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461084857600080fdfe68747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a2646970667358221220c6e37c620dcc503bb33f6732448c880a17e70cc36a654416dbe558026593083664736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806391d1485411610104578063b12ab40f116100a2578063cf932b7c11610071578063cf932b7c14610469578063d53913931461047c578063d547741f14610491578063e985e9c5146104a4576101cf565b8063b12ab40f14610403578063b88d4fde14610423578063c87b56dd14610436578063cbee53a314610449576101cf565b8063983b2d56116100de578063983b2d56146103c2578063a217fddf146103d5578063a224cee7146103dd578063a22cb465146103f0576101cf565b806391d148541461039457806394bf804d146103a757806395d89b41146103ba576101cf565b80632f2ff15d1161017157806342842e0e1161014b57806342842e0e1461033b5780636352211e1461034e5780636a47b8721461036157806370a0823114610381576101cf565b80632f2ff15d146103025780633092afd51461031557806336568abe14610328576101cf565b8063081812fc116101ad578063081812fc1461027e578063095ea7b3146102a957806323b872dd146102be578063248a9ca3146102d1576101cf565b806301ffc9a7146101d4578063039af9eb146101fc57806306fdde0314610269575b600080fd5b6101e76101e23660046120b9565b6104e0565b60405190151581526020015b60405180910390f35b61023e61020a36600461207f565b60cb60205260009081526040902080546002820154600383015460049093015491926001600160a01b039091169160ff1684565b604080519485526001600160a01b0390931660208501529183015260ff1660608201526080016101f3565b6102716104fa565b6040516101f39190612354565b61029161028c36600461207f565b61058c565b6040516001600160a01b0390911681526020016101f3565b6102bc6102b7366004611fe6565b610626565b005b6102bc6102cc366004611ef8565b61073c565b6102f46102df36600461207f565b60009081526097602052604090206001015490565b6040519081526020016101f3565b6102bc610310366004612097565b61076d565b6102bc610323366004611eac565b6107fc565b6102bc610336366004612097565b61084b565b6102bc610349366004611ef8565b6108c5565b61029161035c36600461207f565b6108e0565b6102f461036f36600461207f565b60cc6020526000908152604090205481565b6102f461038f366004611eac565b61095d565b6101e76103a2366004612097565b6109e4565b6102bc6103b5366004612205565b610a0f565b610271610a8e565b6102bc6103d0366004611eac565b610a9d565b6102f4600081565b6102bc6103eb36600461200f565b610ae9565b6102bc6103fe366004611fac565b610b9a565b610416610411366004611eac565b610c6c565b6040516101f39190612310565b6102bc610431366004611f33565b610d3c565b61027161044436600461207f565b610d6e565b61045c61045736600461207f565b610e49565b6040516101f391906122af565b6102bc6104773660046120f1565b610f38565b6102f46000805160206125eb83398151915281565b6102bc61049f366004612097565b61105e565b6101e76104b2366004611ec6565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6001600160e01b03198116635b2cab3160e01b145b919050565b60606065805461050990612510565b80601f016020809104026020016040519081016040528092919081815260200182805461053590612510565b80156105825780601f1061055757610100808354040283529160200191610582565b820191906000526020600020905b81548152906001019060200180831161056557829003601f168201915b5050505050905090565b6000818152606760205260408120546001600160a01b031661060a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b6000610631826108e0565b9050806001600160a01b0316836001600160a01b0316141561069f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610601565b336001600160a01b03821614806106bb57506106bb81336104b2565b61072d5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610601565b61073783836110de565b505050565b610746338261114c565b6107625760405162461bcd60e51b815260040161060190612433565b610737838383611243565b60008281526097602052604090206001015461078a905b336103a2565b6107ee5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526e0818591b5a5b881d1bc819dc985b9d608a1b6064820152608401610601565b6107f88282611258565b5050565b6108146000805160206125eb833981519152336103a2565b6108305760405162461bcd60e51b8152600401610601906123b9565b6108486000805160206125eb8339815191528261105e565b50565b6001600160a01b03811633146108bb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610601565b6107f882826112de565b61073783838360405180602001604052806000815250610d3c565b6000818152606760205260408120546001600160a01b0316806109575760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610601565b92915050565b60006001600160a01b0382166109c85760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610601565b506001600160a01b031660009081526068602052604090205490565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610a276000805160206125eb833981519152336103a2565b610a435760405162461bcd60e51b8152600401610601906123b9565b600082815260ca6020526040812090610a5a825490565b825460010183559050610a6d8382611345565b600081815260cc60205260409020849055610a88838261135f565b50505050565b60606066805461050990612510565b610ab56000805160206125eb833981519152336103a2565b610ad15760405162461bcd60e51b8152600401610601906123b9565b6108486000805160206125eb833981519152826107ee565b610b316040518060400160405280600a81526020016915195b1b195c8813919560b21b815250604051806040016040528060048152602001631513919560e21b8152506113c1565b60005b8181101561073757610b886000805160206125eb833981519152848484818110610b6e57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610b839190611eac565b6107ee565b80610b928161254b565b915050610b34565b6001600160a01b038216331415610bf35760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610601565b336000818152606a602090815260408083206001600160a01b0387168085529252909120805460ff1916841515179055906001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610c60911515815260200190565b60405180910390a35050565b6001600160a01b038116600090815260cd60205260409020606090610c9081611448565b67ffffffffffffffff811115610cb657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610cdf578160200160208202803683370190505b50915060005b8251811015610d3557610cf88282611452565b838281518110610d1857634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610d2d8161254b565b915050610ce5565b5050919050565b610d46338361114c565b610d625760405162461bcd60e51b815260040161060190612433565b610a888484848461145e565b6000818152606760205260409020546060906001600160a01b0316610ded5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610601565b6000610df7611491565b90506000815111610e175760405180602001604052806000815250610e42565b80610e21846114b1565b604051602001610e32929190612243565b6040516020818303038152906040525b9392505050565b606060cb6000838152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b82821015610f2d578382906000526020600020018054610ea090612510565b80601f0160208091040260200160405190810160405280929190818152602001828054610ecc90612510565b8015610f195780601f10610eee57610100808354040283529160200191610f19565b820191906000526020600020905b815481529060010190602001808311610efc57829003601f168201915b505050505081526020019060010190610e81565b505050509050919050565b610f506000805160206125eb833981519152336103a2565b610f6c5760405162461bcd60e51b8152600401610601906123b9565b600060cb6000610f7b60c95490565b8152602081019190915260400160002060028101549091506001600160a01b031615610fe95760405162461bcd60e51b815260206004820152601b60248201527f54656c6c65723a207469657220616c72656164792065786973747300000000006044820152606401610601565b8151815560208083015180516110059260018501920190611ce1565b5060408201516002820180546001600160a01b0319166001600160a01b0390921691909117905560608201516003820155608082015160048201805460ff191660ff90921691909117905560c9805460010190556107f8565b60008281526097602052604090206001015461107990610784565b6108bb5760405162461bcd60e51b815260206004820152603060248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526f2061646d696e20746f207265766f6b6560801b6064820152608401610601565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611113826108e0565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152606760205260408120546001600160a01b03166111c55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610601565b60006111d0836108e0565b9050806001600160a01b0316846001600160a01b0316148061120b5750836001600160a01b03166112008461058c565b6001600160a01b0316145b8061123b57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b949350505050565b61124d828261135f565b61073783838361159b565b61126282826109e4565b6107f85760008281526097602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561129a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6112e882826109e4565b156107f85760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6107f882826040518060200160405280600081525061173b565b600061136a826108e0565b90506001600160a01b0381161561139f576001600160a01b038116600090815260cd6020526040902061139d908361176e565b505b6001600160a01b038316600090815260cd60205260409020610a88908361177a565b600054610100900460ff16806113da575060005460ff16155b6113f65760405162461bcd60e51b8152600401610601906123e5565b600054610100900460ff16158015611418576000805461ffff19166101011790555b611420611786565b611428611786565b61143283836117f1565b8015610737576000805461ff0019169055505050565b6000610957825490565b6000610e428383611886565b611469848484611243565b6114758484848461191a565b610a885760405162461bcd60e51b815260040161060190612367565b60606040518060600160405280602281526020016125c960229139905090565b600081815260cc6020908152604080832054835260cb909152902060010180546060919081906114e2908590611a27565b8154811061150057634e487b7160e01b600052603260045260246000fd5b90600052602060002001805461151590612510565b80601f016020809104026020016040519081016040528092919081815260200182805461154190612510565b801561158e5780601f106115635761010080835404028352916020019161158e565b820191906000526020600020905b81548152906001019060200180831161157157829003601f168201915b5050505050915050919050565b826001600160a01b03166115ae826108e0565b6001600160a01b0316146116165760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610601565b6001600160a01b0382166116785760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610601565b6116836000826110de565b6001600160a01b03831660009081526068602052604081208054600192906116ac9084906124cd565b90915550506001600160a01b03821660009081526068602052604081208054600192906116da9084906124b5565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6117458383611a33565b611752600084848461191a565b6107375760405162461bcd60e51b815260040161060190612367565b6000610e428383611b75565b6000610e428383611c92565b600054610100900460ff168061179f575060005460ff16155b6117bb5760405162461bcd60e51b8152600401610601906123e5565b600054610100900460ff161580156117dd576000805461ffff19166101011790555b8015610848576000805461ff001916905550565b600054610100900460ff168061180a575060005460ff16155b6118265760405162461bcd60e51b8152600401610601906123e5565b600054610100900460ff16158015611848576000805461ffff19166101011790555b825161185b906065906020860190611d3e565b50815161186f906066906020850190611d3e565b508015610737576000805461ff0019169055505050565b815460009082106118e45760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610601565b82600001828154811061190757634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006001600160a01b0384163b15611a1c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061195e903390899088908890600401612272565b602060405180830381600087803b15801561197857600080fd5b505af19250505080156119a8575060408051601f3d908101601f191682019092526119a5918101906120d5565b60015b611a02573d8080156119d6576040519150601f19603f3d011682016040523d82523d6000602084013e6119db565b606091505b5080516119fa5760405162461bcd60e51b815260040161060190612367565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061123b565b506001949350505050565b6000610e428284612566565b6001600160a01b038216611a895760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610601565b6000818152606760205260409020546001600160a01b031615611aee5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610601565b6001600160a01b0382166000908152606860205260408120805460019290611b179084906124b5565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008181526001830160205260408120548015611c88576000611b996001836124cd565b8554909150600090611bad906001906124cd565b90506000866000018281548110611bd457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110611c0557634e487b7160e01b600052603260045260246000fd5b600091825260209091200155611c1c8360016124b5565b60008281526001890160205260409020558654879080611c4c57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610957565b6000915050610957565b6000818152600183016020526040812054611cd957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610957565b506000610957565b828054828255906000526020600020908101928215611d2e579160200282015b82811115611d2e5782518051611d1e918491602090910190611d3e565b5091602001919060010190611d01565b50611d3a929150611dbe565b5090565b828054611d4a90612510565b90600052602060002090601f016020900481019282611d6c5760008555611db2565b82601f10611d8557805160ff1916838001178555611db2565b82800160010185558215611db2579182015b82811115611db2578251825591602001919060010190611d97565b50611d3a929150611ddb565b80821115611d3a576000611dd28282611df0565b50600101611dbe565b5b80821115611d3a5760008155600101611ddc565b508054611dfc90612510565b6000825580601f10611e0e5750610848565b601f0160209004906000526020600020908101906108489190611ddb565b600067ffffffffffffffff831115611e4657611e4661259c565b611e59601f8401601f1916602001612484565b9050828152838383011115611e6d57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146104f557600080fd5b803560ff811681146104f557600080fd5b600060208284031215611ebd578081fd5b610e4282611e84565b60008060408385031215611ed8578081fd5b611ee183611e84565b9150611eef60208401611e84565b90509250929050565b600080600060608486031215611f0c578081fd5b611f1584611e84565b9250611f2360208501611e84565b9150604084013590509250925092565b60008060008060808587031215611f48578081fd5b611f5185611e84565b9350611f5f60208601611e84565b925060408501359150606085013567ffffffffffffffff811115611f81578182fd5b8501601f81018713611f91578182fd5b611fa087823560208401611e2c565b91505092959194509250565b60008060408385031215611fbe578182fd5b611fc783611e84565b915060208301358015158114611fdb578182fd5b809150509250929050565b60008060408385031215611ff8578182fd5b61200183611e84565b946020939093013593505050565b60008060208385031215612021578182fd5b823567ffffffffffffffff80821115612038578384fd5b818501915085601f83011261204b578384fd5b813581811115612059578485fd5b8660208260051b850101111561206d578485fd5b60209290920196919550909350505050565b600060208284031215612090578081fd5b5035919050565b600080604083850312156120a9578081fd5b82359150611eef60208401611e84565b6000602082840312156120ca578081fd5b8135610e42816125b2565b6000602082840312156120e6578081fd5b8151610e42816125b2565b60006020808385031215612103578182fd5b823567ffffffffffffffff8082111561211a578384fd5b9084019060a0828703121561212d578384fd5b61213760a0612484565b82358152838301358281111561214b578586fd5b8301601f8101881361215b578586fd5b80358381111561216d5761216d61259c565b61217b868260051b01612484565b8181528681019450828701885b838110156121c657813585018c603f8201126121a2578a8bfd5b6121b38d8b83013560408401611e2c565b8852509588019590880190600101612188565b505083870152506121db905060408401611e84565b6040820152606083013560608201526121f660808401611e9b565b60808201529695505050505050565b600080604083850312156120a9578182fd5b6000815180845261222f8160208601602086016124e4565b601f01601f19169290920160200192915050565b600083516122558184602088016124e4565b8351908301906122698183602088016124e4565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906122a590830184612217565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561230357603f198886030184526122f1858351612217565b945092850192908501906001016122d5565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156123485783518352928401929184019160010161232c565b50909695505050505050565b600060208252610e426020830184612217565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601290820152712a32b63632b91d103737ba1036b4b73a32b960711b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff811182821017156124ad576124ad61259c565b604052919050565b600082198211156124c8576124c8612586565b500190565b6000828210156124df576124df612586565b500390565b60005b838110156124ff5781810151838201526020016124e7565b83811115610a885750506000910152565b600181811c9082168061252457607f821691505b6020821081141561254557634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561255f5761255f612586565b5060010190565b60008261258157634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461084857600080fdfe68747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a2646970667358221220c6e37c620dcc503bb33f6732448c880a17e70cc36a654416dbe558026593083664736f6c63430008030033",
  "devdoc": {
    "author": "develop@teller.finance",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTierHashes(uint256)": {
        "details": "It uses a EnumerableSet to store values and loops over each element to add to the array.Can be costly if calling within a contract for address with many tokens."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownedTokens(address)": {
        "details": "It uses a EnumerableSet to store values and loops over each element to add to the array.Can be costly if calling within a contract for address with many tokens."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTierHashes(uint256)": {
        "notice": "It returns an array of token IDs owned by an address."
      },
      "ownedTokens(address)": {
        "notice": "It returns an array of token IDs owned by an address."
      },
      "tokenURI(uint256)": {
        "notice": "The token URI is based on the token ID."
      }
    },
    "notice": "This contract is used by borrowers to call Dapp functions (using delegate calls).This contract should only be constructed using it's upgradeable Proxy contract.In order to call a Dapp function, the Dapp must be added in the DappRegistry instance.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 545,
        "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 548,
        "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2522,
        "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2771,
        "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1221,
        "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1223,
        "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1227,
        "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1231,
        "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1235,
        "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1241,
        "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2041,
        "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 273,
        "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)268_storage)"
      },
      {
        "astId": 537,
        "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14668,
        "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
        "label": "tierCounter",
        "offset": 0,
        "slot": "201",
        "type": "t_struct(Counter)4004_storage"
      },
      {
        "astId": 14673,
        "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
        "label": "tierTokenCounter",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_struct(Counter)4004_storage)"
      },
      {
        "astId": 14678,
        "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
        "label": "tiers",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_struct(Tier)19167_storage)"
      },
      {
        "astId": 14682,
        "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
        "label": "tokenTierMap",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 14687,
        "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
        "label": "ownerTokenIDs",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_struct(UintSet)4921_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(UintSet)4921_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)4921_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)268_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)268_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Counter)4004_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Counters.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)4004_storage"
      },
      "t_mapping(t_uint256,t_struct(Tier)19167_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITellerNFT.Tier)",
        "numberOfBytes": "32",
        "value": "t_struct(Tier)19167_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)4004_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4003,
            "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)268_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 265,
            "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 267,
            "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4517_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4512,
            "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4516,
            "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Tier)19167_storage": {
        "encoding": "inplace",
        "label": "struct ITellerNFT.Tier",
        "members": [
          {
            "astId": 19157,
            "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
            "label": "baseLoanSize",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19160,
            "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
            "label": "hashes",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 19162,
            "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
            "label": "contributionAsset",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 19164,
            "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
            "label": "contributionSize",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 19166,
            "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
            "label": "contributionMultiplier",
            "offset": 0,
            "slot": "4",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UintSet)4921_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 4920,
            "contract": "contracts/base/nft/TellerNFT.sol:TellerNFT",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4517_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}

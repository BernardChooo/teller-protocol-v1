{
  "address": "0xBF899A31899DD789bDf1cf259D07d6B58e9CA603",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x109f8a361fe9e09a1566c1a10593ae8aec1bb9d32f29bf54ea65a6b568e0f1c4",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0xBF899A31899DD789bDf1cf259D07d6B58e9CA603",
    "transactionIndex": 2,
    "gasUsed": "565751",
    "logsBloom": "0x
    "blockHash": "0xa1cc42a2fe8e5f7a1dfd2f9cb19f93ea3a7df1576395565db332cdc297ad66ec",
    "transactionHash": "0x109f8a361fe9e09a1566c1a10593ae8aec1bb9d32f29bf54ea65a6b568e0f1c4",
    "logs": [],
    "blockNumber": 8363117,
    "cumulativeGasUsed": "691509",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5c6a9058c46611581868a70d5eba78f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"diamonds/contexts/ERC721/entry/transfer.sol\":\"ent_transfer_ERC721_v1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary ERC721EventsLib {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x1ae796554e3f406d85e3e1b6e7c3a1b7ef495ee13df4af9c42b6138638627c85\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/entry/transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"../storage/ERC721.sol\\\";\\nimport { int_transfer_ERC721_v1 } from \\\"../internal/transfer.sol\\\";\\n\\ncontract ent_transfer_ERC721_v1 is sto_ERC721, int_transfer_ERC721_v1 {\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external virtual {\\n        require(\\n            _isApprovedOrOwner(msg.sender, tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external virtual {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata _data\\n    ) external virtual {\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n}\\n\",\"keccak256\":\"0xf6c176a6c6912a70fb5cd04a487befbf9c9361cb921cfa4bf66cde66c4cbbe6e\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/internal/approve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"../storage/ERC721.sol\\\";\\nimport { int_exists_ERC721_v1 } from \\\"./exists.sol\\\";\\n\\n// Utils\\nimport { ERC721EventsLib } from \\\"../data.sol\\\";\\n\\nabstract contract int_approve_ERC721_v1 is sto_ERC721, int_exists_ERC721_v1 {\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        erc721Store().tokenApprovals[tokenId] = to;\\n        emit ERC721EventsLib.Approval(\\n            erc721Store().owners[tokenId],\\n            to,\\n            tokenId\\n        );\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address operator, bool approved)\\n        internal\\n        virtual\\n    {\\n        erc721Store().operatorApprovals[msg.sender][operator] = approved;\\n        emit ERC721EventsLib.ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = erc721Store().owners[tokenId];\\n        return (spender == owner ||\\n            erc721Store().tokenApprovals[tokenId] == spender ||\\n            erc721Store().operatorApprovals[owner][spender]);\\n    }\\n\\n    /**\\n     * @dev Returns whether `operator` is allowed to manage all of `owner` tokens.\\n     */\\n    function _isApprovedForAll(address owner, address operator)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return erc721Store().operatorApprovals[owner][operator];\\n    }\\n}\\n\",\"keccak256\":\"0xf01b4b5b9ff68c0ed739f2d802e38b10fd13eab1792accb6cf92410c7c357379\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/internal/before-token-transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract int_beforeTokenTransfer_ERC721_v1 {\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x2a73815dd8cc4529f5c34b3ce7a8a5bc8e702621d0ade832734b38e18fdd833f\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/internal/check-received.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Interfaces\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract int_checkOnReceived_ERC721_v1 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    msg.sender,\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x95e25cf008d625c41cd94d0aa3000653671126f0cf0176f6ab9370ebc4fb1192\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/internal/exists.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"../storage/ERC721.sol\\\";\\n\\nabstract contract int_exists_ERC721_v1 is sto_ERC721 {\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return erc721Store().owners[tokenId] != address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x5290c03ebf2f1acdc8416f3bdcc640537d636020a5960e11375f6ace8051653d\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/internal/transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"../storage/ERC721.sol\\\";\\nimport { int_beforeTokenTransfer_ERC721_v1 } from \\\"./before-token-transfer.sol\\\";\\nimport { int_checkOnReceived_ERC721_v1 } from \\\"./check-received.sol\\\";\\nimport { int_approve_ERC721_v1 } from \\\"./approve.sol\\\";\\n\\n// Utils\\nimport { ERC721EventsLib } from \\\"../data.sol\\\";\\n\\nabstract contract int_transfer_ERC721_v1 is\\n    sto_ERC721,\\n    int_beforeTokenTransfer_ERC721_v1,\\n    int_checkOnReceived_ERC721_v1,\\n    int_approve_ERC721_v1\\n{\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            erc721Store().owners[tokenId] == from,\\n            \\\"ERC721: transfer of token that is not own\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        erc721Store().balances[from] -= 1;\\n        erc721Store().balances[to] += 1;\\n        erc721Store().owners[tokenId] = to;\\n\\n        emit ERC721EventsLib.Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        require(\\n            _isApprovedOrOwner(msg.sender, tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2008e78fdf635bd4f1a9977a23b056bd589ae3eceebec74062593c354c19654f\",\"license\":\"MIT\"},\"diamonds/contexts/ERC721/storage/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract sto_ERC721 {\\n    struct ERC721Storage {\\n        // Token name\\n        string name;\\n        // Token symbol\\n        string symbol;\\n        // Mapping from token ID to owner address\\n        mapping(uint256 => address) owners;\\n        // Mapping owner address to token count\\n        mapping(address => uint256) balances;\\n        // Mapping from token ID to approved address\\n        mapping(uint256 => address) tokenApprovals;\\n        // Mapping from owner to operator approvals\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    function erc721Store() internal pure returns (ERC721Storage storage s) {\\n        bytes32 position = keccak256(\\\"teller_protocol.ERC721_token\\\");\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa7e97bf0b2a7cb6a50dbf0ec070901b154b8e4c745ebcec9e2b398852992a0c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610945806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806323b872dd1461004657806342842e0e1461005b578063b88d4fde1461006e575b600080fd5b610059610054366004610691565b610081565b005b610059610069366004610691565b6100c0565b61005961007c3660046106cc565b6100db565b61008b3382610124565b6100b05760405162461bcd60e51b81526004016100a790610859565b60405180910390fd5b6100bb838383610256565b505050565b6100bb8383836040518060200160405280600081525061044e565b61011d85858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061044e92505050565b5050505050565b600061012f826104ad565b6101905760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016100a7565b60008281526000805160206108f083398151915260205260409020546001600160a01b039081169084168114806101ff575060008381527f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d9a160205260409020546001600160a01b038581169116145b8061024e57506001600160a01b0381811660009081527f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d9a2602090815260408083209388168352929052205460ff165b949350505050565b60008181526000805160206108f083398151915260205260409020546001600160a01b038481169116146102de5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016100a7565b6001600160a01b0382166103405760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016100a7565b61034b6000826104da565b6001600160a01b03831660009081527f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d9a0602052604081208054600192906103939084906108c2565b90915550506001600160a01b03821660009081527f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d9a0602052604081208054600192906103e09084906108aa565b909155505060008181526000805160206108f0833981519152602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6104583383610124565b6104745760405162461bcd60e51b81526004016100a790610859565b61047f848484610256565b61048b8484848461056d565b6104a75760405162461bcd60e51b81526004016100a790610807565b50505050565b60008181526000805160206108f083398151915260205260409020546001600160a01b031615155b919050565b60008181527f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d9a16020908152604080832080546001600160a01b0319166001600160a01b038781169182179092556000805160206108f0833981519152909352818420549151859492909116917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a45050565b60006001600160a01b0384163b1561066f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906105b1903390899088908890600401610791565b602060405180830381600087803b1580156105cb57600080fd5b505af19250505080156105fb575060408051601f3d908101601f191682019092526105f891810190610762565b60015b610655573d808015610629576040519150601f19603f3d011682016040523d82523d6000602084013e61062e565b606091505b50805161064d5760405162461bcd60e51b81526004016100a790610807565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061024e565b506001949350505050565b80356001600160a01b03811681146104d557600080fd5b6000806000606084860312156106a5578283fd5b6106ae8461067a565b92506106bc6020850161067a565b9150604084013590509250925092565b6000806000806000608086880312156106e3578081fd5b6106ec8661067a565b94506106fa6020870161067a565b935060408601359250606086013567ffffffffffffffff8082111561071d578283fd5b818801915088601f830112610730578283fd5b81358181111561073e578384fd5b89602082850101111561074f578384fd5b9699959850939650602001949392505050565b600060208284031215610773578081fd5b81516001600160e01b03198116811461078a578182fd5b9392505050565b600060018060a01b0380871683526020818716818501528560408501526080606085015284519150816080850152825b828110156107dd5785810182015185820160a0015281016107c1565b828111156107ee578360a084870101525b5050601f01601f19169190910160a00195945050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156108bd576108bd6108d9565b500190565b6000828210156108d4576108d46108d9565b500390565b634e487b7160e01b600052601160045260246000fdfe1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d99fa26469706673582212208954f34888439c1f1c5ec44f2e7211c1981377511234f29603ae4054ee5fdc8864736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806323b872dd1461004657806342842e0e1461005b578063b88d4fde1461006e575b600080fd5b610059610054366004610691565b610081565b005b610059610069366004610691565b6100c0565b61005961007c3660046106cc565b6100db565b61008b3382610124565b6100b05760405162461bcd60e51b81526004016100a790610859565b60405180910390fd5b6100bb838383610256565b505050565b6100bb8383836040518060200160405280600081525061044e565b61011d85858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061044e92505050565b5050505050565b600061012f826104ad565b6101905760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016100a7565b60008281526000805160206108f083398151915260205260409020546001600160a01b039081169084168114806101ff575060008381527f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d9a160205260409020546001600160a01b038581169116145b8061024e57506001600160a01b0381811660009081527f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d9a2602090815260408083209388168352929052205460ff165b949350505050565b60008181526000805160206108f083398151915260205260409020546001600160a01b038481169116146102de5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016100a7565b6001600160a01b0382166103405760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016100a7565b61034b6000826104da565b6001600160a01b03831660009081527f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d9a0602052604081208054600192906103939084906108c2565b90915550506001600160a01b03821660009081527f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d9a0602052604081208054600192906103e09084906108aa565b909155505060008181526000805160206108f0833981519152602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6104583383610124565b6104745760405162461bcd60e51b81526004016100a790610859565b61047f848484610256565b61048b8484848461056d565b6104a75760405162461bcd60e51b81526004016100a790610807565b50505050565b60008181526000805160206108f083398151915260205260409020546001600160a01b031615155b919050565b60008181527f1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d9a16020908152604080832080546001600160a01b0319166001600160a01b038781169182179092556000805160206108f0833981519152909352818420549151859492909116917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a45050565b60006001600160a01b0384163b1561066f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906105b1903390899088908890600401610791565b602060405180830381600087803b1580156105cb57600080fd5b505af19250505080156105fb575060408051601f3d908101601f191682019092526105f891810190610762565b60015b610655573d808015610629576040519150601f19603f3d011682016040523d82523d6000602084013e61062e565b606091505b50805161064d5760405162461bcd60e51b81526004016100a790610807565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061024e565b506001949350505050565b80356001600160a01b03811681146104d557600080fd5b6000806000606084860312156106a5578283fd5b6106ae8461067a565b92506106bc6020850161067a565b9150604084013590509250925092565b6000806000806000608086880312156106e3578081fd5b6106ec8661067a565b94506106fa6020870161067a565b935060408601359250606086013567ffffffffffffffff8082111561071d578283fd5b818801915088601f830112610730578283fd5b81358181111561073e578384fd5b89602082850101111561074f578384fd5b9699959850939650602001949392505050565b600060208284031215610773578081fd5b81516001600160e01b03198116811461078a578182fd5b9392505050565b600060018060a01b0380871683526020818716818501528560408501526080606085015284519150816080850152825b828110156107dd5785810182015185820160a0015281016107c1565b828111156107ee578360a084870101525b5050601f01601f19169190910160a00195945050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156108bd576108bd6108d9565b500190565b6000828210156108d4576108d46108d9565b500390565b634e487b7160e01b600052601160045260246000fdfe1e91dbccf5488299bd4adcb044f4c3df902739c02f1f78276dd4194ac6a8d99fa26469706673582212208954f34888439c1f1c5ec44f2e7211c1981377511234f29603ae4054ee5fdc8864736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}

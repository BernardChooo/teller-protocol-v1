{
  "address": "0x8cB375F206462518597860c2826869D8bc11985E",
  "abi": [],
  "transactionHash": "0xe5f1d9ea498c130037cebeee22b47094dd52d7d768697078dbd5997ba042d162",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0x8cB375F206462518597860c2826869D8bc11985E",
    "transactionIndex": 19,
    "gasUsed": "67066",
    "logsBloom": "0x
    "blockHash": "0xe73ac6cd62df0fbbba99de03036bca937cb539e236852057193567939efe4360",
    "transactionHash": "0xe5f1d9ea498c130037cebeee22b47094dd52d7d768697078dbd5997ba042d162",
    "logs": [],
    "blockNumber": 8363113,
    "cumulativeGasUsed": "880678",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5c6a9058c46611581868a70d5eba78f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"diamonds/contexts/ERC721/storage/ERC721.sol\":\"sto_ERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"diamonds/contexts/ERC721/storage/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract sto_ERC721 {\\n    struct ERC721Storage {\\n        // Token name\\n        string name;\\n        // Token symbol\\n        string symbol;\\n        // Mapping from token ID to owner address\\n        mapping(uint256 => address) owners;\\n        // Mapping owner address to token count\\n        mapping(address => uint256) balances;\\n        // Mapping from token ID to approved address\\n        mapping(uint256 => address) tokenApprovals;\\n        // Mapping from owner to operator approvals\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    function erc721Store() internal pure returns (ERC721Storage storage s) {\\n        bytes32 position = keccak256(\\\"teller_protocol.ERC721_token\\\");\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa7e97bf0b2a7cb6a50dbf0ec070901b154b8e4c745ebcec9e2b398852992a0c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220ffa15d9df711bdda590da4c792246e36e8d3290f5510ff99157da60f6307791864736f6c63430008030033",
  "deployedBytecode": "0x6080604052600080fdfea2646970667358221220ffa15d9df711bdda590da4c792246e36e8d3290f5510ff99157da60f6307791864736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}

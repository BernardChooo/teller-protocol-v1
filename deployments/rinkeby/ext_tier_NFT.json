{
  "address": "0x45692b17E0A21c255cce364918A41F453ae73A96",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierIndex",
          "type": "uint256"
        }
      ],
      "name": "getTier",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseLoanSize",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "hashes",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "contributionAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "contributionSize",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "contributionMultiplier",
              "type": "uint8"
            }
          ],
          "internalType": "struct Tier",
          "name": "tier_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierIndex",
          "type": "uint256"
        }
      ],
      "name": "getTierHashes",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "hashes_",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseLoanSize",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "hashes",
              "type": "string[]"
            },
            {
              "internalType": "address",
              "name": "contributionAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "contributionSize",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "contributionMultiplier",
              "type": "uint8"
            }
          ],
          "internalType": "struct Tier",
          "name": "tier_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1416fb636704689afe7234aff44deeae5efb703f2b7bb314614bd46ae8ee12e0",
  "receipt": {
    "to": null,
    "from": "0xAFe87013dc96edE1E116a288D80FcaA0eFFE5fe5",
    "contractAddress": "0x45692b17E0A21c255cce364918A41F453ae73A96",
    "transactionIndex": 0,
    "gasUsed": "438793",
    "logsBloom": "0x
    "blockHash": "0x6f27a56f168b22622f4483a445ad52acb43654203949f009409f710388f0f6e2",
    "transactionHash": "0x1416fb636704689afe7234aff44deeae5efb703f2b7bb314614bd46ae8ee12e0",
    "logs": [],
    "blockNumber": 8362838,
    "cumulativeGasUsed": "438793",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7dfea193bf8d74dddd4fadb38960c81e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierIndex\",\"type\":\"uint256\"}],\"name\":\"getTier\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseLoanSize\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"hashes\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"contributionAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contributionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"contributionMultiplier\",\"type\":\"uint8\"}],\"internalType\":\"struct Tier\",\"name\":\"tier_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierIndex\",\"type\":\"uint256\"}],\"name\":\"getTierHashes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"hashes_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseLoanSize\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"hashes\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"contributionAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contributionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"contributionMultiplier\",\"type\":\"uint8\"}],\"internalType\":\"struct Tier\",\"name\":\"tier_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getTierHashes(uint256)\":{\"details\":\"It uses a EnumerableSet to store values and loops over each element to add to the array.Can be costly if calling within a contract for address with many tokens.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTier(uint256)\":{\"notice\":\"It returns information about a Tier for an index.\"},\"getTierHashes(uint256)\":{\"notice\":\"It returns an array of token IDs owned by an address.\"},\"getTokenTier(uint256)\":{\"notice\":\"It returns information about a Tier for a token ID.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"diamonds/domains/nft/external/tier.sol\":\"ext_tier_NFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"diamonds/domains/nft/data/tier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct Tier {\\n    uint256 baseLoanSize;\\n    string[] hashes;\\n    address contributionAsset;\\n    uint256 contributionSize;\\n    uint8 contributionMultiplier;\\n}\\n\",\"keccak256\":\"0x20ae7b004b8ab4b7b31b62265c4cee1e8851223c333c2e603d8d3f90a43c1f70\",\"license\":\"MIT\"},\"diamonds/domains/nft/external/tier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"../storage/tier.sol\\\";\\n\\ncontract ext_tier_NFT_v1 is sto_Tier {\\n    /**\\n     * @notice It returns information about a Tier for an index.\\n     */\\n    function getTier(uint256 tierIndex)\\n        external\\n        view\\n        returns (Tier memory tier_)\\n    {\\n        tier_ = tierStore().tiers[tierIndex];\\n    }\\n\\n    /**\\n     * @notice It returns information about a Tier for a token ID.\\n     */\\n    function getTokenTier(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256 index_, Tier memory tier_)\\n    {\\n        index_ = tierStore().tokenTierMap[tokenId];\\n        tier_ = tierStore().tiers[index_];\\n    }\\n\\n    /**\\n     * @notice It returns an array of token IDs owned by an address.\\n     * @dev It uses a EnumerableSet to store values and loops over each element to add to the array.\\n     * @dev Can be costly if calling within a contract for address with many tokens.\\n     */\\n    function getTierHashes(uint256 tierIndex)\\n        external\\n        view\\n        returns (string[] memory hashes_)\\n    {\\n        hashes_ = tierStore().tiers[tierIndex].hashes;\\n    }\\n}\\n\\ncontract ext_tier_NFT is ext_tier_NFT_v1 {}\\n\",\"keccak256\":\"0xcf43ddb16baf80295398d137a58ca5b310cdc6dab1a8c687ae27108ee8842feb\",\"license\":\"MIT\"},\"diamonds/domains/nft/storage/tier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport { Tier } from \\\"../data/tier.sol\\\";\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nabstract contract sto_Tier {\\n    struct TierStorage {\\n        // It holds the total number of tiers.\\n        Counters.Counter tierCounter;\\n        // It holds the total number of tokens minted.\\n        Counters.Counter tokenCounter;\\n        // It holds the information about a tier.\\n        mapping(uint256 => Tier) tiers;\\n        // It holds which tier a token ID is in.\\n        mapping(uint256 => uint256) tokenTierMap;\\n    }\\n\\n    function tierStore() internal pure returns (TierStorage storage s) {\\n        bytes32 POSITION = keccak256(\\\"teller_nft.tier\\\");\\n\\n        assembly {\\n            s.slot := POSITION\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7a07327e0debd277688204fcfc16c3abf9608b5d538fcaa6095e684f6acc8a71\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506106f9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634f062c5a14610046578063c26b265f1461006f578063cbee53a314610090575b600080fd5b6100596100543660046104be565b6100b0565b604051610066919061064d565b60405180910390f35b61008261007d3660046104be565b6101fe565b604051610066929190610667565b6100a361009e3660046104be565b61037c565b60405161006691906105b5565b6100b8610483565b60008281527f0a84207e1143ff19b71979feb4ec3b9e9ab20a9f584206f464503fa07b113fc360209081526040808320815160a081018352815481526001820180548451818702810187019095528085529195929486810194939192919084015b828210156101c557838290600052602060002001805461013890610688565b80601f016020809104026020016040519081016040528092919081815260200182805461016490610688565b80156101b15780601f10610186576101008083540402835291602001916101b1565b820191906000526020600020905b81548152906001019060200180831161019457829003601f168201915b505050505081526020019060010190610119565b5050509082525060028201546001600160a01b031660208201526003820154604082015260049091015460ff1660609091015292915050565b6000610208610483565b60008381527f0a84207e1143ff19b71979feb4ec3b9e9ab20a9f584206f464503fa07b113fc460209081526040808320548084527f0a84207e1143ff19b71979feb4ec3b9e9ab20a9f584206f464503fa07b113fc38352818420825160a0810184528154815260018201805485518188028101880190965280865293985090959194868101949391929084015b828210156103415783829060005260206000200180546102b490610688565b80601f01602080910402602001604051908101604052809291908181526020018280546102e090610688565b801561032d5780601f106103025761010080835404028352916020019161032d565b820191906000526020600020905b81548152906001019060200180831161031057829003601f168201915b505050505081526020019060010190610295565b5050509082525060028201546001600160a01b031660208201526003820154604082015260049091015460ff16606090910152919391925050565b60008181527f0a84207e1143ff19b71979feb4ec3b9e9ab20a9f584206f464503fa07b113fc360209081526040808320600101805482518185028101850190935280835260609492939192909184015b828210156104785783829060005260206000200180546103eb90610688565b80601f016020809104026020016040519081016040528092919081815260200182805461041790610688565b80156104645780601f1061043957610100808354040283529160200191610464565b820191906000526020600020905b81548152906001019060200180831161044757829003601f168201915b5050505050815260200190600101906103cc565b505050509050919050565b6040518060a00160405280600081526020016060815260200160006001600160a01b0316815260200160008152602001600060ff1681525090565b6000602082840312156104cf578081fd5b5035919050565b600060a083018251845260208084015160a08287015282815180855260c08801915060c08160051b89010194508383019250855b8181101561056f5788860360bf1901835283518051808852885b8181101561053f578281018801518982018901528701610524565b8181111561054f578988838b0101525b50601f01601f19169690960185019550928401929184019160010161050a565b5050505050604083015161058e60408601826001600160a01b03169052565b506060830151606085015260808301516105ad608086018260ff169052565b509392505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561064057878503603f1901845281518051808752885b81811015610610578281018901518882018a015288016105f5565b81811115610620578989838a0101525b50601f01601f1916959095018601945092850192908501906001016105db565b5092979650505050505050565b60006020825261066060208301846104d6565b9392505050565b60008382526040602083015261068060408301846104d6565b949350505050565b600181811c9082168061069c57607f821691505b602082108114156106bd57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122031241178e280a0d925c4c5617efca0310e91a896059bad31058cff9292f81f2b64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80634f062c5a14610046578063c26b265f1461006f578063cbee53a314610090575b600080fd5b6100596100543660046104be565b6100b0565b604051610066919061064d565b60405180910390f35b61008261007d3660046104be565b6101fe565b604051610066929190610667565b6100a361009e3660046104be565b61037c565b60405161006691906105b5565b6100b8610483565b60008281527f0a84207e1143ff19b71979feb4ec3b9e9ab20a9f584206f464503fa07b113fc360209081526040808320815160a081018352815481526001820180548451818702810187019095528085529195929486810194939192919084015b828210156101c557838290600052602060002001805461013890610688565b80601f016020809104026020016040519081016040528092919081815260200182805461016490610688565b80156101b15780601f10610186576101008083540402835291602001916101b1565b820191906000526020600020905b81548152906001019060200180831161019457829003601f168201915b505050505081526020019060010190610119565b5050509082525060028201546001600160a01b031660208201526003820154604082015260049091015460ff1660609091015292915050565b6000610208610483565b60008381527f0a84207e1143ff19b71979feb4ec3b9e9ab20a9f584206f464503fa07b113fc460209081526040808320548084527f0a84207e1143ff19b71979feb4ec3b9e9ab20a9f584206f464503fa07b113fc38352818420825160a0810184528154815260018201805485518188028101880190965280865293985090959194868101949391929084015b828210156103415783829060005260206000200180546102b490610688565b80601f01602080910402602001604051908101604052809291908181526020018280546102e090610688565b801561032d5780601f106103025761010080835404028352916020019161032d565b820191906000526020600020905b81548152906001019060200180831161031057829003601f168201915b505050505081526020019060010190610295565b5050509082525060028201546001600160a01b031660208201526003820154604082015260049091015460ff16606090910152919391925050565b60008181527f0a84207e1143ff19b71979feb4ec3b9e9ab20a9f584206f464503fa07b113fc360209081526040808320600101805482518185028101850190935280835260609492939192909184015b828210156104785783829060005260206000200180546103eb90610688565b80601f016020809104026020016040519081016040528092919081815260200182805461041790610688565b80156104645780601f1061043957610100808354040283529160200191610464565b820191906000526020600020905b81548152906001019060200180831161044757829003601f168201915b5050505050815260200190600101906103cc565b505050509050919050565b6040518060a00160405280600081526020016060815260200160006001600160a01b0316815260200160008152602001600060ff1681525090565b6000602082840312156104cf578081fd5b5035919050565b600060a083018251845260208084015160a08287015282815180855260c08801915060c08160051b89010194508383019250855b8181101561056f5788860360bf1901835283518051808852885b8181101561053f578281018801518982018901528701610524565b8181111561054f578988838b0101525b50601f01601f19169690960185019550928401929184019160010161050a565b5050505050604083015161058e60408601826001600160a01b03169052565b506060830151606085015260808301516105ad608086018260ff169052565b509392505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561064057878503603f1901845281518051808752885b81811015610610578281018901518882018a015288016105f5565b81811115610620578989838a0101525b50601f01601f1916959095018601945092850192908501906001016105db565b5092979650505050505050565b60006020825261066060208301846104d6565b9392505050565b60008382526040602083015261068060408301846104d6565b949350505050565b600181811c9082168061069c57607f821691505b602082108114156106bd57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122031241178e280a0d925c4c5617efca0310e91a896059bad31058cff9292f81f2b64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getTierHashes(uint256)": {
        "details": "It uses a EnumerableSet to store values and loops over each element to add to the array.Can be costly if calling within a contract for address with many tokens."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTier(uint256)": {
        "notice": "It returns information about a Tier for an index."
      },
      "getTierHashes(uint256)": {
        "notice": "It returns an array of token IDs owned by an address."
      },
      "getTokenTier(uint256)": {
        "notice": "It returns information about a Tier for a token ID."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
